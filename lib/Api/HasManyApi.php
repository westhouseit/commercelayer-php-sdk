<?php
/**
 * HasManyApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HasManyApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HasManyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation gETAdyenGatewayIdAdyenPayments
     *
     * Retrieve the adyen payments associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAdyenGatewayIdAdyenPayments($adyen_gateway_id)
    {
        $this->gETAdyenGatewayIdAdyenPaymentsWithHttpInfo($adyen_gateway_id);
    }

    /**
     * Operation gETAdyenGatewayIdAdyenPaymentsWithHttpInfo
     *
     * Retrieve the adyen payments associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAdyenGatewayIdAdyenPaymentsWithHttpInfo($adyen_gateway_id)
    {
        $request = $this->gETAdyenGatewayIdAdyenPaymentsRequest($adyen_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAdyenGatewayIdAdyenPaymentsAsync
     *
     * Retrieve the adyen payments associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenGatewayIdAdyenPaymentsAsync($adyen_gateway_id)
    {
        return $this->gETAdyenGatewayIdAdyenPaymentsAsyncWithHttpInfo($adyen_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAdyenGatewayIdAdyenPaymentsAsyncWithHttpInfo
     *
     * Retrieve the adyen payments associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenGatewayIdAdyenPaymentsAsyncWithHttpInfo($adyen_gateway_id)
    {
        $returnType = '';
        $request = $this->gETAdyenGatewayIdAdyenPaymentsRequest($adyen_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAdyenGatewayIdAdyenPayments'
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAdyenGatewayIdAdyenPaymentsRequest($adyen_gateway_id)
    {
        // verify the required parameter 'adyen_gateway_id' is set
        if ($adyen_gateway_id === null || (is_array($adyen_gateway_id) && count($adyen_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adyen_gateway_id when calling gETAdyenGatewayIdAdyenPayments'
            );
        }

        $resourcePath = '/adyen_gateways/{adyenGatewayId}/adyen_payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($adyen_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'adyenGatewayId' . '}',
                ObjectSerializer::toPathValue($adyen_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAdyenGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAdyenGatewayIdPaymentMethods($adyen_gateway_id)
    {
        $this->gETAdyenGatewayIdPaymentMethodsWithHttpInfo($adyen_gateway_id);
    }

    /**
     * Operation gETAdyenGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAdyenGatewayIdPaymentMethodsWithHttpInfo($adyen_gateway_id)
    {
        $request = $this->gETAdyenGatewayIdPaymentMethodsRequest($adyen_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAdyenGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenGatewayIdPaymentMethodsAsync($adyen_gateway_id)
    {
        return $this->gETAdyenGatewayIdPaymentMethodsAsyncWithHttpInfo($adyen_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAdyenGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the adyen gateway
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenGatewayIdPaymentMethodsAsyncWithHttpInfo($adyen_gateway_id)
    {
        $returnType = '';
        $request = $this->gETAdyenGatewayIdPaymentMethodsRequest($adyen_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAdyenGatewayIdPaymentMethods'
     *
     * @param  string $adyen_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAdyenGatewayIdPaymentMethodsRequest($adyen_gateway_id)
    {
        // verify the required parameter 'adyen_gateway_id' is set
        if ($adyen_gateway_id === null || (is_array($adyen_gateway_id) && count($adyen_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adyen_gateway_id when calling gETAdyenGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/adyen_gateways/{adyenGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($adyen_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'adyenGatewayId' . '}',
                ObjectSerializer::toPathValue($adyen_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAuthorizationIdCaptures
     *
     * Retrieve the captures associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAuthorizationIdCaptures($authorization_id)
    {
        $this->gETAuthorizationIdCapturesWithHttpInfo($authorization_id);
    }

    /**
     * Operation gETAuthorizationIdCapturesWithHttpInfo
     *
     * Retrieve the captures associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAuthorizationIdCapturesWithHttpInfo($authorization_id)
    {
        $request = $this->gETAuthorizationIdCapturesRequest($authorization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAuthorizationIdCapturesAsync
     *
     * Retrieve the captures associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAuthorizationIdCapturesAsync($authorization_id)
    {
        return $this->gETAuthorizationIdCapturesAsyncWithHttpInfo($authorization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAuthorizationIdCapturesAsyncWithHttpInfo
     *
     * Retrieve the captures associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAuthorizationIdCapturesAsyncWithHttpInfo($authorization_id)
    {
        $returnType = '';
        $request = $this->gETAuthorizationIdCapturesRequest($authorization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAuthorizationIdCaptures'
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAuthorizationIdCapturesRequest($authorization_id)
    {
        // verify the required parameter 'authorization_id' is set
        if ($authorization_id === null || (is_array($authorization_id) && count($authorization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization_id when calling gETAuthorizationIdCaptures'
            );
        }

        $resourcePath = '/authorizations/{authorizationId}/captures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($authorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizationId' . '}',
                ObjectSerializer::toPathValue($authorization_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAuthorizationIdVoids
     *
     * Retrieve the voids associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAuthorizationIdVoids($authorization_id)
    {
        $this->gETAuthorizationIdVoidsWithHttpInfo($authorization_id);
    }

    /**
     * Operation gETAuthorizationIdVoidsWithHttpInfo
     *
     * Retrieve the voids associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAuthorizationIdVoidsWithHttpInfo($authorization_id)
    {
        $request = $this->gETAuthorizationIdVoidsRequest($authorization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAuthorizationIdVoidsAsync
     *
     * Retrieve the voids associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAuthorizationIdVoidsAsync($authorization_id)
    {
        return $this->gETAuthorizationIdVoidsAsyncWithHttpInfo($authorization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAuthorizationIdVoidsAsyncWithHttpInfo
     *
     * Retrieve the voids associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAuthorizationIdVoidsAsyncWithHttpInfo($authorization_id)
    {
        $returnType = '';
        $request = $this->gETAuthorizationIdVoidsRequest($authorization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAuthorizationIdVoids'
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAuthorizationIdVoidsRequest($authorization_id)
    {
        // verify the required parameter 'authorization_id' is set
        if ($authorization_id === null || (is_array($authorization_id) && count($authorization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization_id when calling gETAuthorizationIdVoids'
            );
        }

        $resourcePath = '/authorizations/{authorizationId}/voids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($authorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizationId' . '}',
                ObjectSerializer::toPathValue($authorization_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAvalaraAccountIdAttachments
     *
     * Retrieve the attachments associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAvalaraAccountIdAttachments($avalara_account_id)
    {
        $this->gETAvalaraAccountIdAttachmentsWithHttpInfo($avalara_account_id);
    }

    /**
     * Operation gETAvalaraAccountIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAvalaraAccountIdAttachmentsWithHttpInfo($avalara_account_id)
    {
        $request = $this->gETAvalaraAccountIdAttachmentsRequest($avalara_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAvalaraAccountIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAvalaraAccountIdAttachmentsAsync($avalara_account_id)
    {
        return $this->gETAvalaraAccountIdAttachmentsAsyncWithHttpInfo($avalara_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAvalaraAccountIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAvalaraAccountIdAttachmentsAsyncWithHttpInfo($avalara_account_id)
    {
        $returnType = '';
        $request = $this->gETAvalaraAccountIdAttachmentsRequest($avalara_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAvalaraAccountIdAttachments'
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAvalaraAccountIdAttachmentsRequest($avalara_account_id)
    {
        // verify the required parameter 'avalara_account_id' is set
        if ($avalara_account_id === null || (is_array($avalara_account_id) && count($avalara_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $avalara_account_id when calling gETAvalaraAccountIdAttachments'
            );
        }

        $resourcePath = '/avalara_accounts/{avalaraAccountId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($avalara_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'avalaraAccountId' . '}',
                ObjectSerializer::toPathValue($avalara_account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAvalaraAccountIdTaxCategories
     *
     * Retrieve the tax categories associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAvalaraAccountIdTaxCategories($avalara_account_id)
    {
        $this->gETAvalaraAccountIdTaxCategoriesWithHttpInfo($avalara_account_id);
    }

    /**
     * Operation gETAvalaraAccountIdTaxCategoriesWithHttpInfo
     *
     * Retrieve the tax categories associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAvalaraAccountIdTaxCategoriesWithHttpInfo($avalara_account_id)
    {
        $request = $this->gETAvalaraAccountIdTaxCategoriesRequest($avalara_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAvalaraAccountIdTaxCategoriesAsync
     *
     * Retrieve the tax categories associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAvalaraAccountIdTaxCategoriesAsync($avalara_account_id)
    {
        return $this->gETAvalaraAccountIdTaxCategoriesAsyncWithHttpInfo($avalara_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAvalaraAccountIdTaxCategoriesAsyncWithHttpInfo
     *
     * Retrieve the tax categories associated to the avalara account
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAvalaraAccountIdTaxCategoriesAsyncWithHttpInfo($avalara_account_id)
    {
        $returnType = '';
        $request = $this->gETAvalaraAccountIdTaxCategoriesRequest($avalara_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAvalaraAccountIdTaxCategories'
     *
     * @param  string $avalara_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAvalaraAccountIdTaxCategoriesRequest($avalara_account_id)
    {
        // verify the required parameter 'avalara_account_id' is set
        if ($avalara_account_id === null || (is_array($avalara_account_id) && count($avalara_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $avalara_account_id when calling gETAvalaraAccountIdTaxCategories'
            );
        }

        $resourcePath = '/avalara_accounts/{avalaraAccountId}/tax_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($avalara_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'avalaraAccountId' . '}',
                ObjectSerializer::toPathValue($avalara_account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETBraintreeGatewayIdBraintreePayments
     *
     * Retrieve the braintree payments associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETBraintreeGatewayIdBraintreePayments($braintree_gateway_id)
    {
        $this->gETBraintreeGatewayIdBraintreePaymentsWithHttpInfo($braintree_gateway_id);
    }

    /**
     * Operation gETBraintreeGatewayIdBraintreePaymentsWithHttpInfo
     *
     * Retrieve the braintree payments associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETBraintreeGatewayIdBraintreePaymentsWithHttpInfo($braintree_gateway_id)
    {
        $request = $this->gETBraintreeGatewayIdBraintreePaymentsRequest($braintree_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETBraintreeGatewayIdBraintreePaymentsAsync
     *
     * Retrieve the braintree payments associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreeGatewayIdBraintreePaymentsAsync($braintree_gateway_id)
    {
        return $this->gETBraintreeGatewayIdBraintreePaymentsAsyncWithHttpInfo($braintree_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETBraintreeGatewayIdBraintreePaymentsAsyncWithHttpInfo
     *
     * Retrieve the braintree payments associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreeGatewayIdBraintreePaymentsAsyncWithHttpInfo($braintree_gateway_id)
    {
        $returnType = '';
        $request = $this->gETBraintreeGatewayIdBraintreePaymentsRequest($braintree_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETBraintreeGatewayIdBraintreePayments'
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETBraintreeGatewayIdBraintreePaymentsRequest($braintree_gateway_id)
    {
        // verify the required parameter 'braintree_gateway_id' is set
        if ($braintree_gateway_id === null || (is_array($braintree_gateway_id) && count($braintree_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $braintree_gateway_id when calling gETBraintreeGatewayIdBraintreePayments'
            );
        }

        $resourcePath = '/braintree_gateways/{braintreeGatewayId}/braintree_payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($braintree_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'braintreeGatewayId' . '}',
                ObjectSerializer::toPathValue($braintree_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETBraintreeGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETBraintreeGatewayIdPaymentMethods($braintree_gateway_id)
    {
        $this->gETBraintreeGatewayIdPaymentMethodsWithHttpInfo($braintree_gateway_id);
    }

    /**
     * Operation gETBraintreeGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETBraintreeGatewayIdPaymentMethodsWithHttpInfo($braintree_gateway_id)
    {
        $request = $this->gETBraintreeGatewayIdPaymentMethodsRequest($braintree_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETBraintreeGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreeGatewayIdPaymentMethodsAsync($braintree_gateway_id)
    {
        return $this->gETBraintreeGatewayIdPaymentMethodsAsyncWithHttpInfo($braintree_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETBraintreeGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the braintree gateway
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreeGatewayIdPaymentMethodsAsyncWithHttpInfo($braintree_gateway_id)
    {
        $returnType = '';
        $request = $this->gETBraintreeGatewayIdPaymentMethodsRequest($braintree_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETBraintreeGatewayIdPaymentMethods'
     *
     * @param  string $braintree_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETBraintreeGatewayIdPaymentMethodsRequest($braintree_gateway_id)
    {
        // verify the required parameter 'braintree_gateway_id' is set
        if ($braintree_gateway_id === null || (is_array($braintree_gateway_id) && count($braintree_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $braintree_gateway_id when calling gETBraintreeGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/braintree_gateways/{braintreeGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($braintree_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'braintreeGatewayId' . '}',
                ObjectSerializer::toPathValue($braintree_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCaptureIdRefunds
     *
     * Retrieve the refunds associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCaptureIdRefunds($capture_id)
    {
        $this->gETCaptureIdRefundsWithHttpInfo($capture_id);
    }

    /**
     * Operation gETCaptureIdRefundsWithHttpInfo
     *
     * Retrieve the refunds associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCaptureIdRefundsWithHttpInfo($capture_id)
    {
        $request = $this->gETCaptureIdRefundsRequest($capture_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCaptureIdRefundsAsync
     *
     * Retrieve the refunds associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCaptureIdRefundsAsync($capture_id)
    {
        return $this->gETCaptureIdRefundsAsyncWithHttpInfo($capture_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCaptureIdRefundsAsyncWithHttpInfo
     *
     * Retrieve the refunds associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCaptureIdRefundsAsyncWithHttpInfo($capture_id)
    {
        $returnType = '';
        $request = $this->gETCaptureIdRefundsRequest($capture_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCaptureIdRefunds'
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCaptureIdRefundsRequest($capture_id)
    {
        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling gETCaptureIdRefunds'
            );
        }

        $resourcePath = '/captures/{captureId}/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'captureId' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCarrierAccountIdAttachments
     *
     * Retrieve the attachments associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCarrierAccountIdAttachments($carrier_account_id)
    {
        $this->gETCarrierAccountIdAttachmentsWithHttpInfo($carrier_account_id);
    }

    /**
     * Operation gETCarrierAccountIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCarrierAccountIdAttachmentsWithHttpInfo($carrier_account_id)
    {
        $request = $this->gETCarrierAccountIdAttachmentsRequest($carrier_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCarrierAccountIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCarrierAccountIdAttachmentsAsync($carrier_account_id)
    {
        return $this->gETCarrierAccountIdAttachmentsAsyncWithHttpInfo($carrier_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCarrierAccountIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCarrierAccountIdAttachmentsAsyncWithHttpInfo($carrier_account_id)
    {
        $returnType = '';
        $request = $this->gETCarrierAccountIdAttachmentsRequest($carrier_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCarrierAccountIdAttachments'
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCarrierAccountIdAttachmentsRequest($carrier_account_id)
    {
        // verify the required parameter 'carrier_account_id' is set
        if ($carrier_account_id === null || (is_array($carrier_account_id) && count($carrier_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_account_id when calling gETCarrierAccountIdAttachments'
            );
        }

        $resourcePath = '/carrier_accounts/{carrierAccountId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($carrier_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierAccountId' . '}',
                ObjectSerializer::toPathValue($carrier_account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCheckoutComGatewayIdCheckoutComPayments
     *
     * Retrieve the checkout com payments associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCheckoutComGatewayIdCheckoutComPayments($checkout_com_gateway_id)
    {
        $this->gETCheckoutComGatewayIdCheckoutComPaymentsWithHttpInfo($checkout_com_gateway_id);
    }

    /**
     * Operation gETCheckoutComGatewayIdCheckoutComPaymentsWithHttpInfo
     *
     * Retrieve the checkout com payments associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCheckoutComGatewayIdCheckoutComPaymentsWithHttpInfo($checkout_com_gateway_id)
    {
        $request = $this->gETCheckoutComGatewayIdCheckoutComPaymentsRequest($checkout_com_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCheckoutComGatewayIdCheckoutComPaymentsAsync
     *
     * Retrieve the checkout com payments associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComGatewayIdCheckoutComPaymentsAsync($checkout_com_gateway_id)
    {
        return $this->gETCheckoutComGatewayIdCheckoutComPaymentsAsyncWithHttpInfo($checkout_com_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCheckoutComGatewayIdCheckoutComPaymentsAsyncWithHttpInfo
     *
     * Retrieve the checkout com payments associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComGatewayIdCheckoutComPaymentsAsyncWithHttpInfo($checkout_com_gateway_id)
    {
        $returnType = '';
        $request = $this->gETCheckoutComGatewayIdCheckoutComPaymentsRequest($checkout_com_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCheckoutComGatewayIdCheckoutComPayments'
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCheckoutComGatewayIdCheckoutComPaymentsRequest($checkout_com_gateway_id)
    {
        // verify the required parameter 'checkout_com_gateway_id' is set
        if ($checkout_com_gateway_id === null || (is_array($checkout_com_gateway_id) && count($checkout_com_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_com_gateway_id when calling gETCheckoutComGatewayIdCheckoutComPayments'
            );
        }

        $resourcePath = '/checkout_com_gateways/{checkoutComGatewayId}/checkout_com_payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checkout_com_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutComGatewayId' . '}',
                ObjectSerializer::toPathValue($checkout_com_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCheckoutComGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCheckoutComGatewayIdPaymentMethods($checkout_com_gateway_id)
    {
        $this->gETCheckoutComGatewayIdPaymentMethodsWithHttpInfo($checkout_com_gateway_id);
    }

    /**
     * Operation gETCheckoutComGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCheckoutComGatewayIdPaymentMethodsWithHttpInfo($checkout_com_gateway_id)
    {
        $request = $this->gETCheckoutComGatewayIdPaymentMethodsRequest($checkout_com_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCheckoutComGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComGatewayIdPaymentMethodsAsync($checkout_com_gateway_id)
    {
        return $this->gETCheckoutComGatewayIdPaymentMethodsAsyncWithHttpInfo($checkout_com_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCheckoutComGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the checkout com gateway
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComGatewayIdPaymentMethodsAsyncWithHttpInfo($checkout_com_gateway_id)
    {
        $returnType = '';
        $request = $this->gETCheckoutComGatewayIdPaymentMethodsRequest($checkout_com_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCheckoutComGatewayIdPaymentMethods'
     *
     * @param  string $checkout_com_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCheckoutComGatewayIdPaymentMethodsRequest($checkout_com_gateway_id)
    {
        // verify the required parameter 'checkout_com_gateway_id' is set
        if ($checkout_com_gateway_id === null || (is_array($checkout_com_gateway_id) && count($checkout_com_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_com_gateway_id when calling gETCheckoutComGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/checkout_com_gateways/{checkoutComGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checkout_com_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutComGatewayId' . '}',
                ObjectSerializer::toPathValue($checkout_com_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCouponCodesPromotionRuleIdCoupons
     *
     * Retrieve the coupons associated to the coupon codes promotion rule
     *
     * @param  string $coupon_codes_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCouponCodesPromotionRuleIdCoupons($coupon_codes_promotion_rule_id)
    {
        $this->gETCouponCodesPromotionRuleIdCouponsWithHttpInfo($coupon_codes_promotion_rule_id);
    }

    /**
     * Operation gETCouponCodesPromotionRuleIdCouponsWithHttpInfo
     *
     * Retrieve the coupons associated to the coupon codes promotion rule
     *
     * @param  string $coupon_codes_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCouponCodesPromotionRuleIdCouponsWithHttpInfo($coupon_codes_promotion_rule_id)
    {
        $request = $this->gETCouponCodesPromotionRuleIdCouponsRequest($coupon_codes_promotion_rule_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCouponCodesPromotionRuleIdCouponsAsync
     *
     * Retrieve the coupons associated to the coupon codes promotion rule
     *
     * @param  string $coupon_codes_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCouponCodesPromotionRuleIdCouponsAsync($coupon_codes_promotion_rule_id)
    {
        return $this->gETCouponCodesPromotionRuleIdCouponsAsyncWithHttpInfo($coupon_codes_promotion_rule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCouponCodesPromotionRuleIdCouponsAsyncWithHttpInfo
     *
     * Retrieve the coupons associated to the coupon codes promotion rule
     *
     * @param  string $coupon_codes_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCouponCodesPromotionRuleIdCouponsAsyncWithHttpInfo($coupon_codes_promotion_rule_id)
    {
        $returnType = '';
        $request = $this->gETCouponCodesPromotionRuleIdCouponsRequest($coupon_codes_promotion_rule_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCouponCodesPromotionRuleIdCoupons'
     *
     * @param  string $coupon_codes_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCouponCodesPromotionRuleIdCouponsRequest($coupon_codes_promotion_rule_id)
    {
        // verify the required parameter 'coupon_codes_promotion_rule_id' is set
        if ($coupon_codes_promotion_rule_id === null || (is_array($coupon_codes_promotion_rule_id) && count($coupon_codes_promotion_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_codes_promotion_rule_id when calling gETCouponCodesPromotionRuleIdCoupons'
            );
        }

        $resourcePath = '/coupon_codes_promotion_rules/{couponCodesPromotionRuleId}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($coupon_codes_promotion_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCodesPromotionRuleId' . '}',
                ObjectSerializer::toPathValue($coupon_codes_promotion_rule_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerGroupIdAttachments
     *
     * Retrieve the attachments associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerGroupIdAttachments($customer_group_id)
    {
        $this->gETCustomerGroupIdAttachmentsWithHttpInfo($customer_group_id);
    }

    /**
     * Operation gETCustomerGroupIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerGroupIdAttachmentsWithHttpInfo($customer_group_id)
    {
        $request = $this->gETCustomerGroupIdAttachmentsRequest($customer_group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerGroupIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerGroupIdAttachmentsAsync($customer_group_id)
    {
        return $this->gETCustomerGroupIdAttachmentsAsyncWithHttpInfo($customer_group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerGroupIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerGroupIdAttachmentsAsyncWithHttpInfo($customer_group_id)
    {
        $returnType = '';
        $request = $this->gETCustomerGroupIdAttachmentsRequest($customer_group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerGroupIdAttachments'
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerGroupIdAttachmentsRequest($customer_group_id)
    {
        // verify the required parameter 'customer_group_id' is set
        if ($customer_group_id === null || (is_array($customer_group_id) && count($customer_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_group_id when calling gETCustomerGroupIdAttachments'
            );
        }

        $resourcePath = '/customer_groups/{customerGroupId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerGroupId' . '}',
                ObjectSerializer::toPathValue($customer_group_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerGroupIdCustomers
     *
     * Retrieve the customers associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerGroupIdCustomers($customer_group_id)
    {
        $this->gETCustomerGroupIdCustomersWithHttpInfo($customer_group_id);
    }

    /**
     * Operation gETCustomerGroupIdCustomersWithHttpInfo
     *
     * Retrieve the customers associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerGroupIdCustomersWithHttpInfo($customer_group_id)
    {
        $request = $this->gETCustomerGroupIdCustomersRequest($customer_group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerGroupIdCustomersAsync
     *
     * Retrieve the customers associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerGroupIdCustomersAsync($customer_group_id)
    {
        return $this->gETCustomerGroupIdCustomersAsyncWithHttpInfo($customer_group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerGroupIdCustomersAsyncWithHttpInfo
     *
     * Retrieve the customers associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerGroupIdCustomersAsyncWithHttpInfo($customer_group_id)
    {
        $returnType = '';
        $request = $this->gETCustomerGroupIdCustomersRequest($customer_group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerGroupIdCustomers'
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerGroupIdCustomersRequest($customer_group_id)
    {
        // verify the required parameter 'customer_group_id' is set
        if ($customer_group_id === null || (is_array($customer_group_id) && count($customer_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_group_id when calling gETCustomerGroupIdCustomers'
            );
        }

        $resourcePath = '/customer_groups/{customerGroupId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerGroupId' . '}',
                ObjectSerializer::toPathValue($customer_group_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerGroupIdMarkets
     *
     * Retrieve the markets associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerGroupIdMarkets($customer_group_id)
    {
        $this->gETCustomerGroupIdMarketsWithHttpInfo($customer_group_id);
    }

    /**
     * Operation gETCustomerGroupIdMarketsWithHttpInfo
     *
     * Retrieve the markets associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerGroupIdMarketsWithHttpInfo($customer_group_id)
    {
        $request = $this->gETCustomerGroupIdMarketsRequest($customer_group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerGroupIdMarketsAsync
     *
     * Retrieve the markets associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerGroupIdMarketsAsync($customer_group_id)
    {
        return $this->gETCustomerGroupIdMarketsAsyncWithHttpInfo($customer_group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerGroupIdMarketsAsyncWithHttpInfo
     *
     * Retrieve the markets associated to the customer group
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerGroupIdMarketsAsyncWithHttpInfo($customer_group_id)
    {
        $returnType = '';
        $request = $this->gETCustomerGroupIdMarketsRequest($customer_group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerGroupIdMarkets'
     *
     * @param  string $customer_group_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerGroupIdMarketsRequest($customer_group_id)
    {
        // verify the required parameter 'customer_group_id' is set
        if ($customer_group_id === null || (is_array($customer_group_id) && count($customer_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_group_id when calling gETCustomerGroupIdMarkets'
            );
        }

        $resourcePath = '/customer_groups/{customerGroupId}/markets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerGroupId' . '}',
                ObjectSerializer::toPathValue($customer_group_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerIdAttachments
     *
     * Retrieve the attachments associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerIdAttachments($customer_id)
    {
        $this->gETCustomerIdAttachmentsWithHttpInfo($customer_id);
    }

    /**
     * Operation gETCustomerIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerIdAttachmentsWithHttpInfo($customer_id)
    {
        $request = $this->gETCustomerIdAttachmentsRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdAttachmentsAsync($customer_id)
    {
        return $this->gETCustomerIdAttachmentsAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdAttachmentsAsyncWithHttpInfo($customer_id)
    {
        $returnType = '';
        $request = $this->gETCustomerIdAttachmentsRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerIdAttachments'
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerIdAttachmentsRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling gETCustomerIdAttachments'
            );
        }

        $resourcePath = '/customers/{customerId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerIdCustomerAddresses
     *
     * Retrieve the customer addresses associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerIdCustomerAddresses($customer_id)
    {
        $this->gETCustomerIdCustomerAddressesWithHttpInfo($customer_id);
    }

    /**
     * Operation gETCustomerIdCustomerAddressesWithHttpInfo
     *
     * Retrieve the customer addresses associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerIdCustomerAddressesWithHttpInfo($customer_id)
    {
        $request = $this->gETCustomerIdCustomerAddressesRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerIdCustomerAddressesAsync
     *
     * Retrieve the customer addresses associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerAddressesAsync($customer_id)
    {
        return $this->gETCustomerIdCustomerAddressesAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerIdCustomerAddressesAsyncWithHttpInfo
     *
     * Retrieve the customer addresses associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerAddressesAsyncWithHttpInfo($customer_id)
    {
        $returnType = '';
        $request = $this->gETCustomerIdCustomerAddressesRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerIdCustomerAddresses'
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerIdCustomerAddressesRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling gETCustomerIdCustomerAddresses'
            );
        }

        $resourcePath = '/customers/{customerId}/customer_addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerIdCustomerPaymentSources
     *
     * Retrieve the customer payment sources associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerIdCustomerPaymentSources($customer_id)
    {
        $this->gETCustomerIdCustomerPaymentSourcesWithHttpInfo($customer_id);
    }

    /**
     * Operation gETCustomerIdCustomerPaymentSourcesWithHttpInfo
     *
     * Retrieve the customer payment sources associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerIdCustomerPaymentSourcesWithHttpInfo($customer_id)
    {
        $request = $this->gETCustomerIdCustomerPaymentSourcesRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerIdCustomerPaymentSourcesAsync
     *
     * Retrieve the customer payment sources associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerPaymentSourcesAsync($customer_id)
    {
        return $this->gETCustomerIdCustomerPaymentSourcesAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerIdCustomerPaymentSourcesAsyncWithHttpInfo
     *
     * Retrieve the customer payment sources associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerPaymentSourcesAsyncWithHttpInfo($customer_id)
    {
        $returnType = '';
        $request = $this->gETCustomerIdCustomerPaymentSourcesRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerIdCustomerPaymentSources'
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerIdCustomerPaymentSourcesRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling gETCustomerIdCustomerPaymentSources'
            );
        }

        $resourcePath = '/customers/{customerId}/customer_payment_sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerIdCustomerSubscriptions
     *
     * Retrieve the customer subscriptions associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerIdCustomerSubscriptions($customer_id)
    {
        $this->gETCustomerIdCustomerSubscriptionsWithHttpInfo($customer_id);
    }

    /**
     * Operation gETCustomerIdCustomerSubscriptionsWithHttpInfo
     *
     * Retrieve the customer subscriptions associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerIdCustomerSubscriptionsWithHttpInfo($customer_id)
    {
        $request = $this->gETCustomerIdCustomerSubscriptionsRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerIdCustomerSubscriptionsAsync
     *
     * Retrieve the customer subscriptions associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerSubscriptionsAsync($customer_id)
    {
        return $this->gETCustomerIdCustomerSubscriptionsAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerIdCustomerSubscriptionsAsyncWithHttpInfo
     *
     * Retrieve the customer subscriptions associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerSubscriptionsAsyncWithHttpInfo($customer_id)
    {
        $returnType = '';
        $request = $this->gETCustomerIdCustomerSubscriptionsRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerIdCustomerSubscriptions'
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerIdCustomerSubscriptionsRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling gETCustomerIdCustomerSubscriptions'
            );
        }

        $resourcePath = '/customers/{customerId}/customer_subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerIdOrders
     *
     * Retrieve the orders associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerIdOrders($customer_id)
    {
        $this->gETCustomerIdOrdersWithHttpInfo($customer_id);
    }

    /**
     * Operation gETCustomerIdOrdersWithHttpInfo
     *
     * Retrieve the orders associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerIdOrdersWithHttpInfo($customer_id)
    {
        $request = $this->gETCustomerIdOrdersRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerIdOrdersAsync
     *
     * Retrieve the orders associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdOrdersAsync($customer_id)
    {
        return $this->gETCustomerIdOrdersAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerIdOrdersAsyncWithHttpInfo
     *
     * Retrieve the orders associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdOrdersAsyncWithHttpInfo($customer_id)
    {
        $returnType = '';
        $request = $this->gETCustomerIdOrdersRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerIdOrders'
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerIdOrdersRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling gETCustomerIdOrders'
            );
        }

        $resourcePath = '/customers/{customerId}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerIdReturns
     *
     * Retrieve the returns associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerIdReturns($customer_id)
    {
        $this->gETCustomerIdReturnsWithHttpInfo($customer_id);
    }

    /**
     * Operation gETCustomerIdReturnsWithHttpInfo
     *
     * Retrieve the returns associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerIdReturnsWithHttpInfo($customer_id)
    {
        $request = $this->gETCustomerIdReturnsRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerIdReturnsAsync
     *
     * Retrieve the returns associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdReturnsAsync($customer_id)
    {
        return $this->gETCustomerIdReturnsAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerIdReturnsAsyncWithHttpInfo
     *
     * Retrieve the returns associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdReturnsAsyncWithHttpInfo($customer_id)
    {
        $returnType = '';
        $request = $this->gETCustomerIdReturnsRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerIdReturns'
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerIdReturnsRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling gETCustomerIdReturns'
            );
        }

        $resourcePath = '/customers/{customerId}/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETDeliveryLeadTimeIdAttachments
     *
     * Retrieve the attachments associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETDeliveryLeadTimeIdAttachments($delivery_lead_time_id)
    {
        $this->gETDeliveryLeadTimeIdAttachmentsWithHttpInfo($delivery_lead_time_id);
    }

    /**
     * Operation gETDeliveryLeadTimeIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETDeliveryLeadTimeIdAttachmentsWithHttpInfo($delivery_lead_time_id)
    {
        $request = $this->gETDeliveryLeadTimeIdAttachmentsRequest($delivery_lead_time_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETDeliveryLeadTimeIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETDeliveryLeadTimeIdAttachmentsAsync($delivery_lead_time_id)
    {
        return $this->gETDeliveryLeadTimeIdAttachmentsAsyncWithHttpInfo($delivery_lead_time_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETDeliveryLeadTimeIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETDeliveryLeadTimeIdAttachmentsAsyncWithHttpInfo($delivery_lead_time_id)
    {
        $returnType = '';
        $request = $this->gETDeliveryLeadTimeIdAttachmentsRequest($delivery_lead_time_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETDeliveryLeadTimeIdAttachments'
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETDeliveryLeadTimeIdAttachmentsRequest($delivery_lead_time_id)
    {
        // verify the required parameter 'delivery_lead_time_id' is set
        if ($delivery_lead_time_id === null || (is_array($delivery_lead_time_id) && count($delivery_lead_time_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_lead_time_id when calling gETDeliveryLeadTimeIdAttachments'
            );
        }

        $resourcePath = '/delivery_lead_times/{deliveryLeadTimeId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_lead_time_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryLeadTimeId' . '}',
                ObjectSerializer::toPathValue($delivery_lead_time_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalGatewayIdExternalPayments
     *
     * Retrieve the external payments associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalGatewayIdExternalPayments($external_gateway_id)
    {
        $this->gETExternalGatewayIdExternalPaymentsWithHttpInfo($external_gateway_id);
    }

    /**
     * Operation gETExternalGatewayIdExternalPaymentsWithHttpInfo
     *
     * Retrieve the external payments associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalGatewayIdExternalPaymentsWithHttpInfo($external_gateway_id)
    {
        $request = $this->gETExternalGatewayIdExternalPaymentsRequest($external_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalGatewayIdExternalPaymentsAsync
     *
     * Retrieve the external payments associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalGatewayIdExternalPaymentsAsync($external_gateway_id)
    {
        return $this->gETExternalGatewayIdExternalPaymentsAsyncWithHttpInfo($external_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalGatewayIdExternalPaymentsAsyncWithHttpInfo
     *
     * Retrieve the external payments associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalGatewayIdExternalPaymentsAsyncWithHttpInfo($external_gateway_id)
    {
        $returnType = '';
        $request = $this->gETExternalGatewayIdExternalPaymentsRequest($external_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalGatewayIdExternalPayments'
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalGatewayIdExternalPaymentsRequest($external_gateway_id)
    {
        // verify the required parameter 'external_gateway_id' is set
        if ($external_gateway_id === null || (is_array($external_gateway_id) && count($external_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_gateway_id when calling gETExternalGatewayIdExternalPayments'
            );
        }

        $resourcePath = '/external_gateways/{externalGatewayId}/external_payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalGatewayId' . '}',
                ObjectSerializer::toPathValue($external_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalGatewayIdPaymentMethods($external_gateway_id)
    {
        $this->gETExternalGatewayIdPaymentMethodsWithHttpInfo($external_gateway_id);
    }

    /**
     * Operation gETExternalGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalGatewayIdPaymentMethodsWithHttpInfo($external_gateway_id)
    {
        $request = $this->gETExternalGatewayIdPaymentMethodsRequest($external_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalGatewayIdPaymentMethodsAsync($external_gateway_id)
    {
        return $this->gETExternalGatewayIdPaymentMethodsAsyncWithHttpInfo($external_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the external gateway
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalGatewayIdPaymentMethodsAsyncWithHttpInfo($external_gateway_id)
    {
        $returnType = '';
        $request = $this->gETExternalGatewayIdPaymentMethodsRequest($external_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalGatewayIdPaymentMethods'
     *
     * @param  string $external_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalGatewayIdPaymentMethodsRequest($external_gateway_id)
    {
        // verify the required parameter 'external_gateway_id' is set
        if ($external_gateway_id === null || (is_array($external_gateway_id) && count($external_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_gateway_id when calling gETExternalGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/external_gateways/{externalGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalGatewayId' . '}',
                ObjectSerializer::toPathValue($external_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalPromotionIdAttachments
     *
     * Retrieve the attachments associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalPromotionIdAttachments($external_promotion_id)
    {
        $this->gETExternalPromotionIdAttachmentsWithHttpInfo($external_promotion_id);
    }

    /**
     * Operation gETExternalPromotionIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalPromotionIdAttachmentsWithHttpInfo($external_promotion_id)
    {
        $request = $this->gETExternalPromotionIdAttachmentsRequest($external_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalPromotionIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdAttachmentsAsync($external_promotion_id)
    {
        return $this->gETExternalPromotionIdAttachmentsAsyncWithHttpInfo($external_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalPromotionIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdAttachmentsAsyncWithHttpInfo($external_promotion_id)
    {
        $returnType = '';
        $request = $this->gETExternalPromotionIdAttachmentsRequest($external_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalPromotionIdAttachments'
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalPromotionIdAttachmentsRequest($external_promotion_id)
    {
        // verify the required parameter 'external_promotion_id' is set
        if ($external_promotion_id === null || (is_array($external_promotion_id) && count($external_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_promotion_id when calling gETExternalPromotionIdAttachments'
            );
        }

        $resourcePath = '/external_promotions/{externalPromotionId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPromotionId' . '}',
                ObjectSerializer::toPathValue($external_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalTaxCalculatorIdAttachments
     *
     * Retrieve the attachments associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalTaxCalculatorIdAttachments($external_tax_calculator_id)
    {
        $this->gETExternalTaxCalculatorIdAttachmentsWithHttpInfo($external_tax_calculator_id);
    }

    /**
     * Operation gETExternalTaxCalculatorIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalTaxCalculatorIdAttachmentsWithHttpInfo($external_tax_calculator_id)
    {
        $request = $this->gETExternalTaxCalculatorIdAttachmentsRequest($external_tax_calculator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalTaxCalculatorIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalTaxCalculatorIdAttachmentsAsync($external_tax_calculator_id)
    {
        return $this->gETExternalTaxCalculatorIdAttachmentsAsyncWithHttpInfo($external_tax_calculator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalTaxCalculatorIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalTaxCalculatorIdAttachmentsAsyncWithHttpInfo($external_tax_calculator_id)
    {
        $returnType = '';
        $request = $this->gETExternalTaxCalculatorIdAttachmentsRequest($external_tax_calculator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalTaxCalculatorIdAttachments'
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalTaxCalculatorIdAttachmentsRequest($external_tax_calculator_id)
    {
        // verify the required parameter 'external_tax_calculator_id' is set
        if ($external_tax_calculator_id === null || (is_array($external_tax_calculator_id) && count($external_tax_calculator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_tax_calculator_id when calling gETExternalTaxCalculatorIdAttachments'
            );
        }

        $resourcePath = '/external_tax_calculators/{externalTaxCalculatorId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_tax_calculator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalTaxCalculatorId' . '}',
                ObjectSerializer::toPathValue($external_tax_calculator_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalTaxCalculatorIdTaxCategories
     *
     * Retrieve the tax categories associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalTaxCalculatorIdTaxCategories($external_tax_calculator_id)
    {
        $this->gETExternalTaxCalculatorIdTaxCategoriesWithHttpInfo($external_tax_calculator_id);
    }

    /**
     * Operation gETExternalTaxCalculatorIdTaxCategoriesWithHttpInfo
     *
     * Retrieve the tax categories associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalTaxCalculatorIdTaxCategoriesWithHttpInfo($external_tax_calculator_id)
    {
        $request = $this->gETExternalTaxCalculatorIdTaxCategoriesRequest($external_tax_calculator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalTaxCalculatorIdTaxCategoriesAsync
     *
     * Retrieve the tax categories associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalTaxCalculatorIdTaxCategoriesAsync($external_tax_calculator_id)
    {
        return $this->gETExternalTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo($external_tax_calculator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo
     *
     * Retrieve the tax categories associated to the external tax calculator
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo($external_tax_calculator_id)
    {
        $returnType = '';
        $request = $this->gETExternalTaxCalculatorIdTaxCategoriesRequest($external_tax_calculator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalTaxCalculatorIdTaxCategories'
     *
     * @param  string $external_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalTaxCalculatorIdTaxCategoriesRequest($external_tax_calculator_id)
    {
        // verify the required parameter 'external_tax_calculator_id' is set
        if ($external_tax_calculator_id === null || (is_array($external_tax_calculator_id) && count($external_tax_calculator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_tax_calculator_id when calling gETExternalTaxCalculatorIdTaxCategories'
            );
        }

        $resourcePath = '/external_tax_calculators/{externalTaxCalculatorId}/tax_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_tax_calculator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalTaxCalculatorId' . '}',
                ObjectSerializer::toPathValue($external_tax_calculator_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFixedAmountPromotionIdAttachments
     *
     * Retrieve the attachments associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFixedAmountPromotionIdAttachments($fixed_amount_promotion_id)
    {
        $this->gETFixedAmountPromotionIdAttachmentsWithHttpInfo($fixed_amount_promotion_id);
    }

    /**
     * Operation gETFixedAmountPromotionIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFixedAmountPromotionIdAttachmentsWithHttpInfo($fixed_amount_promotion_id)
    {
        $request = $this->gETFixedAmountPromotionIdAttachmentsRequest($fixed_amount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFixedAmountPromotionIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdAttachmentsAsync($fixed_amount_promotion_id)
    {
        return $this->gETFixedAmountPromotionIdAttachmentsAsyncWithHttpInfo($fixed_amount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFixedAmountPromotionIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdAttachmentsAsyncWithHttpInfo($fixed_amount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFixedAmountPromotionIdAttachmentsRequest($fixed_amount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFixedAmountPromotionIdAttachments'
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFixedAmountPromotionIdAttachmentsRequest($fixed_amount_promotion_id)
    {
        // verify the required parameter 'fixed_amount_promotion_id' is set
        if ($fixed_amount_promotion_id === null || (is_array($fixed_amount_promotion_id) && count($fixed_amount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fixed_amount_promotion_id when calling gETFixedAmountPromotionIdAttachments'
            );
        }

        $resourcePath = '/fixed_amount_promotions/{fixedAmountPromotionId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fixed_amount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fixedAmountPromotionId' . '}',
                ObjectSerializer::toPathValue($fixed_amount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFreeShippingPromotionIdAttachments
     *
     * Retrieve the attachments associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFreeShippingPromotionIdAttachments($free_shipping_promotion_id)
    {
        $this->gETFreeShippingPromotionIdAttachmentsWithHttpInfo($free_shipping_promotion_id);
    }

    /**
     * Operation gETFreeShippingPromotionIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFreeShippingPromotionIdAttachmentsWithHttpInfo($free_shipping_promotion_id)
    {
        $request = $this->gETFreeShippingPromotionIdAttachmentsRequest($free_shipping_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFreeShippingPromotionIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdAttachmentsAsync($free_shipping_promotion_id)
    {
        return $this->gETFreeShippingPromotionIdAttachmentsAsyncWithHttpInfo($free_shipping_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFreeShippingPromotionIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdAttachmentsAsyncWithHttpInfo($free_shipping_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFreeShippingPromotionIdAttachmentsRequest($free_shipping_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFreeShippingPromotionIdAttachments'
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFreeShippingPromotionIdAttachmentsRequest($free_shipping_promotion_id)
    {
        // verify the required parameter 'free_shipping_promotion_id' is set
        if ($free_shipping_promotion_id === null || (is_array($free_shipping_promotion_id) && count($free_shipping_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_shipping_promotion_id when calling gETFreeShippingPromotionIdAttachments'
            );
        }

        $resourcePath = '/free_shipping_promotions/{freeShippingPromotionId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($free_shipping_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'freeShippingPromotionId' . '}',
                ObjectSerializer::toPathValue($free_shipping_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETGiftCardIdAttachments
     *
     * Retrieve the attachments associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETGiftCardIdAttachments($gift_card_id)
    {
        $this->gETGiftCardIdAttachmentsWithHttpInfo($gift_card_id);
    }

    /**
     * Operation gETGiftCardIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETGiftCardIdAttachmentsWithHttpInfo($gift_card_id)
    {
        $request = $this->gETGiftCardIdAttachmentsRequest($gift_card_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETGiftCardIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardIdAttachmentsAsync($gift_card_id)
    {
        return $this->gETGiftCardIdAttachmentsAsyncWithHttpInfo($gift_card_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETGiftCardIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardIdAttachmentsAsyncWithHttpInfo($gift_card_id)
    {
        $returnType = '';
        $request = $this->gETGiftCardIdAttachmentsRequest($gift_card_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETGiftCardIdAttachments'
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETGiftCardIdAttachmentsRequest($gift_card_id)
    {
        // verify the required parameter 'gift_card_id' is set
        if ($gift_card_id === null || (is_array($gift_card_id) && count($gift_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gift_card_id when calling gETGiftCardIdAttachments'
            );
        }

        $resourcePath = '/gift_cards/{giftCardId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($gift_card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'giftCardId' . '}',
                ObjectSerializer::toPathValue($gift_card_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETGiftCardRecipientIdAttachments
     *
     * Retrieve the attachments associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETGiftCardRecipientIdAttachments($gift_card_recipient_id)
    {
        $this->gETGiftCardRecipientIdAttachmentsWithHttpInfo($gift_card_recipient_id);
    }

    /**
     * Operation gETGiftCardRecipientIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETGiftCardRecipientIdAttachmentsWithHttpInfo($gift_card_recipient_id)
    {
        $request = $this->gETGiftCardRecipientIdAttachmentsRequest($gift_card_recipient_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETGiftCardRecipientIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardRecipientIdAttachmentsAsync($gift_card_recipient_id)
    {
        return $this->gETGiftCardRecipientIdAttachmentsAsyncWithHttpInfo($gift_card_recipient_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETGiftCardRecipientIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardRecipientIdAttachmentsAsyncWithHttpInfo($gift_card_recipient_id)
    {
        $returnType = '';
        $request = $this->gETGiftCardRecipientIdAttachmentsRequest($gift_card_recipient_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETGiftCardRecipientIdAttachments'
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETGiftCardRecipientIdAttachmentsRequest($gift_card_recipient_id)
    {
        // verify the required parameter 'gift_card_recipient_id' is set
        if ($gift_card_recipient_id === null || (is_array($gift_card_recipient_id) && count($gift_card_recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gift_card_recipient_id when calling gETGiftCardRecipientIdAttachments'
            );
        }

        $resourcePath = '/gift_card_recipients/{giftCardRecipientId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($gift_card_recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'giftCardRecipientId' . '}',
                ObjectSerializer::toPathValue($gift_card_recipient_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryModelIdAttachments
     *
     * Retrieve the attachments associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryModelIdAttachments($inventory_model_id)
    {
        $this->gETInventoryModelIdAttachmentsWithHttpInfo($inventory_model_id);
    }

    /**
     * Operation gETInventoryModelIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryModelIdAttachmentsWithHttpInfo($inventory_model_id)
    {
        $request = $this->gETInventoryModelIdAttachmentsRequest($inventory_model_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryModelIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryModelIdAttachmentsAsync($inventory_model_id)
    {
        return $this->gETInventoryModelIdAttachmentsAsyncWithHttpInfo($inventory_model_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryModelIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryModelIdAttachmentsAsyncWithHttpInfo($inventory_model_id)
    {
        $returnType = '';
        $request = $this->gETInventoryModelIdAttachmentsRequest($inventory_model_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryModelIdAttachments'
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryModelIdAttachmentsRequest($inventory_model_id)
    {
        // verify the required parameter 'inventory_model_id' is set
        if ($inventory_model_id === null || (is_array($inventory_model_id) && count($inventory_model_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_model_id when calling gETInventoryModelIdAttachments'
            );
        }

        $resourcePath = '/inventory_models/{inventoryModelId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_model_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryModelId' . '}',
                ObjectSerializer::toPathValue($inventory_model_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryModelIdInventoryReturnLocations
     *
     * Retrieve the inventory return locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryModelIdInventoryReturnLocations($inventory_model_id)
    {
        $this->gETInventoryModelIdInventoryReturnLocationsWithHttpInfo($inventory_model_id);
    }

    /**
     * Operation gETInventoryModelIdInventoryReturnLocationsWithHttpInfo
     *
     * Retrieve the inventory return locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryModelIdInventoryReturnLocationsWithHttpInfo($inventory_model_id)
    {
        $request = $this->gETInventoryModelIdInventoryReturnLocationsRequest($inventory_model_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryModelIdInventoryReturnLocationsAsync
     *
     * Retrieve the inventory return locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryModelIdInventoryReturnLocationsAsync($inventory_model_id)
    {
        return $this->gETInventoryModelIdInventoryReturnLocationsAsyncWithHttpInfo($inventory_model_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryModelIdInventoryReturnLocationsAsyncWithHttpInfo
     *
     * Retrieve the inventory return locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryModelIdInventoryReturnLocationsAsyncWithHttpInfo($inventory_model_id)
    {
        $returnType = '';
        $request = $this->gETInventoryModelIdInventoryReturnLocationsRequest($inventory_model_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryModelIdInventoryReturnLocations'
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryModelIdInventoryReturnLocationsRequest($inventory_model_id)
    {
        // verify the required parameter 'inventory_model_id' is set
        if ($inventory_model_id === null || (is_array($inventory_model_id) && count($inventory_model_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_model_id when calling gETInventoryModelIdInventoryReturnLocations'
            );
        }

        $resourcePath = '/inventory_models/{inventoryModelId}/inventory_return_locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_model_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryModelId' . '}',
                ObjectSerializer::toPathValue($inventory_model_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryModelIdInventoryStockLocations
     *
     * Retrieve the inventory stock locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryModelIdInventoryStockLocations($inventory_model_id)
    {
        $this->gETInventoryModelIdInventoryStockLocationsWithHttpInfo($inventory_model_id);
    }

    /**
     * Operation gETInventoryModelIdInventoryStockLocationsWithHttpInfo
     *
     * Retrieve the inventory stock locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryModelIdInventoryStockLocationsWithHttpInfo($inventory_model_id)
    {
        $request = $this->gETInventoryModelIdInventoryStockLocationsRequest($inventory_model_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryModelIdInventoryStockLocationsAsync
     *
     * Retrieve the inventory stock locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryModelIdInventoryStockLocationsAsync($inventory_model_id)
    {
        return $this->gETInventoryModelIdInventoryStockLocationsAsyncWithHttpInfo($inventory_model_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryModelIdInventoryStockLocationsAsyncWithHttpInfo
     *
     * Retrieve the inventory stock locations associated to the inventory model
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryModelIdInventoryStockLocationsAsyncWithHttpInfo($inventory_model_id)
    {
        $returnType = '';
        $request = $this->gETInventoryModelIdInventoryStockLocationsRequest($inventory_model_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryModelIdInventoryStockLocations'
     *
     * @param  string $inventory_model_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryModelIdInventoryStockLocationsRequest($inventory_model_id)
    {
        // verify the required parameter 'inventory_model_id' is set
        if ($inventory_model_id === null || (is_array($inventory_model_id) && count($inventory_model_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_model_id when calling gETInventoryModelIdInventoryStockLocations'
            );
        }

        $resourcePath = '/inventory_models/{inventoryModelId}/inventory_stock_locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_model_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryModelId' . '}',
                ObjectSerializer::toPathValue($inventory_model_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLineItemIdLineItemOptions
     *
     * Retrieve the line item options associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETLineItemIdLineItemOptions($line_item_id)
    {
        $this->gETLineItemIdLineItemOptionsWithHttpInfo($line_item_id);
    }

    /**
     * Operation gETLineItemIdLineItemOptionsWithHttpInfo
     *
     * Retrieve the line item options associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLineItemIdLineItemOptionsWithHttpInfo($line_item_id)
    {
        $request = $this->gETLineItemIdLineItemOptionsRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETLineItemIdLineItemOptionsAsync
     *
     * Retrieve the line item options associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdLineItemOptionsAsync($line_item_id)
    {
        return $this->gETLineItemIdLineItemOptionsAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLineItemIdLineItemOptionsAsyncWithHttpInfo
     *
     * Retrieve the line item options associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdLineItemOptionsAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '';
        $request = $this->gETLineItemIdLineItemOptionsRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLineItemIdLineItemOptions'
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLineItemIdLineItemOptionsRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling gETLineItemIdLineItemOptions'
            );
        }

        $resourcePath = '/line_items/{lineItemId}/line_item_options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLineItemIdShipmentLineItems
     *
     * Retrieve the shipment line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETLineItemIdShipmentLineItems($line_item_id)
    {
        $this->gETLineItemIdShipmentLineItemsWithHttpInfo($line_item_id);
    }

    /**
     * Operation gETLineItemIdShipmentLineItemsWithHttpInfo
     *
     * Retrieve the shipment line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLineItemIdShipmentLineItemsWithHttpInfo($line_item_id)
    {
        $request = $this->gETLineItemIdShipmentLineItemsRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETLineItemIdShipmentLineItemsAsync
     *
     * Retrieve the shipment line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdShipmentLineItemsAsync($line_item_id)
    {
        return $this->gETLineItemIdShipmentLineItemsAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLineItemIdShipmentLineItemsAsyncWithHttpInfo
     *
     * Retrieve the shipment line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdShipmentLineItemsAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '';
        $request = $this->gETLineItemIdShipmentLineItemsRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLineItemIdShipmentLineItems'
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLineItemIdShipmentLineItemsRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling gETLineItemIdShipmentLineItems'
            );
        }

        $resourcePath = '/line_items/{lineItemId}/shipment_line_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLineItemIdStockLineItems
     *
     * Retrieve the stock line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETLineItemIdStockLineItems($line_item_id)
    {
        $this->gETLineItemIdStockLineItemsWithHttpInfo($line_item_id);
    }

    /**
     * Operation gETLineItemIdStockLineItemsWithHttpInfo
     *
     * Retrieve the stock line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLineItemIdStockLineItemsWithHttpInfo($line_item_id)
    {
        $request = $this->gETLineItemIdStockLineItemsRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETLineItemIdStockLineItemsAsync
     *
     * Retrieve the stock line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdStockLineItemsAsync($line_item_id)
    {
        return $this->gETLineItemIdStockLineItemsAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLineItemIdStockLineItemsAsyncWithHttpInfo
     *
     * Retrieve the stock line items associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdStockLineItemsAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '';
        $request = $this->gETLineItemIdStockLineItemsRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLineItemIdStockLineItems'
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLineItemIdStockLineItemsRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling gETLineItemIdStockLineItems'
            );
        }

        $resourcePath = '/line_items/{lineItemId}/stock_line_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLineItemIdStockTransfers
     *
     * Retrieve the stock transfers associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETLineItemIdStockTransfers($line_item_id)
    {
        $this->gETLineItemIdStockTransfersWithHttpInfo($line_item_id);
    }

    /**
     * Operation gETLineItemIdStockTransfersWithHttpInfo
     *
     * Retrieve the stock transfers associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLineItemIdStockTransfersWithHttpInfo($line_item_id)
    {
        $request = $this->gETLineItemIdStockTransfersRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETLineItemIdStockTransfersAsync
     *
     * Retrieve the stock transfers associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdStockTransfersAsync($line_item_id)
    {
        return $this->gETLineItemIdStockTransfersAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLineItemIdStockTransfersAsyncWithHttpInfo
     *
     * Retrieve the stock transfers associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdStockTransfersAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '';
        $request = $this->gETLineItemIdStockTransfersRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLineItemIdStockTransfers'
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLineItemIdStockTransfersRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling gETLineItemIdStockTransfers'
            );
        }

        $resourcePath = '/line_items/{lineItemId}/stock_transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETManualGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the manual gateway
     *
     * @param  string $manual_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETManualGatewayIdPaymentMethods($manual_gateway_id)
    {
        $this->gETManualGatewayIdPaymentMethodsWithHttpInfo($manual_gateway_id);
    }

    /**
     * Operation gETManualGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the manual gateway
     *
     * @param  string $manual_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETManualGatewayIdPaymentMethodsWithHttpInfo($manual_gateway_id)
    {
        $request = $this->gETManualGatewayIdPaymentMethodsRequest($manual_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETManualGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the manual gateway
     *
     * @param  string $manual_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualGatewayIdPaymentMethodsAsync($manual_gateway_id)
    {
        return $this->gETManualGatewayIdPaymentMethodsAsyncWithHttpInfo($manual_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETManualGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the manual gateway
     *
     * @param  string $manual_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualGatewayIdPaymentMethodsAsyncWithHttpInfo($manual_gateway_id)
    {
        $returnType = '';
        $request = $this->gETManualGatewayIdPaymentMethodsRequest($manual_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETManualGatewayIdPaymentMethods'
     *
     * @param  string $manual_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETManualGatewayIdPaymentMethodsRequest($manual_gateway_id)
    {
        // verify the required parameter 'manual_gateway_id' is set
        if ($manual_gateway_id === null || (is_array($manual_gateway_id) && count($manual_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manual_gateway_id when calling gETManualGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/manual_gateways/{manualGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($manual_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manualGatewayId' . '}',
                ObjectSerializer::toPathValue($manual_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETManualTaxCalculatorIdAttachments
     *
     * Retrieve the attachments associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETManualTaxCalculatorIdAttachments($manual_tax_calculator_id)
    {
        $this->gETManualTaxCalculatorIdAttachmentsWithHttpInfo($manual_tax_calculator_id);
    }

    /**
     * Operation gETManualTaxCalculatorIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETManualTaxCalculatorIdAttachmentsWithHttpInfo($manual_tax_calculator_id)
    {
        $request = $this->gETManualTaxCalculatorIdAttachmentsRequest($manual_tax_calculator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETManualTaxCalculatorIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualTaxCalculatorIdAttachmentsAsync($manual_tax_calculator_id)
    {
        return $this->gETManualTaxCalculatorIdAttachmentsAsyncWithHttpInfo($manual_tax_calculator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETManualTaxCalculatorIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualTaxCalculatorIdAttachmentsAsyncWithHttpInfo($manual_tax_calculator_id)
    {
        $returnType = '';
        $request = $this->gETManualTaxCalculatorIdAttachmentsRequest($manual_tax_calculator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETManualTaxCalculatorIdAttachments'
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETManualTaxCalculatorIdAttachmentsRequest($manual_tax_calculator_id)
    {
        // verify the required parameter 'manual_tax_calculator_id' is set
        if ($manual_tax_calculator_id === null || (is_array($manual_tax_calculator_id) && count($manual_tax_calculator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manual_tax_calculator_id when calling gETManualTaxCalculatorIdAttachments'
            );
        }

        $resourcePath = '/manual_tax_calculators/{manualTaxCalculatorId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($manual_tax_calculator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manualTaxCalculatorId' . '}',
                ObjectSerializer::toPathValue($manual_tax_calculator_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxCategories
     *
     * Retrieve the tax categories associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETManualTaxCalculatorIdTaxCategories($manual_tax_calculator_id)
    {
        $this->gETManualTaxCalculatorIdTaxCategoriesWithHttpInfo($manual_tax_calculator_id);
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxCategoriesWithHttpInfo
     *
     * Retrieve the tax categories associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETManualTaxCalculatorIdTaxCategoriesWithHttpInfo($manual_tax_calculator_id)
    {
        $request = $this->gETManualTaxCalculatorIdTaxCategoriesRequest($manual_tax_calculator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxCategoriesAsync
     *
     * Retrieve the tax categories associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualTaxCalculatorIdTaxCategoriesAsync($manual_tax_calculator_id)
    {
        return $this->gETManualTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo($manual_tax_calculator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo
     *
     * Retrieve the tax categories associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo($manual_tax_calculator_id)
    {
        $returnType = '';
        $request = $this->gETManualTaxCalculatorIdTaxCategoriesRequest($manual_tax_calculator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETManualTaxCalculatorIdTaxCategories'
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETManualTaxCalculatorIdTaxCategoriesRequest($manual_tax_calculator_id)
    {
        // verify the required parameter 'manual_tax_calculator_id' is set
        if ($manual_tax_calculator_id === null || (is_array($manual_tax_calculator_id) && count($manual_tax_calculator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manual_tax_calculator_id when calling gETManualTaxCalculatorIdTaxCategories'
            );
        }

        $resourcePath = '/manual_tax_calculators/{manualTaxCalculatorId}/tax_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($manual_tax_calculator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manualTaxCalculatorId' . '}',
                ObjectSerializer::toPathValue($manual_tax_calculator_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxRules
     *
     * Retrieve the tax rules associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETManualTaxCalculatorIdTaxRules($manual_tax_calculator_id)
    {
        $this->gETManualTaxCalculatorIdTaxRulesWithHttpInfo($manual_tax_calculator_id);
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxRulesWithHttpInfo
     *
     * Retrieve the tax rules associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETManualTaxCalculatorIdTaxRulesWithHttpInfo($manual_tax_calculator_id)
    {
        $request = $this->gETManualTaxCalculatorIdTaxRulesRequest($manual_tax_calculator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxRulesAsync
     *
     * Retrieve the tax rules associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualTaxCalculatorIdTaxRulesAsync($manual_tax_calculator_id)
    {
        return $this->gETManualTaxCalculatorIdTaxRulesAsyncWithHttpInfo($manual_tax_calculator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETManualTaxCalculatorIdTaxRulesAsyncWithHttpInfo
     *
     * Retrieve the tax rules associated to the manual tax calculator
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETManualTaxCalculatorIdTaxRulesAsyncWithHttpInfo($manual_tax_calculator_id)
    {
        $returnType = '';
        $request = $this->gETManualTaxCalculatorIdTaxRulesRequest($manual_tax_calculator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETManualTaxCalculatorIdTaxRules'
     *
     * @param  string $manual_tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETManualTaxCalculatorIdTaxRulesRequest($manual_tax_calculator_id)
    {
        // verify the required parameter 'manual_tax_calculator_id' is set
        if ($manual_tax_calculator_id === null || (is_array($manual_tax_calculator_id) && count($manual_tax_calculator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manual_tax_calculator_id when calling gETManualTaxCalculatorIdTaxRules'
            );
        }

        $resourcePath = '/manual_tax_calculators/{manualTaxCalculatorId}/tax_rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($manual_tax_calculator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manualTaxCalculatorId' . '}',
                ObjectSerializer::toPathValue($manual_tax_calculator_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETMarketIdAttachments
     *
     * Retrieve the attachments associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETMarketIdAttachments($market_id)
    {
        $this->gETMarketIdAttachmentsWithHttpInfo($market_id);
    }

    /**
     * Operation gETMarketIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETMarketIdAttachmentsWithHttpInfo($market_id)
    {
        $request = $this->gETMarketIdAttachmentsRequest($market_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETMarketIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdAttachmentsAsync($market_id)
    {
        return $this->gETMarketIdAttachmentsAsyncWithHttpInfo($market_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETMarketIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdAttachmentsAsyncWithHttpInfo($market_id)
    {
        $returnType = '';
        $request = $this->gETMarketIdAttachmentsRequest($market_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETMarketIdAttachments'
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETMarketIdAttachmentsRequest($market_id)
    {
        // verify the required parameter 'market_id' is set
        if ($market_id === null || (is_array($market_id) && count($market_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $market_id when calling gETMarketIdAttachments'
            );
        }

        $resourcePath = '/markets/{marketId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($market_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketId' . '}',
                ObjectSerializer::toPathValue($market_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETMerchantIdAttachments
     *
     * Retrieve the attachments associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETMerchantIdAttachments($merchant_id)
    {
        $this->gETMerchantIdAttachmentsWithHttpInfo($merchant_id);
    }

    /**
     * Operation gETMerchantIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETMerchantIdAttachmentsWithHttpInfo($merchant_id)
    {
        $request = $this->gETMerchantIdAttachmentsRequest($merchant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETMerchantIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMerchantIdAttachmentsAsync($merchant_id)
    {
        return $this->gETMerchantIdAttachmentsAsyncWithHttpInfo($merchant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETMerchantIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMerchantIdAttachmentsAsyncWithHttpInfo($merchant_id)
    {
        $returnType = '';
        $request = $this->gETMerchantIdAttachmentsRequest($merchant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETMerchantIdAttachments'
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETMerchantIdAttachmentsRequest($merchant_id)
    {
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling gETMerchantIdAttachments'
            );
        }

        $resourcePath = '/merchants/{merchantId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdAttachments
     *
     * Retrieve the attachments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdAttachments($order_id)
    {
        $this->gETOrderIdAttachmentsWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdAttachmentsWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdAttachmentsRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAttachmentsAsync($order_id)
    {
        return $this->gETOrderIdAttachmentsAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAttachmentsAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdAttachmentsRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdAttachments'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdAttachmentsRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdAttachments'
            );
        }

        $resourcePath = '/orders/{orderId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdAuthorizations
     *
     * Retrieve the authorizations associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdAuthorizations($order_id)
    {
        $this->gETOrderIdAuthorizationsWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdAuthorizationsWithHttpInfo
     *
     * Retrieve the authorizations associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdAuthorizationsWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdAuthorizationsRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdAuthorizationsAsync
     *
     * Retrieve the authorizations associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAuthorizationsAsync($order_id)
    {
        return $this->gETOrderIdAuthorizationsAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdAuthorizationsAsyncWithHttpInfo
     *
     * Retrieve the authorizations associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAuthorizationsAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdAuthorizationsRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdAuthorizations'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdAuthorizationsRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdAuthorizations'
            );
        }

        $resourcePath = '/orders/{orderId}/authorizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdAvailableCustomerPaymentSources
     *
     * Retrieve the available customer payment sources associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdAvailableCustomerPaymentSources($order_id)
    {
        $this->gETOrderIdAvailableCustomerPaymentSourcesWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdAvailableCustomerPaymentSourcesWithHttpInfo
     *
     * Retrieve the available customer payment sources associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdAvailableCustomerPaymentSourcesWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdAvailableCustomerPaymentSourcesRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdAvailableCustomerPaymentSourcesAsync
     *
     * Retrieve the available customer payment sources associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAvailableCustomerPaymentSourcesAsync($order_id)
    {
        return $this->gETOrderIdAvailableCustomerPaymentSourcesAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdAvailableCustomerPaymentSourcesAsyncWithHttpInfo
     *
     * Retrieve the available customer payment sources associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAvailableCustomerPaymentSourcesAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdAvailableCustomerPaymentSourcesRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdAvailableCustomerPaymentSources'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdAvailableCustomerPaymentSourcesRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdAvailableCustomerPaymentSources'
            );
        }

        $resourcePath = '/orders/{orderId}/available_customer_payment_sources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdAvailablePaymentMethods
     *
     * Retrieve the available payment methods associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdAvailablePaymentMethods($order_id)
    {
        $this->gETOrderIdAvailablePaymentMethodsWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdAvailablePaymentMethodsWithHttpInfo
     *
     * Retrieve the available payment methods associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdAvailablePaymentMethodsWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdAvailablePaymentMethodsRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdAvailablePaymentMethodsAsync
     *
     * Retrieve the available payment methods associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAvailablePaymentMethodsAsync($order_id)
    {
        return $this->gETOrderIdAvailablePaymentMethodsAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdAvailablePaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the available payment methods associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdAvailablePaymentMethodsAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdAvailablePaymentMethodsRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdAvailablePaymentMethods'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdAvailablePaymentMethodsRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdAvailablePaymentMethods'
            );
        }

        $resourcePath = '/orders/{orderId}/available_payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdCaptures
     *
     * Retrieve the captures associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdCaptures($order_id)
    {
        $this->gETOrderIdCapturesWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdCapturesWithHttpInfo
     *
     * Retrieve the captures associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdCapturesWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdCapturesRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdCapturesAsync
     *
     * Retrieve the captures associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdCapturesAsync($order_id)
    {
        return $this->gETOrderIdCapturesAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdCapturesAsyncWithHttpInfo
     *
     * Retrieve the captures associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdCapturesAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdCapturesRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdCaptures'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdCapturesRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdCaptures'
            );
        }

        $resourcePath = '/orders/{orderId}/captures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdLineItems
     *
     * Retrieve the line items associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdLineItems($order_id)
    {
        $this->gETOrderIdLineItemsWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdLineItemsWithHttpInfo
     *
     * Retrieve the line items associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdLineItemsWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdLineItemsRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdLineItemsAsync
     *
     * Retrieve the line items associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdLineItemsAsync($order_id)
    {
        return $this->gETOrderIdLineItemsAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdLineItemsAsyncWithHttpInfo
     *
     * Retrieve the line items associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdLineItemsAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdLineItemsRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdLineItems'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdLineItemsRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdLineItems'
            );
        }

        $resourcePath = '/orders/{orderId}/line_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdRefunds
     *
     * Retrieve the refunds associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdRefunds($order_id)
    {
        $this->gETOrderIdRefundsWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdRefundsWithHttpInfo
     *
     * Retrieve the refunds associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdRefundsWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdRefundsRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdRefundsAsync
     *
     * Retrieve the refunds associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdRefundsAsync($order_id)
    {
        return $this->gETOrderIdRefundsAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdRefundsAsyncWithHttpInfo
     *
     * Retrieve the refunds associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdRefundsAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdRefundsRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdRefunds'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdRefundsRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdRefunds'
            );
        }

        $resourcePath = '/orders/{orderId}/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdShipments
     *
     * Retrieve the shipments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdShipments($order_id)
    {
        $this->gETOrderIdShipmentsWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdShipmentsWithHttpInfo
     *
     * Retrieve the shipments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdShipmentsWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdShipmentsRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdShipmentsAsync
     *
     * Retrieve the shipments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdShipmentsAsync($order_id)
    {
        return $this->gETOrderIdShipmentsAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdShipmentsAsyncWithHttpInfo
     *
     * Retrieve the shipments associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdShipmentsAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdShipmentsRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdShipments'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdShipmentsRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdShipments'
            );
        }

        $resourcePath = '/orders/{orderId}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdVoids
     *
     * Retrieve the voids associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdVoids($order_id)
    {
        $this->gETOrderIdVoidsWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdVoidsWithHttpInfo
     *
     * Retrieve the voids associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdVoidsWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdVoidsRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdVoidsAsync
     *
     * Retrieve the voids associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdVoidsAsync($order_id)
    {
        return $this->gETOrderIdVoidsAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdVoidsAsyncWithHttpInfo
     *
     * Retrieve the voids associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdVoidsAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdVoidsRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdVoids'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdVoidsRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdVoids'
            );
        }

        $resourcePath = '/orders/{orderId}/voids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPackageIdAttachments
     *
     * Retrieve the attachments associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPackageIdAttachments($package_id)
    {
        $this->gETPackageIdAttachmentsWithHttpInfo($package_id);
    }

    /**
     * Operation gETPackageIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPackageIdAttachmentsWithHttpInfo($package_id)
    {
        $request = $this->gETPackageIdAttachmentsRequest($package_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPackageIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPackageIdAttachmentsAsync($package_id)
    {
        return $this->gETPackageIdAttachmentsAsyncWithHttpInfo($package_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPackageIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPackageIdAttachmentsAsyncWithHttpInfo($package_id)
    {
        $returnType = '';
        $request = $this->gETPackageIdAttachmentsRequest($package_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPackageIdAttachments'
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPackageIdAttachmentsRequest($package_id)
    {
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $package_id when calling gETPackageIdAttachments'
            );
        }

        $resourcePath = '/packages/{packageId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPackageIdParcels
     *
     * Retrieve the parcels associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPackageIdParcels($package_id)
    {
        $this->gETPackageIdParcelsWithHttpInfo($package_id);
    }

    /**
     * Operation gETPackageIdParcelsWithHttpInfo
     *
     * Retrieve the parcels associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPackageIdParcelsWithHttpInfo($package_id)
    {
        $request = $this->gETPackageIdParcelsRequest($package_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPackageIdParcelsAsync
     *
     * Retrieve the parcels associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPackageIdParcelsAsync($package_id)
    {
        return $this->gETPackageIdParcelsAsyncWithHttpInfo($package_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPackageIdParcelsAsyncWithHttpInfo
     *
     * Retrieve the parcels associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPackageIdParcelsAsyncWithHttpInfo($package_id)
    {
        $returnType = '';
        $request = $this->gETPackageIdParcelsRequest($package_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPackageIdParcels'
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPackageIdParcelsRequest($package_id)
    {
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $package_id when calling gETPackageIdParcels'
            );
        }

        $resourcePath = '/packages/{packageId}/parcels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETParcelIdAttachments
     *
     * Retrieve the attachments associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETParcelIdAttachments($parcel_id)
    {
        $this->gETParcelIdAttachmentsWithHttpInfo($parcel_id);
    }

    /**
     * Operation gETParcelIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETParcelIdAttachmentsWithHttpInfo($parcel_id)
    {
        $request = $this->gETParcelIdAttachmentsRequest($parcel_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETParcelIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdAttachmentsAsync($parcel_id)
    {
        return $this->gETParcelIdAttachmentsAsyncWithHttpInfo($parcel_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETParcelIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdAttachmentsAsyncWithHttpInfo($parcel_id)
    {
        $returnType = '';
        $request = $this->gETParcelIdAttachmentsRequest($parcel_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETParcelIdAttachments'
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETParcelIdAttachmentsRequest($parcel_id)
    {
        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling gETParcelIdAttachments'
            );
        }

        $resourcePath = '/parcels/{parcelId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETParcelIdParcelLineItems
     *
     * Retrieve the parcel line items associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETParcelIdParcelLineItems($parcel_id)
    {
        $this->gETParcelIdParcelLineItemsWithHttpInfo($parcel_id);
    }

    /**
     * Operation gETParcelIdParcelLineItemsWithHttpInfo
     *
     * Retrieve the parcel line items associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETParcelIdParcelLineItemsWithHttpInfo($parcel_id)
    {
        $request = $this->gETParcelIdParcelLineItemsRequest($parcel_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETParcelIdParcelLineItemsAsync
     *
     * Retrieve the parcel line items associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdParcelLineItemsAsync($parcel_id)
    {
        return $this->gETParcelIdParcelLineItemsAsyncWithHttpInfo($parcel_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETParcelIdParcelLineItemsAsyncWithHttpInfo
     *
     * Retrieve the parcel line items associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdParcelLineItemsAsyncWithHttpInfo($parcel_id)
    {
        $returnType = '';
        $request = $this->gETParcelIdParcelLineItemsRequest($parcel_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETParcelIdParcelLineItems'
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETParcelIdParcelLineItemsRequest($parcel_id)
    {
        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling gETParcelIdParcelLineItems'
            );
        }

        $resourcePath = '/parcels/{parcelId}/parcel_line_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaymentGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the payment gateway
     *
     * @param  string $payment_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaymentGatewayIdPaymentMethods($payment_gateway_id)
    {
        $this->gETPaymentGatewayIdPaymentMethodsWithHttpInfo($payment_gateway_id);
    }

    /**
     * Operation gETPaymentGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the payment gateway
     *
     * @param  string $payment_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaymentGatewayIdPaymentMethodsWithHttpInfo($payment_gateway_id)
    {
        $request = $this->gETPaymentGatewayIdPaymentMethodsRequest($payment_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaymentGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the payment gateway
     *
     * @param  string $payment_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentGatewayIdPaymentMethodsAsync($payment_gateway_id)
    {
        return $this->gETPaymentGatewayIdPaymentMethodsAsyncWithHttpInfo($payment_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaymentGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the payment gateway
     *
     * @param  string $payment_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentGatewayIdPaymentMethodsAsyncWithHttpInfo($payment_gateway_id)
    {
        $returnType = '';
        $request = $this->gETPaymentGatewayIdPaymentMethodsRequest($payment_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaymentGatewayIdPaymentMethods'
     *
     * @param  string $payment_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaymentGatewayIdPaymentMethodsRequest($payment_gateway_id)
    {
        // verify the required parameter 'payment_gateway_id' is set
        if ($payment_gateway_id === null || (is_array($payment_gateway_id) && count($payment_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_gateway_id when calling gETPaymentGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/payment_gateways/{paymentGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentGatewayId' . '}',
                ObjectSerializer::toPathValue($payment_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaymentMethodIdAttachments
     *
     * Retrieve the attachments associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaymentMethodIdAttachments($payment_method_id)
    {
        $this->gETPaymentMethodIdAttachmentsWithHttpInfo($payment_method_id);
    }

    /**
     * Operation gETPaymentMethodIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaymentMethodIdAttachmentsWithHttpInfo($payment_method_id)
    {
        $request = $this->gETPaymentMethodIdAttachmentsRequest($payment_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaymentMethodIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentMethodIdAttachmentsAsync($payment_method_id)
    {
        return $this->gETPaymentMethodIdAttachmentsAsyncWithHttpInfo($payment_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaymentMethodIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentMethodIdAttachmentsAsyncWithHttpInfo($payment_method_id)
    {
        $returnType = '';
        $request = $this->gETPaymentMethodIdAttachmentsRequest($payment_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaymentMethodIdAttachments'
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaymentMethodIdAttachmentsRequest($payment_method_id)
    {
        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling gETPaymentMethodIdAttachments'
            );
        }

        $resourcePath = '/payment_methods/{paymentMethodId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaypalGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaypalGatewayIdPaymentMethods($paypal_gateway_id)
    {
        $this->gETPaypalGatewayIdPaymentMethodsWithHttpInfo($paypal_gateway_id);
    }

    /**
     * Operation gETPaypalGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaypalGatewayIdPaymentMethodsWithHttpInfo($paypal_gateway_id)
    {
        $request = $this->gETPaypalGatewayIdPaymentMethodsRequest($paypal_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaypalGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalGatewayIdPaymentMethodsAsync($paypal_gateway_id)
    {
        return $this->gETPaypalGatewayIdPaymentMethodsAsyncWithHttpInfo($paypal_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaypalGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalGatewayIdPaymentMethodsAsyncWithHttpInfo($paypal_gateway_id)
    {
        $returnType = '';
        $request = $this->gETPaypalGatewayIdPaymentMethodsRequest($paypal_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaypalGatewayIdPaymentMethods'
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaypalGatewayIdPaymentMethodsRequest($paypal_gateway_id)
    {
        // verify the required parameter 'paypal_gateway_id' is set
        if ($paypal_gateway_id === null || (is_array($paypal_gateway_id) && count($paypal_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paypal_gateway_id when calling gETPaypalGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/paypal_gateways/{paypalGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($paypal_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paypalGatewayId' . '}',
                ObjectSerializer::toPathValue($paypal_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaypalGatewayIdPaypalPayments
     *
     * Retrieve the paypal payments associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaypalGatewayIdPaypalPayments($paypal_gateway_id)
    {
        $this->gETPaypalGatewayIdPaypalPaymentsWithHttpInfo($paypal_gateway_id);
    }

    /**
     * Operation gETPaypalGatewayIdPaypalPaymentsWithHttpInfo
     *
     * Retrieve the paypal payments associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaypalGatewayIdPaypalPaymentsWithHttpInfo($paypal_gateway_id)
    {
        $request = $this->gETPaypalGatewayIdPaypalPaymentsRequest($paypal_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaypalGatewayIdPaypalPaymentsAsync
     *
     * Retrieve the paypal payments associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalGatewayIdPaypalPaymentsAsync($paypal_gateway_id)
    {
        return $this->gETPaypalGatewayIdPaypalPaymentsAsyncWithHttpInfo($paypal_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaypalGatewayIdPaypalPaymentsAsyncWithHttpInfo
     *
     * Retrieve the paypal payments associated to the paypal gateway
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalGatewayIdPaypalPaymentsAsyncWithHttpInfo($paypal_gateway_id)
    {
        $returnType = '';
        $request = $this->gETPaypalGatewayIdPaypalPaymentsRequest($paypal_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaypalGatewayIdPaypalPayments'
     *
     * @param  string $paypal_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaypalGatewayIdPaypalPaymentsRequest($paypal_gateway_id)
    {
        // verify the required parameter 'paypal_gateway_id' is set
        if ($paypal_gateway_id === null || (is_array($paypal_gateway_id) && count($paypal_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paypal_gateway_id when calling gETPaypalGatewayIdPaypalPayments'
            );
        }

        $resourcePath = '/paypal_gateways/{paypalGatewayId}/paypal_payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($paypal_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paypalGatewayId' . '}',
                ObjectSerializer::toPathValue($paypal_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdAttachments
     *
     * Retrieve the attachments associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPercentageDiscountPromotionIdAttachments($percentage_discount_promotion_id)
    {
        $this->gETPercentageDiscountPromotionIdAttachmentsWithHttpInfo($percentage_discount_promotion_id);
    }

    /**
     * Operation gETPercentageDiscountPromotionIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPercentageDiscountPromotionIdAttachmentsWithHttpInfo($percentage_discount_promotion_id)
    {
        $request = $this->gETPercentageDiscountPromotionIdAttachmentsRequest($percentage_discount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPercentageDiscountPromotionIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdAttachmentsAsync($percentage_discount_promotion_id)
    {
        return $this->gETPercentageDiscountPromotionIdAttachmentsAsyncWithHttpInfo($percentage_discount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdAttachmentsAsyncWithHttpInfo($percentage_discount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETPercentageDiscountPromotionIdAttachmentsRequest($percentage_discount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPercentageDiscountPromotionIdAttachments'
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPercentageDiscountPromotionIdAttachmentsRequest($percentage_discount_promotion_id)
    {
        // verify the required parameter 'percentage_discount_promotion_id' is set
        if ($percentage_discount_promotion_id === null || (is_array($percentage_discount_promotion_id) && count($percentage_discount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $percentage_discount_promotion_id when calling gETPercentageDiscountPromotionIdAttachments'
            );
        }

        $resourcePath = '/percentage_discount_promotions/{percentageDiscountPromotionId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($percentage_discount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'percentageDiscountPromotionId' . '}',
                ObjectSerializer::toPathValue($percentage_discount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkus
     *
     * Retrieve the skus associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPercentageDiscountPromotionIdSkus($percentage_discount_promotion_id)
    {
        $this->gETPercentageDiscountPromotionIdSkusWithHttpInfo($percentage_discount_promotion_id);
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkusWithHttpInfo
     *
     * Retrieve the skus associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPercentageDiscountPromotionIdSkusWithHttpInfo($percentage_discount_promotion_id)
    {
        $request = $this->gETPercentageDiscountPromotionIdSkusRequest($percentage_discount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkusAsync
     *
     * Retrieve the skus associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdSkusAsync($percentage_discount_promotion_id)
    {
        return $this->gETPercentageDiscountPromotionIdSkusAsyncWithHttpInfo($percentage_discount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkusAsyncWithHttpInfo
     *
     * Retrieve the skus associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdSkusAsyncWithHttpInfo($percentage_discount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETPercentageDiscountPromotionIdSkusRequest($percentage_discount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPercentageDiscountPromotionIdSkus'
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPercentageDiscountPromotionIdSkusRequest($percentage_discount_promotion_id)
    {
        // verify the required parameter 'percentage_discount_promotion_id' is set
        if ($percentage_discount_promotion_id === null || (is_array($percentage_discount_promotion_id) && count($percentage_discount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $percentage_discount_promotion_id when calling gETPercentageDiscountPromotionIdSkus'
            );
        }

        $resourcePath = '/percentage_discount_promotions/{percentageDiscountPromotionId}/skus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($percentage_discount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'percentageDiscountPromotionId' . '}',
                ObjectSerializer::toPathValue($percentage_discount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPriceIdAttachments
     *
     * Retrieve the attachments associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPriceIdAttachments($price_id)
    {
        $this->gETPriceIdAttachmentsWithHttpInfo($price_id);
    }

    /**
     * Operation gETPriceIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPriceIdAttachmentsWithHttpInfo($price_id)
    {
        $request = $this->gETPriceIdAttachmentsRequest($price_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPriceIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceIdAttachmentsAsync($price_id)
    {
        return $this->gETPriceIdAttachmentsAsyncWithHttpInfo($price_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPriceIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceIdAttachmentsAsyncWithHttpInfo($price_id)
    {
        $returnType = '';
        $request = $this->gETPriceIdAttachmentsRequest($price_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPriceIdAttachments'
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPriceIdAttachmentsRequest($price_id)
    {
        // verify the required parameter 'price_id' is set
        if ($price_id === null || (is_array($price_id) && count($price_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_id when calling gETPriceIdAttachments'
            );
        }

        $resourcePath = '/prices/{priceId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($price_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPriceListIdAttachments
     *
     * Retrieve the attachments associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPriceListIdAttachments($price_list_id)
    {
        $this->gETPriceListIdAttachmentsWithHttpInfo($price_list_id);
    }

    /**
     * Operation gETPriceListIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPriceListIdAttachmentsWithHttpInfo($price_list_id)
    {
        $request = $this->gETPriceListIdAttachmentsRequest($price_list_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPriceListIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceListIdAttachmentsAsync($price_list_id)
    {
        return $this->gETPriceListIdAttachmentsAsyncWithHttpInfo($price_list_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPriceListIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceListIdAttachmentsAsyncWithHttpInfo($price_list_id)
    {
        $returnType = '';
        $request = $this->gETPriceListIdAttachmentsRequest($price_list_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPriceListIdAttachments'
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPriceListIdAttachmentsRequest($price_list_id)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null || (is_array($price_list_id) && count($price_list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list_id when calling gETPriceListIdAttachments'
            );
        }

        $resourcePath = '/price_lists/{priceListId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceListId' . '}',
                ObjectSerializer::toPathValue($price_list_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPriceListIdPrices
     *
     * Retrieve the prices associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPriceListIdPrices($price_list_id)
    {
        $this->gETPriceListIdPricesWithHttpInfo($price_list_id);
    }

    /**
     * Operation gETPriceListIdPricesWithHttpInfo
     *
     * Retrieve the prices associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPriceListIdPricesWithHttpInfo($price_list_id)
    {
        $request = $this->gETPriceListIdPricesRequest($price_list_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPriceListIdPricesAsync
     *
     * Retrieve the prices associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceListIdPricesAsync($price_list_id)
    {
        return $this->gETPriceListIdPricesAsyncWithHttpInfo($price_list_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPriceListIdPricesAsyncWithHttpInfo
     *
     * Retrieve the prices associated to the price list
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceListIdPricesAsyncWithHttpInfo($price_list_id)
    {
        $returnType = '';
        $request = $this->gETPriceListIdPricesRequest($price_list_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPriceListIdPrices'
     *
     * @param  string $price_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPriceListIdPricesRequest($price_list_id)
    {
        // verify the required parameter 'price_list_id' is set
        if ($price_list_id === null || (is_array($price_list_id) && count($price_list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_list_id when calling gETPriceListIdPrices'
            );
        }

        $resourcePath = '/price_lists/{priceListId}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceListId' . '}',
                ObjectSerializer::toPathValue($price_list_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPromotionIdAttachments
     *
     * Retrieve the attachments associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPromotionIdAttachments($promotion_id)
    {
        $this->gETPromotionIdAttachmentsWithHttpInfo($promotion_id);
    }

    /**
     * Operation gETPromotionIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPromotionIdAttachmentsWithHttpInfo($promotion_id)
    {
        $request = $this->gETPromotionIdAttachmentsRequest($promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPromotionIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdAttachmentsAsync($promotion_id)
    {
        return $this->gETPromotionIdAttachmentsAsyncWithHttpInfo($promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPromotionIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdAttachmentsAsyncWithHttpInfo($promotion_id)
    {
        $returnType = '';
        $request = $this->gETPromotionIdAttachmentsRequest($promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPromotionIdAttachments'
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPromotionIdAttachmentsRequest($promotion_id)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling gETPromotionIdAttachments'
            );
        }

        $resourcePath = '/promotions/{promotionId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnIdAttachments
     *
     * Retrieve the attachments associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnIdAttachments($return_id)
    {
        $this->gETReturnIdAttachmentsWithHttpInfo($return_id);
    }

    /**
     * Operation gETReturnIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnIdAttachmentsWithHttpInfo($return_id)
    {
        $request = $this->gETReturnIdAttachmentsRequest($return_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdAttachmentsAsync($return_id)
    {
        return $this->gETReturnIdAttachmentsAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdAttachmentsAsyncWithHttpInfo($return_id)
    {
        $returnType = '';
        $request = $this->gETReturnIdAttachmentsRequest($return_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnIdAttachments'
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnIdAttachmentsRequest($return_id)
    {
        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling gETReturnIdAttachments'
            );
        }

        $resourcePath = '/returns/{returnId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnId' . '}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnIdReturnLineItems
     *
     * Retrieve the return line items associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnIdReturnLineItems($return_id)
    {
        $this->gETReturnIdReturnLineItemsWithHttpInfo($return_id);
    }

    /**
     * Operation gETReturnIdReturnLineItemsWithHttpInfo
     *
     * Retrieve the return line items associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnIdReturnLineItemsWithHttpInfo($return_id)
    {
        $request = $this->gETReturnIdReturnLineItemsRequest($return_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnIdReturnLineItemsAsync
     *
     * Retrieve the return line items associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdReturnLineItemsAsync($return_id)
    {
        return $this->gETReturnIdReturnLineItemsAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnIdReturnLineItemsAsyncWithHttpInfo
     *
     * Retrieve the return line items associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdReturnLineItemsAsyncWithHttpInfo($return_id)
    {
        $returnType = '';
        $request = $this->gETReturnIdReturnLineItemsRequest($return_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnIdReturnLineItems'
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnIdReturnLineItemsRequest($return_id)
    {
        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling gETReturnIdReturnLineItems'
            );
        }

        $resourcePath = '/returns/{returnId}/return_line_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnId' . '}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdAttachments
     *
     * Retrieve the attachments associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdAttachments($shipment_id)
    {
        $this->gETShipmentIdAttachmentsWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdAttachmentsWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdAttachmentsRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdAttachmentsAsync($shipment_id)
    {
        return $this->gETShipmentIdAttachmentsAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdAttachmentsAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdAttachmentsRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdAttachments'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdAttachmentsRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdAttachments'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdAvailableShippingMethods
     *
     * Retrieve the available shipping methods associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdAvailableShippingMethods($shipment_id)
    {
        $this->gETShipmentIdAvailableShippingMethodsWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdAvailableShippingMethodsWithHttpInfo
     *
     * Retrieve the available shipping methods associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdAvailableShippingMethodsWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdAvailableShippingMethodsRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdAvailableShippingMethodsAsync
     *
     * Retrieve the available shipping methods associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdAvailableShippingMethodsAsync($shipment_id)
    {
        return $this->gETShipmentIdAvailableShippingMethodsAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdAvailableShippingMethodsAsyncWithHttpInfo
     *
     * Retrieve the available shipping methods associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdAvailableShippingMethodsAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdAvailableShippingMethodsRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdAvailableShippingMethods'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdAvailableShippingMethodsRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdAvailableShippingMethods'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/available_shipping_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdCarrierAccounts
     *
     * Retrieve the carrier accounts associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdCarrierAccounts($shipment_id)
    {
        $this->gETShipmentIdCarrierAccountsWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdCarrierAccountsWithHttpInfo
     *
     * Retrieve the carrier accounts associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdCarrierAccountsWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdCarrierAccountsRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdCarrierAccountsAsync
     *
     * Retrieve the carrier accounts associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdCarrierAccountsAsync($shipment_id)
    {
        return $this->gETShipmentIdCarrierAccountsAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdCarrierAccountsAsyncWithHttpInfo
     *
     * Retrieve the carrier accounts associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdCarrierAccountsAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdCarrierAccountsRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdCarrierAccounts'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdCarrierAccountsRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdCarrierAccounts'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/carrier_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdParcels
     *
     * Retrieve the parcels associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdParcels($shipment_id)
    {
        $this->gETShipmentIdParcelsWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdParcelsWithHttpInfo
     *
     * Retrieve the parcels associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdParcelsWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdParcelsRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdParcelsAsync
     *
     * Retrieve the parcels associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdParcelsAsync($shipment_id)
    {
        return $this->gETShipmentIdParcelsAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdParcelsAsyncWithHttpInfo
     *
     * Retrieve the parcels associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdParcelsAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdParcelsRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdParcels'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdParcelsRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdParcels'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/parcels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdShipmentLineItems
     *
     * Retrieve the shipment line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdShipmentLineItems($shipment_id)
    {
        $this->gETShipmentIdShipmentLineItemsWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdShipmentLineItemsWithHttpInfo
     *
     * Retrieve the shipment line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdShipmentLineItemsWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdShipmentLineItemsRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdShipmentLineItemsAsync
     *
     * Retrieve the shipment line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShipmentLineItemsAsync($shipment_id)
    {
        return $this->gETShipmentIdShipmentLineItemsAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdShipmentLineItemsAsyncWithHttpInfo
     *
     * Retrieve the shipment line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShipmentLineItemsAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdShipmentLineItemsRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdShipmentLineItems'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdShipmentLineItemsRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdShipmentLineItems'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/shipment_line_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdStockLineItems
     *
     * Retrieve the stock line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdStockLineItems($shipment_id)
    {
        $this->gETShipmentIdStockLineItemsWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdStockLineItemsWithHttpInfo
     *
     * Retrieve the stock line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdStockLineItemsWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdStockLineItemsRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdStockLineItemsAsync
     *
     * Retrieve the stock line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdStockLineItemsAsync($shipment_id)
    {
        return $this->gETShipmentIdStockLineItemsAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdStockLineItemsAsyncWithHttpInfo
     *
     * Retrieve the stock line items associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdStockLineItemsAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdStockLineItemsRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdStockLineItems'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdStockLineItemsRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdStockLineItems'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/stock_line_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdStockTransfers
     *
     * Retrieve the stock transfers associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdStockTransfers($shipment_id)
    {
        $this->gETShipmentIdStockTransfersWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdStockTransfersWithHttpInfo
     *
     * Retrieve the stock transfers associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdStockTransfersWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdStockTransfersRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdStockTransfersAsync
     *
     * Retrieve the stock transfers associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdStockTransfersAsync($shipment_id)
    {
        return $this->gETShipmentIdStockTransfersAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdStockTransfersAsyncWithHttpInfo
     *
     * Retrieve the stock transfers associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdStockTransfersAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdStockTransfersRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdStockTransfers'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdStockTransfersRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdStockTransfers'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/stock_transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingCategoryIdAttachments
     *
     * Retrieve the attachments associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingCategoryIdAttachments($shipping_category_id)
    {
        $this->gETShippingCategoryIdAttachmentsWithHttpInfo($shipping_category_id);
    }

    /**
     * Operation gETShippingCategoryIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingCategoryIdAttachmentsWithHttpInfo($shipping_category_id)
    {
        $request = $this->gETShippingCategoryIdAttachmentsRequest($shipping_category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingCategoryIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingCategoryIdAttachmentsAsync($shipping_category_id)
    {
        return $this->gETShippingCategoryIdAttachmentsAsyncWithHttpInfo($shipping_category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingCategoryIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingCategoryIdAttachmentsAsyncWithHttpInfo($shipping_category_id)
    {
        $returnType = '';
        $request = $this->gETShippingCategoryIdAttachmentsRequest($shipping_category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingCategoryIdAttachments'
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingCategoryIdAttachmentsRequest($shipping_category_id)
    {
        // verify the required parameter 'shipping_category_id' is set
        if ($shipping_category_id === null || (is_array($shipping_category_id) && count($shipping_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_category_id when calling gETShippingCategoryIdAttachments'
            );
        }

        $resourcePath = '/shipping_categories/{shippingCategoryId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingCategoryId' . '}',
                ObjectSerializer::toPathValue($shipping_category_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingCategoryIdSkus
     *
     * Retrieve the skus associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingCategoryIdSkus($shipping_category_id)
    {
        $this->gETShippingCategoryIdSkusWithHttpInfo($shipping_category_id);
    }

    /**
     * Operation gETShippingCategoryIdSkusWithHttpInfo
     *
     * Retrieve the skus associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingCategoryIdSkusWithHttpInfo($shipping_category_id)
    {
        $request = $this->gETShippingCategoryIdSkusRequest($shipping_category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingCategoryIdSkusAsync
     *
     * Retrieve the skus associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingCategoryIdSkusAsync($shipping_category_id)
    {
        return $this->gETShippingCategoryIdSkusAsyncWithHttpInfo($shipping_category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingCategoryIdSkusAsyncWithHttpInfo
     *
     * Retrieve the skus associated to the shipping category
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingCategoryIdSkusAsyncWithHttpInfo($shipping_category_id)
    {
        $returnType = '';
        $request = $this->gETShippingCategoryIdSkusRequest($shipping_category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingCategoryIdSkus'
     *
     * @param  string $shipping_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingCategoryIdSkusRequest($shipping_category_id)
    {
        // verify the required parameter 'shipping_category_id' is set
        if ($shipping_category_id === null || (is_array($shipping_category_id) && count($shipping_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_category_id when calling gETShippingCategoryIdSkus'
            );
        }

        $resourcePath = '/shipping_categories/{shippingCategoryId}/skus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingCategoryId' . '}',
                ObjectSerializer::toPathValue($shipping_category_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingMethodIdAttachments
     *
     * Retrieve the attachments associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingMethodIdAttachments($shipping_method_id)
    {
        $this->gETShippingMethodIdAttachmentsWithHttpInfo($shipping_method_id);
    }

    /**
     * Operation gETShippingMethodIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingMethodIdAttachmentsWithHttpInfo($shipping_method_id)
    {
        $request = $this->gETShippingMethodIdAttachmentsRequest($shipping_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingMethodIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdAttachmentsAsync($shipping_method_id)
    {
        return $this->gETShippingMethodIdAttachmentsAsyncWithHttpInfo($shipping_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingMethodIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdAttachmentsAsyncWithHttpInfo($shipping_method_id)
    {
        $returnType = '';
        $request = $this->gETShippingMethodIdAttachmentsRequest($shipping_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingMethodIdAttachments'
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingMethodIdAttachmentsRequest($shipping_method_id)
    {
        // verify the required parameter 'shipping_method_id' is set
        if ($shipping_method_id === null || (is_array($shipping_method_id) && count($shipping_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_method_id when calling gETShippingMethodIdAttachments'
            );
        }

        $resourcePath = '/shipping_methods/{shippingMethodId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingMethodId' . '}',
                ObjectSerializer::toPathValue($shipping_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingZoneIdAttachments
     *
     * Retrieve the attachments associated to the shipping zone
     *
     * @param  string $shipping_zone_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingZoneIdAttachments($shipping_zone_id)
    {
        $this->gETShippingZoneIdAttachmentsWithHttpInfo($shipping_zone_id);
    }

    /**
     * Operation gETShippingZoneIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the shipping zone
     *
     * @param  string $shipping_zone_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingZoneIdAttachmentsWithHttpInfo($shipping_zone_id)
    {
        $request = $this->gETShippingZoneIdAttachmentsRequest($shipping_zone_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingZoneIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the shipping zone
     *
     * @param  string $shipping_zone_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingZoneIdAttachmentsAsync($shipping_zone_id)
    {
        return $this->gETShippingZoneIdAttachmentsAsyncWithHttpInfo($shipping_zone_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingZoneIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the shipping zone
     *
     * @param  string $shipping_zone_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingZoneIdAttachmentsAsyncWithHttpInfo($shipping_zone_id)
    {
        $returnType = '';
        $request = $this->gETShippingZoneIdAttachmentsRequest($shipping_zone_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingZoneIdAttachments'
     *
     * @param  string $shipping_zone_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingZoneIdAttachmentsRequest($shipping_zone_id)
    {
        // verify the required parameter 'shipping_zone_id' is set
        if ($shipping_zone_id === null || (is_array($shipping_zone_id) && count($shipping_zone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_zone_id when calling gETShippingZoneIdAttachments'
            );
        }

        $resourcePath = '/shipping_zones/{shippingZoneId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_zone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingZoneId' . '}',
                ObjectSerializer::toPathValue($shipping_zone_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuIdAttachments
     *
     * Retrieve the attachments associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuIdAttachments($sku_id)
    {
        $this->gETSkuIdAttachmentsWithHttpInfo($sku_id);
    }

    /**
     * Operation gETSkuIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuIdAttachmentsWithHttpInfo($sku_id)
    {
        $request = $this->gETSkuIdAttachmentsRequest($sku_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdAttachmentsAsync($sku_id)
    {
        return $this->gETSkuIdAttachmentsAsyncWithHttpInfo($sku_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdAttachmentsAsyncWithHttpInfo($sku_id)
    {
        $returnType = '';
        $request = $this->gETSkuIdAttachmentsRequest($sku_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuIdAttachments'
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuIdAttachmentsRequest($sku_id)
    {
        // verify the required parameter 'sku_id' is set
        if ($sku_id === null || (is_array($sku_id) && count($sku_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_id when calling gETSkuIdAttachments'
            );
        }

        $resourcePath = '/skus/{skuId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuId' . '}',
                ObjectSerializer::toPathValue($sku_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuIdDeliveryLeadTimes
     *
     * Retrieve the delivery lead times associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuIdDeliveryLeadTimes($sku_id)
    {
        $this->gETSkuIdDeliveryLeadTimesWithHttpInfo($sku_id);
    }

    /**
     * Operation gETSkuIdDeliveryLeadTimesWithHttpInfo
     *
     * Retrieve the delivery lead times associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuIdDeliveryLeadTimesWithHttpInfo($sku_id)
    {
        $request = $this->gETSkuIdDeliveryLeadTimesRequest($sku_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuIdDeliveryLeadTimesAsync
     *
     * Retrieve the delivery lead times associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdDeliveryLeadTimesAsync($sku_id)
    {
        return $this->gETSkuIdDeliveryLeadTimesAsyncWithHttpInfo($sku_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuIdDeliveryLeadTimesAsyncWithHttpInfo
     *
     * Retrieve the delivery lead times associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdDeliveryLeadTimesAsyncWithHttpInfo($sku_id)
    {
        $returnType = '';
        $request = $this->gETSkuIdDeliveryLeadTimesRequest($sku_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuIdDeliveryLeadTimes'
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuIdDeliveryLeadTimesRequest($sku_id)
    {
        // verify the required parameter 'sku_id' is set
        if ($sku_id === null || (is_array($sku_id) && count($sku_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_id when calling gETSkuIdDeliveryLeadTimes'
            );
        }

        $resourcePath = '/skus/{skuId}/delivery_lead_times';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuId' . '}',
                ObjectSerializer::toPathValue($sku_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuIdPrices
     *
     * Retrieve the prices associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuIdPrices($sku_id)
    {
        $this->gETSkuIdPricesWithHttpInfo($sku_id);
    }

    /**
     * Operation gETSkuIdPricesWithHttpInfo
     *
     * Retrieve the prices associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuIdPricesWithHttpInfo($sku_id)
    {
        $request = $this->gETSkuIdPricesRequest($sku_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuIdPricesAsync
     *
     * Retrieve the prices associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdPricesAsync($sku_id)
    {
        return $this->gETSkuIdPricesAsyncWithHttpInfo($sku_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuIdPricesAsyncWithHttpInfo
     *
     * Retrieve the prices associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdPricesAsyncWithHttpInfo($sku_id)
    {
        $returnType = '';
        $request = $this->gETSkuIdPricesRequest($sku_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuIdPrices'
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuIdPricesRequest($sku_id)
    {
        // verify the required parameter 'sku_id' is set
        if ($sku_id === null || (is_array($sku_id) && count($sku_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_id when calling gETSkuIdPrices'
            );
        }

        $resourcePath = '/skus/{skuId}/prices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuId' . '}',
                ObjectSerializer::toPathValue($sku_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuIdSkuOptions
     *
     * Retrieve the sku options associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuIdSkuOptions($sku_id)
    {
        $this->gETSkuIdSkuOptionsWithHttpInfo($sku_id);
    }

    /**
     * Operation gETSkuIdSkuOptionsWithHttpInfo
     *
     * Retrieve the sku options associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuIdSkuOptionsWithHttpInfo($sku_id)
    {
        $request = $this->gETSkuIdSkuOptionsRequest($sku_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuIdSkuOptionsAsync
     *
     * Retrieve the sku options associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdSkuOptionsAsync($sku_id)
    {
        return $this->gETSkuIdSkuOptionsAsyncWithHttpInfo($sku_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuIdSkuOptionsAsyncWithHttpInfo
     *
     * Retrieve the sku options associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdSkuOptionsAsyncWithHttpInfo($sku_id)
    {
        $returnType = '';
        $request = $this->gETSkuIdSkuOptionsRequest($sku_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuIdSkuOptions'
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuIdSkuOptionsRequest($sku_id)
    {
        // verify the required parameter 'sku_id' is set
        if ($sku_id === null || (is_array($sku_id) && count($sku_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_id when calling gETSkuIdSkuOptions'
            );
        }

        $resourcePath = '/skus/{skuId}/sku_options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuId' . '}',
                ObjectSerializer::toPathValue($sku_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuIdStockItems
     *
     * Retrieve the stock items associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuIdStockItems($sku_id)
    {
        $this->gETSkuIdStockItemsWithHttpInfo($sku_id);
    }

    /**
     * Operation gETSkuIdStockItemsWithHttpInfo
     *
     * Retrieve the stock items associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuIdStockItemsWithHttpInfo($sku_id)
    {
        $request = $this->gETSkuIdStockItemsRequest($sku_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuIdStockItemsAsync
     *
     * Retrieve the stock items associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdStockItemsAsync($sku_id)
    {
        return $this->gETSkuIdStockItemsAsyncWithHttpInfo($sku_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuIdStockItemsAsyncWithHttpInfo
     *
     * Retrieve the stock items associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdStockItemsAsyncWithHttpInfo($sku_id)
    {
        $returnType = '';
        $request = $this->gETSkuIdStockItemsRequest($sku_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuIdStockItems'
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuIdStockItemsRequest($sku_id)
    {
        // verify the required parameter 'sku_id' is set
        if ($sku_id === null || (is_array($sku_id) && count($sku_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_id when calling gETSkuIdStockItems'
            );
        }

        $resourcePath = '/skus/{skuId}/stock_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuId' . '}',
                ObjectSerializer::toPathValue($sku_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuListIdSkuListItems
     *
     * Retrieve the sku list items associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuListIdSkuListItems($sku_list_id)
    {
        $this->gETSkuListIdSkuListItemsWithHttpInfo($sku_list_id);
    }

    /**
     * Operation gETSkuListIdSkuListItemsWithHttpInfo
     *
     * Retrieve the sku list items associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuListIdSkuListItemsWithHttpInfo($sku_list_id)
    {
        $request = $this->gETSkuListIdSkuListItemsRequest($sku_list_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuListIdSkuListItemsAsync
     *
     * Retrieve the sku list items associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListIdSkuListItemsAsync($sku_list_id)
    {
        return $this->gETSkuListIdSkuListItemsAsyncWithHttpInfo($sku_list_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuListIdSkuListItemsAsyncWithHttpInfo
     *
     * Retrieve the sku list items associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListIdSkuListItemsAsyncWithHttpInfo($sku_list_id)
    {
        $returnType = '';
        $request = $this->gETSkuListIdSkuListItemsRequest($sku_list_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuListIdSkuListItems'
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuListIdSkuListItemsRequest($sku_list_id)
    {
        // verify the required parameter 'sku_list_id' is set
        if ($sku_list_id === null || (is_array($sku_list_id) && count($sku_list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_list_id when calling gETSkuListIdSkuListItems'
            );
        }

        $resourcePath = '/sku_lists/{skuListId}/sku_list_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuListId' . '}',
                ObjectSerializer::toPathValue($sku_list_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuListIdSkus
     *
     * Retrieve the skus associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuListIdSkus($sku_list_id)
    {
        $this->gETSkuListIdSkusWithHttpInfo($sku_list_id);
    }

    /**
     * Operation gETSkuListIdSkusWithHttpInfo
     *
     * Retrieve the skus associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuListIdSkusWithHttpInfo($sku_list_id)
    {
        $request = $this->gETSkuListIdSkusRequest($sku_list_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuListIdSkusAsync
     *
     * Retrieve the skus associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListIdSkusAsync($sku_list_id)
    {
        return $this->gETSkuListIdSkusAsyncWithHttpInfo($sku_list_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuListIdSkusAsyncWithHttpInfo
     *
     * Retrieve the skus associated to the SKU list
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListIdSkusAsyncWithHttpInfo($sku_list_id)
    {
        $returnType = '';
        $request = $this->gETSkuListIdSkusRequest($sku_list_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuListIdSkus'
     *
     * @param  string $sku_list_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuListIdSkusRequest($sku_list_id)
    {
        // verify the required parameter 'sku_list_id' is set
        if ($sku_list_id === null || (is_array($sku_list_id) && count($sku_list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_list_id when calling gETSkuListIdSkus'
            );
        }

        $resourcePath = '/sku_lists/{skuListId}/skus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_list_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuListId' . '}',
                ObjectSerializer::toPathValue($sku_list_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkus
     *
     * Retrieve the skus associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuListPromotionRuleIdSkus($sku_list_promotion_rule_id)
    {
        $this->gETSkuListPromotionRuleIdSkusWithHttpInfo($sku_list_promotion_rule_id);
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkusWithHttpInfo
     *
     * Retrieve the skus associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuListPromotionRuleIdSkusWithHttpInfo($sku_list_promotion_rule_id)
    {
        $request = $this->gETSkuListPromotionRuleIdSkusRequest($sku_list_promotion_rule_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkusAsync
     *
     * Retrieve the skus associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListPromotionRuleIdSkusAsync($sku_list_promotion_rule_id)
    {
        return $this->gETSkuListPromotionRuleIdSkusAsyncWithHttpInfo($sku_list_promotion_rule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkusAsyncWithHttpInfo
     *
     * Retrieve the skus associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListPromotionRuleIdSkusAsyncWithHttpInfo($sku_list_promotion_rule_id)
    {
        $returnType = '';
        $request = $this->gETSkuListPromotionRuleIdSkusRequest($sku_list_promotion_rule_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuListPromotionRuleIdSkus'
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuListPromotionRuleIdSkusRequest($sku_list_promotion_rule_id)
    {
        // verify the required parameter 'sku_list_promotion_rule_id' is set
        if ($sku_list_promotion_rule_id === null || (is_array($sku_list_promotion_rule_id) && count($sku_list_promotion_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_list_promotion_rule_id when calling gETSkuListPromotionRuleIdSkus'
            );
        }

        $resourcePath = '/sku_list_promotion_rules/{skuListPromotionRuleId}/skus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_list_promotion_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuListPromotionRuleId' . '}',
                ObjectSerializer::toPathValue($sku_list_promotion_rule_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuOptionIdAttachments
     *
     * Retrieve the attachments associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuOptionIdAttachments($sku_option_id)
    {
        $this->gETSkuOptionIdAttachmentsWithHttpInfo($sku_option_id);
    }

    /**
     * Operation gETSkuOptionIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuOptionIdAttachmentsWithHttpInfo($sku_option_id)
    {
        $request = $this->gETSkuOptionIdAttachmentsRequest($sku_option_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuOptionIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuOptionIdAttachmentsAsync($sku_option_id)
    {
        return $this->gETSkuOptionIdAttachmentsAsyncWithHttpInfo($sku_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuOptionIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuOptionIdAttachmentsAsyncWithHttpInfo($sku_option_id)
    {
        $returnType = '';
        $request = $this->gETSkuOptionIdAttachmentsRequest($sku_option_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuOptionIdAttachments'
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuOptionIdAttachmentsRequest($sku_option_id)
    {
        // verify the required parameter 'sku_option_id' is set
        if ($sku_option_id === null || (is_array($sku_option_id) && count($sku_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_option_id when calling gETSkuOptionIdAttachments'
            );
        }

        $resourcePath = '/sku_options/{skuOptionId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuOptionId' . '}',
                ObjectSerializer::toPathValue($sku_option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockItemIdAttachments
     *
     * Retrieve the attachments associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockItemIdAttachments($stock_item_id)
    {
        $this->gETStockItemIdAttachmentsWithHttpInfo($stock_item_id);
    }

    /**
     * Operation gETStockItemIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockItemIdAttachmentsWithHttpInfo($stock_item_id)
    {
        $request = $this->gETStockItemIdAttachmentsRequest($stock_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockItemIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockItemIdAttachmentsAsync($stock_item_id)
    {
        return $this->gETStockItemIdAttachmentsAsyncWithHttpInfo($stock_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockItemIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockItemIdAttachmentsAsyncWithHttpInfo($stock_item_id)
    {
        $returnType = '';
        $request = $this->gETStockItemIdAttachmentsRequest($stock_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockItemIdAttachments'
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockItemIdAttachmentsRequest($stock_item_id)
    {
        // verify the required parameter 'stock_item_id' is set
        if ($stock_item_id === null || (is_array($stock_item_id) && count($stock_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_item_id when calling gETStockItemIdAttachments'
            );
        }

        $resourcePath = '/stock_items/{stockItemId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockItemId' . '}',
                ObjectSerializer::toPathValue($stock_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLocationIdAttachments
     *
     * Retrieve the attachments associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLocationIdAttachments($stock_location_id)
    {
        $this->gETStockLocationIdAttachmentsWithHttpInfo($stock_location_id);
    }

    /**
     * Operation gETStockLocationIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLocationIdAttachmentsWithHttpInfo($stock_location_id)
    {
        $request = $this->gETStockLocationIdAttachmentsRequest($stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLocationIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdAttachmentsAsync($stock_location_id)
    {
        return $this->gETStockLocationIdAttachmentsAsyncWithHttpInfo($stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLocationIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdAttachmentsAsyncWithHttpInfo($stock_location_id)
    {
        $returnType = '';
        $request = $this->gETStockLocationIdAttachmentsRequest($stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLocationIdAttachments'
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLocationIdAttachmentsRequest($stock_location_id)
    {
        // verify the required parameter 'stock_location_id' is set
        if ($stock_location_id === null || (is_array($stock_location_id) && count($stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_id when calling gETStockLocationIdAttachments'
            );
        }

        $resourcePath = '/stock_locations/{stockLocationId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLocationId' . '}',
                ObjectSerializer::toPathValue($stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLocationIdInventoryReturnLocations
     *
     * Retrieve the inventory return locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLocationIdInventoryReturnLocations($stock_location_id)
    {
        $this->gETStockLocationIdInventoryReturnLocationsWithHttpInfo($stock_location_id);
    }

    /**
     * Operation gETStockLocationIdInventoryReturnLocationsWithHttpInfo
     *
     * Retrieve the inventory return locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLocationIdInventoryReturnLocationsWithHttpInfo($stock_location_id)
    {
        $request = $this->gETStockLocationIdInventoryReturnLocationsRequest($stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLocationIdInventoryReturnLocationsAsync
     *
     * Retrieve the inventory return locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdInventoryReturnLocationsAsync($stock_location_id)
    {
        return $this->gETStockLocationIdInventoryReturnLocationsAsyncWithHttpInfo($stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLocationIdInventoryReturnLocationsAsyncWithHttpInfo
     *
     * Retrieve the inventory return locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdInventoryReturnLocationsAsyncWithHttpInfo($stock_location_id)
    {
        $returnType = '';
        $request = $this->gETStockLocationIdInventoryReturnLocationsRequest($stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLocationIdInventoryReturnLocations'
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLocationIdInventoryReturnLocationsRequest($stock_location_id)
    {
        // verify the required parameter 'stock_location_id' is set
        if ($stock_location_id === null || (is_array($stock_location_id) && count($stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_id when calling gETStockLocationIdInventoryReturnLocations'
            );
        }

        $resourcePath = '/stock_locations/{stockLocationId}/inventory_return_locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLocationId' . '}',
                ObjectSerializer::toPathValue($stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLocationIdInventoryStockLocations
     *
     * Retrieve the inventory stock locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLocationIdInventoryStockLocations($stock_location_id)
    {
        $this->gETStockLocationIdInventoryStockLocationsWithHttpInfo($stock_location_id);
    }

    /**
     * Operation gETStockLocationIdInventoryStockLocationsWithHttpInfo
     *
     * Retrieve the inventory stock locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLocationIdInventoryStockLocationsWithHttpInfo($stock_location_id)
    {
        $request = $this->gETStockLocationIdInventoryStockLocationsRequest($stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLocationIdInventoryStockLocationsAsync
     *
     * Retrieve the inventory stock locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdInventoryStockLocationsAsync($stock_location_id)
    {
        return $this->gETStockLocationIdInventoryStockLocationsAsyncWithHttpInfo($stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLocationIdInventoryStockLocationsAsyncWithHttpInfo
     *
     * Retrieve the inventory stock locations associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdInventoryStockLocationsAsyncWithHttpInfo($stock_location_id)
    {
        $returnType = '';
        $request = $this->gETStockLocationIdInventoryStockLocationsRequest($stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLocationIdInventoryStockLocations'
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLocationIdInventoryStockLocationsRequest($stock_location_id)
    {
        // verify the required parameter 'stock_location_id' is set
        if ($stock_location_id === null || (is_array($stock_location_id) && count($stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_id when calling gETStockLocationIdInventoryStockLocations'
            );
        }

        $resourcePath = '/stock_locations/{stockLocationId}/inventory_stock_locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLocationId' . '}',
                ObjectSerializer::toPathValue($stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLocationIdStockItems
     *
     * Retrieve the stock items associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLocationIdStockItems($stock_location_id)
    {
        $this->gETStockLocationIdStockItemsWithHttpInfo($stock_location_id);
    }

    /**
     * Operation gETStockLocationIdStockItemsWithHttpInfo
     *
     * Retrieve the stock items associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLocationIdStockItemsWithHttpInfo($stock_location_id)
    {
        $request = $this->gETStockLocationIdStockItemsRequest($stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLocationIdStockItemsAsync
     *
     * Retrieve the stock items associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdStockItemsAsync($stock_location_id)
    {
        return $this->gETStockLocationIdStockItemsAsyncWithHttpInfo($stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLocationIdStockItemsAsyncWithHttpInfo
     *
     * Retrieve the stock items associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdStockItemsAsyncWithHttpInfo($stock_location_id)
    {
        $returnType = '';
        $request = $this->gETStockLocationIdStockItemsRequest($stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLocationIdStockItems'
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLocationIdStockItemsRequest($stock_location_id)
    {
        // verify the required parameter 'stock_location_id' is set
        if ($stock_location_id === null || (is_array($stock_location_id) && count($stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_id when calling gETStockLocationIdStockItems'
            );
        }

        $resourcePath = '/stock_locations/{stockLocationId}/stock_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLocationId' . '}',
                ObjectSerializer::toPathValue($stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLocationIdStockTransfers
     *
     * Retrieve the stock transfers associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLocationIdStockTransfers($stock_location_id)
    {
        $this->gETStockLocationIdStockTransfersWithHttpInfo($stock_location_id);
    }

    /**
     * Operation gETStockLocationIdStockTransfersWithHttpInfo
     *
     * Retrieve the stock transfers associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLocationIdStockTransfersWithHttpInfo($stock_location_id)
    {
        $request = $this->gETStockLocationIdStockTransfersRequest($stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLocationIdStockTransfersAsync
     *
     * Retrieve the stock transfers associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdStockTransfersAsync($stock_location_id)
    {
        return $this->gETStockLocationIdStockTransfersAsyncWithHttpInfo($stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLocationIdStockTransfersAsyncWithHttpInfo
     *
     * Retrieve the stock transfers associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdStockTransfersAsyncWithHttpInfo($stock_location_id)
    {
        $returnType = '';
        $request = $this->gETStockLocationIdStockTransfersRequest($stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLocationIdStockTransfers'
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLocationIdStockTransfersRequest($stock_location_id)
    {
        // verify the required parameter 'stock_location_id' is set
        if ($stock_location_id === null || (is_array($stock_location_id) && count($stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_id when calling gETStockLocationIdStockTransfers'
            );
        }

        $resourcePath = '/stock_locations/{stockLocationId}/stock_transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLocationId' . '}',
                ObjectSerializer::toPathValue($stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStripeGatewayIdPaymentMethods
     *
     * Retrieve the payment methods associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStripeGatewayIdPaymentMethods($stripe_gateway_id)
    {
        $this->gETStripeGatewayIdPaymentMethodsWithHttpInfo($stripe_gateway_id);
    }

    /**
     * Operation gETStripeGatewayIdPaymentMethodsWithHttpInfo
     *
     * Retrieve the payment methods associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStripeGatewayIdPaymentMethodsWithHttpInfo($stripe_gateway_id)
    {
        $request = $this->gETStripeGatewayIdPaymentMethodsRequest($stripe_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStripeGatewayIdPaymentMethodsAsync
     *
     * Retrieve the payment methods associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripeGatewayIdPaymentMethodsAsync($stripe_gateway_id)
    {
        return $this->gETStripeGatewayIdPaymentMethodsAsyncWithHttpInfo($stripe_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStripeGatewayIdPaymentMethodsAsyncWithHttpInfo
     *
     * Retrieve the payment methods associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripeGatewayIdPaymentMethodsAsyncWithHttpInfo($stripe_gateway_id)
    {
        $returnType = '';
        $request = $this->gETStripeGatewayIdPaymentMethodsRequest($stripe_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStripeGatewayIdPaymentMethods'
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStripeGatewayIdPaymentMethodsRequest($stripe_gateway_id)
    {
        // verify the required parameter 'stripe_gateway_id' is set
        if ($stripe_gateway_id === null || (is_array($stripe_gateway_id) && count($stripe_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stripe_gateway_id when calling gETStripeGatewayIdPaymentMethods'
            );
        }

        $resourcePath = '/stripe_gateways/{stripeGatewayId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stripe_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stripeGatewayId' . '}',
                ObjectSerializer::toPathValue($stripe_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStripeGatewayIdStripePayments
     *
     * Retrieve the stripe payments associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStripeGatewayIdStripePayments($stripe_gateway_id)
    {
        $this->gETStripeGatewayIdStripePaymentsWithHttpInfo($stripe_gateway_id);
    }

    /**
     * Operation gETStripeGatewayIdStripePaymentsWithHttpInfo
     *
     * Retrieve the stripe payments associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStripeGatewayIdStripePaymentsWithHttpInfo($stripe_gateway_id)
    {
        $request = $this->gETStripeGatewayIdStripePaymentsRequest($stripe_gateway_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStripeGatewayIdStripePaymentsAsync
     *
     * Retrieve the stripe payments associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripeGatewayIdStripePaymentsAsync($stripe_gateway_id)
    {
        return $this->gETStripeGatewayIdStripePaymentsAsyncWithHttpInfo($stripe_gateway_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStripeGatewayIdStripePaymentsAsyncWithHttpInfo
     *
     * Retrieve the stripe payments associated to the stripe gateway
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripeGatewayIdStripePaymentsAsyncWithHttpInfo($stripe_gateway_id)
    {
        $returnType = '';
        $request = $this->gETStripeGatewayIdStripePaymentsRequest($stripe_gateway_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStripeGatewayIdStripePayments'
     *
     * @param  string $stripe_gateway_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStripeGatewayIdStripePaymentsRequest($stripe_gateway_id)
    {
        // verify the required parameter 'stripe_gateway_id' is set
        if ($stripe_gateway_id === null || (is_array($stripe_gateway_id) && count($stripe_gateway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stripe_gateway_id when calling gETStripeGatewayIdStripePayments'
            );
        }

        $resourcePath = '/stripe_gateways/{stripeGatewayId}/stripe_payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stripe_gateway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stripeGatewayId' . '}',
                ObjectSerializer::toPathValue($stripe_gateway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETTaxCalculatorIdAttachments
     *
     * Retrieve the attachments associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETTaxCalculatorIdAttachments($tax_calculator_id)
    {
        $this->gETTaxCalculatorIdAttachmentsWithHttpInfo($tax_calculator_id);
    }

    /**
     * Operation gETTaxCalculatorIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETTaxCalculatorIdAttachmentsWithHttpInfo($tax_calculator_id)
    {
        $request = $this->gETTaxCalculatorIdAttachmentsRequest($tax_calculator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETTaxCalculatorIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCalculatorIdAttachmentsAsync($tax_calculator_id)
    {
        return $this->gETTaxCalculatorIdAttachmentsAsyncWithHttpInfo($tax_calculator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETTaxCalculatorIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCalculatorIdAttachmentsAsyncWithHttpInfo($tax_calculator_id)
    {
        $returnType = '';
        $request = $this->gETTaxCalculatorIdAttachmentsRequest($tax_calculator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETTaxCalculatorIdAttachments'
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETTaxCalculatorIdAttachmentsRequest($tax_calculator_id)
    {
        // verify the required parameter 'tax_calculator_id' is set
        if ($tax_calculator_id === null || (is_array($tax_calculator_id) && count($tax_calculator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_calculator_id when calling gETTaxCalculatorIdAttachments'
            );
        }

        $resourcePath = '/tax_calculators/{taxCalculatorId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tax_calculator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taxCalculatorId' . '}',
                ObjectSerializer::toPathValue($tax_calculator_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETTaxCalculatorIdTaxCategories
     *
     * Retrieve the tax categories associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETTaxCalculatorIdTaxCategories($tax_calculator_id)
    {
        $this->gETTaxCalculatorIdTaxCategoriesWithHttpInfo($tax_calculator_id);
    }

    /**
     * Operation gETTaxCalculatorIdTaxCategoriesWithHttpInfo
     *
     * Retrieve the tax categories associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETTaxCalculatorIdTaxCategoriesWithHttpInfo($tax_calculator_id)
    {
        $request = $this->gETTaxCalculatorIdTaxCategoriesRequest($tax_calculator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETTaxCalculatorIdTaxCategoriesAsync
     *
     * Retrieve the tax categories associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCalculatorIdTaxCategoriesAsync($tax_calculator_id)
    {
        return $this->gETTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo($tax_calculator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo
     *
     * Retrieve the tax categories associated to the tax calculator
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCalculatorIdTaxCategoriesAsyncWithHttpInfo($tax_calculator_id)
    {
        $returnType = '';
        $request = $this->gETTaxCalculatorIdTaxCategoriesRequest($tax_calculator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETTaxCalculatorIdTaxCategories'
     *
     * @param  string $tax_calculator_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETTaxCalculatorIdTaxCategoriesRequest($tax_calculator_id)
    {
        // verify the required parameter 'tax_calculator_id' is set
        if ($tax_calculator_id === null || (is_array($tax_calculator_id) && count($tax_calculator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_calculator_id when calling gETTaxCalculatorIdTaxCategories'
            );
        }

        $resourcePath = '/tax_calculators/{taxCalculatorId}/tax_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tax_calculator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taxCalculatorId' . '}',
                ObjectSerializer::toPathValue($tax_calculator_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETTaxCategoryIdAttachments
     *
     * Retrieve the attachments associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETTaxCategoryIdAttachments($tax_category_id)
    {
        $this->gETTaxCategoryIdAttachmentsWithHttpInfo($tax_category_id);
    }

    /**
     * Operation gETTaxCategoryIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETTaxCategoryIdAttachmentsWithHttpInfo($tax_category_id)
    {
        $request = $this->gETTaxCategoryIdAttachmentsRequest($tax_category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETTaxCategoryIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCategoryIdAttachmentsAsync($tax_category_id)
    {
        return $this->gETTaxCategoryIdAttachmentsAsyncWithHttpInfo($tax_category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETTaxCategoryIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCategoryIdAttachmentsAsyncWithHttpInfo($tax_category_id)
    {
        $returnType = '';
        $request = $this->gETTaxCategoryIdAttachmentsRequest($tax_category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETTaxCategoryIdAttachments'
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETTaxCategoryIdAttachmentsRequest($tax_category_id)
    {
        // verify the required parameter 'tax_category_id' is set
        if ($tax_category_id === null || (is_array($tax_category_id) && count($tax_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_category_id when calling gETTaxCategoryIdAttachments'
            );
        }

        $resourcePath = '/tax_categories/{taxCategoryId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tax_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taxCategoryId' . '}',
                ObjectSerializer::toPathValue($tax_category_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETTaxjarAccountIdAttachments
     *
     * Retrieve the attachments associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETTaxjarAccountIdAttachments($taxjar_account_id)
    {
        $this->gETTaxjarAccountIdAttachmentsWithHttpInfo($taxjar_account_id);
    }

    /**
     * Operation gETTaxjarAccountIdAttachmentsWithHttpInfo
     *
     * Retrieve the attachments associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETTaxjarAccountIdAttachmentsWithHttpInfo($taxjar_account_id)
    {
        $request = $this->gETTaxjarAccountIdAttachmentsRequest($taxjar_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETTaxjarAccountIdAttachmentsAsync
     *
     * Retrieve the attachments associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxjarAccountIdAttachmentsAsync($taxjar_account_id)
    {
        return $this->gETTaxjarAccountIdAttachmentsAsyncWithHttpInfo($taxjar_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETTaxjarAccountIdAttachmentsAsyncWithHttpInfo
     *
     * Retrieve the attachments associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxjarAccountIdAttachmentsAsyncWithHttpInfo($taxjar_account_id)
    {
        $returnType = '';
        $request = $this->gETTaxjarAccountIdAttachmentsRequest($taxjar_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETTaxjarAccountIdAttachments'
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETTaxjarAccountIdAttachmentsRequest($taxjar_account_id)
    {
        // verify the required parameter 'taxjar_account_id' is set
        if ($taxjar_account_id === null || (is_array($taxjar_account_id) && count($taxjar_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $taxjar_account_id when calling gETTaxjarAccountIdAttachments'
            );
        }

        $resourcePath = '/taxjar_accounts/{taxjarAccountId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($taxjar_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taxjarAccountId' . '}',
                ObjectSerializer::toPathValue($taxjar_account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETTaxjarAccountIdTaxCategories
     *
     * Retrieve the tax categories associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETTaxjarAccountIdTaxCategories($taxjar_account_id)
    {
        $this->gETTaxjarAccountIdTaxCategoriesWithHttpInfo($taxjar_account_id);
    }

    /**
     * Operation gETTaxjarAccountIdTaxCategoriesWithHttpInfo
     *
     * Retrieve the tax categories associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETTaxjarAccountIdTaxCategoriesWithHttpInfo($taxjar_account_id)
    {
        $request = $this->gETTaxjarAccountIdTaxCategoriesRequest($taxjar_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETTaxjarAccountIdTaxCategoriesAsync
     *
     * Retrieve the tax categories associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxjarAccountIdTaxCategoriesAsync($taxjar_account_id)
    {
        return $this->gETTaxjarAccountIdTaxCategoriesAsyncWithHttpInfo($taxjar_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETTaxjarAccountIdTaxCategoriesAsyncWithHttpInfo
     *
     * Retrieve the tax categories associated to the taxjar account
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxjarAccountIdTaxCategoriesAsyncWithHttpInfo($taxjar_account_id)
    {
        $returnType = '';
        $request = $this->gETTaxjarAccountIdTaxCategoriesRequest($taxjar_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETTaxjarAccountIdTaxCategories'
     *
     * @param  string $taxjar_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETTaxjarAccountIdTaxCategoriesRequest($taxjar_account_id)
    {
        // verify the required parameter 'taxjar_account_id' is set
        if ($taxjar_account_id === null || (is_array($taxjar_account_id) && count($taxjar_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $taxjar_account_id when calling gETTaxjarAccountIdTaxCategories'
            );
        }

        $resourcePath = '/taxjar_accounts/{taxjarAccountId}/tax_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($taxjar_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taxjarAccountId' . '}',
                ObjectSerializer::toPathValue($taxjar_account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
