<?php
/**
 * InventoryReturnLocationsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * InventoryReturnLocationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InventoryReturnLocationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation dELETEInventoryReturnLocationsInventoryReturnLocationId
     *
     * Delete an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dELETEInventoryReturnLocationsInventoryReturnLocationId($inventory_return_location_id)
    {
        $this->dELETEInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo($inventory_return_location_id);
    }

    /**
     * Operation dELETEInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo
     *
     * Delete an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dELETEInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo($inventory_return_location_id)
    {
        $request = $this->dELETEInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dELETEInventoryReturnLocationsInventoryReturnLocationIdAsync
     *
     * Delete an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dELETEInventoryReturnLocationsInventoryReturnLocationIdAsync($inventory_return_location_id)
    {
        return $this->dELETEInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo($inventory_return_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dELETEInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo
     *
     * Delete an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dELETEInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo($inventory_return_location_id)
    {
        $returnType = '';
        $request = $this->dELETEInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dELETEInventoryReturnLocationsInventoryReturnLocationId'
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dELETEInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id)
    {
        // verify the required parameter 'inventory_return_location_id' is set
        if ($inventory_return_location_id === null || (is_array($inventory_return_location_id) && count($inventory_return_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_return_location_id when calling dELETEInventoryReturnLocationsInventoryReturnLocationId'
            );
        }

        $resourcePath = '/inventory_return_locations/{inventoryReturnLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_return_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryReturnLocationId' . '}',
                ObjectSerializer::toPathValue($inventory_return_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryReturnLocations
     *
     * List all inventory return locations
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryReturnLocations()
    {
        $this->gETInventoryReturnLocationsWithHttpInfo();
    }

    /**
     * Operation gETInventoryReturnLocationsWithHttpInfo
     *
     * List all inventory return locations
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryReturnLocationsWithHttpInfo()
    {
        $request = $this->gETInventoryReturnLocationsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryReturnLocationsAsync
     *
     * List all inventory return locations
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationsAsync()
    {
        return $this->gETInventoryReturnLocationsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryReturnLocationsAsyncWithHttpInfo
     *
     * List all inventory return locations
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationsAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->gETInventoryReturnLocationsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryReturnLocations'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryReturnLocationsRequest()
    {

        $resourcePath = '/inventory_return_locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryReturnLocationsInventoryReturnLocationId
     *
     * Retrieve an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InventoryReturnLocation
     */
    public function gETInventoryReturnLocationsInventoryReturnLocationId($inventory_return_location_id)
    {
        list($response) = $this->gETInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo($inventory_return_location_id);
        return $response;
    }

    /**
     * Operation gETInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo
     *
     * Retrieve an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InventoryReturnLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo($inventory_return_location_id)
    {
        $request = $this->gETInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InventoryReturnLocation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InventoryReturnLocation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InventoryReturnLocation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InventoryReturnLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryReturnLocationsInventoryReturnLocationIdAsync
     *
     * Retrieve an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationsInventoryReturnLocationIdAsync($inventory_return_location_id)
    {
        return $this->gETInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo($inventory_return_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo
     *
     * Retrieve an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo($inventory_return_location_id)
    {
        $returnType = '\OpenAPI\Client\Model\InventoryReturnLocation';
        $request = $this->gETInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryReturnLocationsInventoryReturnLocationId'
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id)
    {
        // verify the required parameter 'inventory_return_location_id' is set
        if ($inventory_return_location_id === null || (is_array($inventory_return_location_id) && count($inventory_return_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_return_location_id when calling gETInventoryReturnLocationsInventoryReturnLocationId'
            );
        }

        $resourcePath = '/inventory_return_locations/{inventoryReturnLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_return_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryReturnLocationId' . '}',
                ObjectSerializer::toPathValue($inventory_return_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pATCHInventoryReturnLocationsInventoryReturnLocationId
     *
     * Update an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationUpdate $inventory_return_location_update inventory_return_location_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pATCHInventoryReturnLocationsInventoryReturnLocationId($inventory_return_location_id, $inventory_return_location_update)
    {
        $this->pATCHInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo($inventory_return_location_id, $inventory_return_location_update);
    }

    /**
     * Operation pATCHInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo
     *
     * Update an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationUpdate $inventory_return_location_update (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pATCHInventoryReturnLocationsInventoryReturnLocationIdWithHttpInfo($inventory_return_location_id, $inventory_return_location_update)
    {
        $request = $this->pATCHInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id, $inventory_return_location_update);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pATCHInventoryReturnLocationsInventoryReturnLocationIdAsync
     *
     * Update an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationUpdate $inventory_return_location_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pATCHInventoryReturnLocationsInventoryReturnLocationIdAsync($inventory_return_location_id, $inventory_return_location_update)
    {
        return $this->pATCHInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo($inventory_return_location_id, $inventory_return_location_update)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pATCHInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo
     *
     * Update an inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationUpdate $inventory_return_location_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pATCHInventoryReturnLocationsInventoryReturnLocationIdAsyncWithHttpInfo($inventory_return_location_id, $inventory_return_location_update)
    {
        $returnType = '';
        $request = $this->pATCHInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id, $inventory_return_location_update);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pATCHInventoryReturnLocationsInventoryReturnLocationId'
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationUpdate $inventory_return_location_update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pATCHInventoryReturnLocationsInventoryReturnLocationIdRequest($inventory_return_location_id, $inventory_return_location_update)
    {
        // verify the required parameter 'inventory_return_location_id' is set
        if ($inventory_return_location_id === null || (is_array($inventory_return_location_id) && count($inventory_return_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_return_location_id when calling pATCHInventoryReturnLocationsInventoryReturnLocationId'
            );
        }
        // verify the required parameter 'inventory_return_location_update' is set
        if ($inventory_return_location_update === null || (is_array($inventory_return_location_update) && count($inventory_return_location_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_return_location_update when calling pATCHInventoryReturnLocationsInventoryReturnLocationId'
            );
        }

        $resourcePath = '/inventory_return_locations/{inventoryReturnLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_return_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryReturnLocationId' . '}',
                ObjectSerializer::toPathValue($inventory_return_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($inventory_return_location_update)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inventory_return_location_update));
            } else {
                $httpBody = $inventory_return_location_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pOSTInventoryReturnLocations
     *
     * Create an inventory return location
     *
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationCreate $inventory_return_location_create inventory_return_location_create (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pOSTInventoryReturnLocations($inventory_return_location_create)
    {
        $this->pOSTInventoryReturnLocationsWithHttpInfo($inventory_return_location_create);
    }

    /**
     * Operation pOSTInventoryReturnLocationsWithHttpInfo
     *
     * Create an inventory return location
     *
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationCreate $inventory_return_location_create (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pOSTInventoryReturnLocationsWithHttpInfo($inventory_return_location_create)
    {
        $request = $this->pOSTInventoryReturnLocationsRequest($inventory_return_location_create);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pOSTInventoryReturnLocationsAsync
     *
     * Create an inventory return location
     *
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationCreate $inventory_return_location_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSTInventoryReturnLocationsAsync($inventory_return_location_create)
    {
        return $this->pOSTInventoryReturnLocationsAsyncWithHttpInfo($inventory_return_location_create)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pOSTInventoryReturnLocationsAsyncWithHttpInfo
     *
     * Create an inventory return location
     *
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationCreate $inventory_return_location_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSTInventoryReturnLocationsAsyncWithHttpInfo($inventory_return_location_create)
    {
        $returnType = '';
        $request = $this->pOSTInventoryReturnLocationsRequest($inventory_return_location_create);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pOSTInventoryReturnLocations'
     *
     * @param  \OpenAPI\Client\Model\InventoryReturnLocationCreate $inventory_return_location_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pOSTInventoryReturnLocationsRequest($inventory_return_location_create)
    {
        // verify the required parameter 'inventory_return_location_create' is set
        if ($inventory_return_location_create === null || (is_array($inventory_return_location_create) && count($inventory_return_location_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_return_location_create when calling pOSTInventoryReturnLocations'
            );
        }

        $resourcePath = '/inventory_return_locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($inventory_return_location_create)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inventory_return_location_create));
            } else {
                $httpBody = $inventory_return_location_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
