<?php
/**
 * HasOneApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HasOneApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HasOneApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation gETAddressIdGeocoder
     *
     * Retrieve the geocoder associated to the address
     *
     * @param  string $address_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAddressIdGeocoder($address_id)
    {
        $this->gETAddressIdGeocoderWithHttpInfo($address_id);
    }

    /**
     * Operation gETAddressIdGeocoderWithHttpInfo
     *
     * Retrieve the geocoder associated to the address
     *
     * @param  string $address_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAddressIdGeocoderWithHttpInfo($address_id)
    {
        $request = $this->gETAddressIdGeocoderRequest($address_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAddressIdGeocoderAsync
     *
     * Retrieve the geocoder associated to the address
     *
     * @param  string $address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAddressIdGeocoderAsync($address_id)
    {
        return $this->gETAddressIdGeocoderAsyncWithHttpInfo($address_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAddressIdGeocoderAsyncWithHttpInfo
     *
     * Retrieve the geocoder associated to the address
     *
     * @param  string $address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAddressIdGeocoderAsyncWithHttpInfo($address_id)
    {
        $returnType = '';
        $request = $this->gETAddressIdGeocoderRequest($address_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAddressIdGeocoder'
     *
     * @param  string $address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAddressIdGeocoderRequest($address_id)
    {
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling gETAddressIdGeocoder'
            );
        }

        $resourcePath = '/addresses/{addressId}/geocoder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addressId' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAdyenPaymentIdOrder
     *
     * Retrieve the order associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAdyenPaymentIdOrder($adyen_payment_id)
    {
        $this->gETAdyenPaymentIdOrderWithHttpInfo($adyen_payment_id);
    }

    /**
     * Operation gETAdyenPaymentIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAdyenPaymentIdOrderWithHttpInfo($adyen_payment_id)
    {
        $request = $this->gETAdyenPaymentIdOrderRequest($adyen_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAdyenPaymentIdOrderAsync
     *
     * Retrieve the order associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenPaymentIdOrderAsync($adyen_payment_id)
    {
        return $this->gETAdyenPaymentIdOrderAsyncWithHttpInfo($adyen_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAdyenPaymentIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenPaymentIdOrderAsyncWithHttpInfo($adyen_payment_id)
    {
        $returnType = '';
        $request = $this->gETAdyenPaymentIdOrderRequest($adyen_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAdyenPaymentIdOrder'
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAdyenPaymentIdOrderRequest($adyen_payment_id)
    {
        // verify the required parameter 'adyen_payment_id' is set
        if ($adyen_payment_id === null || (is_array($adyen_payment_id) && count($adyen_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adyen_payment_id when calling gETAdyenPaymentIdOrder'
            );
        }

        $resourcePath = '/adyen_payments/{adyenPaymentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($adyen_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'adyenPaymentId' . '}',
                ObjectSerializer::toPathValue($adyen_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAdyenPaymentIdPaymentGateway
     *
     * Retrieve the payment gateway associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAdyenPaymentIdPaymentGateway($adyen_payment_id)
    {
        $this->gETAdyenPaymentIdPaymentGatewayWithHttpInfo($adyen_payment_id);
    }

    /**
     * Operation gETAdyenPaymentIdPaymentGatewayWithHttpInfo
     *
     * Retrieve the payment gateway associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAdyenPaymentIdPaymentGatewayWithHttpInfo($adyen_payment_id)
    {
        $request = $this->gETAdyenPaymentIdPaymentGatewayRequest($adyen_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAdyenPaymentIdPaymentGatewayAsync
     *
     * Retrieve the payment gateway associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenPaymentIdPaymentGatewayAsync($adyen_payment_id)
    {
        return $this->gETAdyenPaymentIdPaymentGatewayAsyncWithHttpInfo($adyen_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAdyenPaymentIdPaymentGatewayAsyncWithHttpInfo
     *
     * Retrieve the payment gateway associated to the adyen payment
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAdyenPaymentIdPaymentGatewayAsyncWithHttpInfo($adyen_payment_id)
    {
        $returnType = '';
        $request = $this->gETAdyenPaymentIdPaymentGatewayRequest($adyen_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAdyenPaymentIdPaymentGateway'
     *
     * @param  string $adyen_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAdyenPaymentIdPaymentGatewayRequest($adyen_payment_id)
    {
        // verify the required parameter 'adyen_payment_id' is set
        if ($adyen_payment_id === null || (is_array($adyen_payment_id) && count($adyen_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adyen_payment_id when calling gETAdyenPaymentIdPaymentGateway'
            );
        }

        $resourcePath = '/adyen_payments/{adyenPaymentId}/payment_gateway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($adyen_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'adyenPaymentId' . '}',
                ObjectSerializer::toPathValue($adyen_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAuthorizationIdOrder
     *
     * Retrieve the order associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETAuthorizationIdOrder($authorization_id)
    {
        $this->gETAuthorizationIdOrderWithHttpInfo($authorization_id);
    }

    /**
     * Operation gETAuthorizationIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAuthorizationIdOrderWithHttpInfo($authorization_id)
    {
        $request = $this->gETAuthorizationIdOrderRequest($authorization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETAuthorizationIdOrderAsync
     *
     * Retrieve the order associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAuthorizationIdOrderAsync($authorization_id)
    {
        return $this->gETAuthorizationIdOrderAsyncWithHttpInfo($authorization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAuthorizationIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the authorization
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAuthorizationIdOrderAsyncWithHttpInfo($authorization_id)
    {
        $returnType = '';
        $request = $this->gETAuthorizationIdOrderRequest($authorization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAuthorizationIdOrder'
     *
     * @param  string $authorization_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAuthorizationIdOrderRequest($authorization_id)
    {
        // verify the required parameter 'authorization_id' is set
        if ($authorization_id === null || (is_array($authorization_id) && count($authorization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization_id when calling gETAuthorizationIdOrder'
            );
        }

        $resourcePath = '/authorizations/{authorizationId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($authorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizationId' . '}',
                ObjectSerializer::toPathValue($authorization_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETBillingInfoValidationRuleIdMarket
     *
     * Retrieve the market associated to the billing info validation rule
     *
     * @param  string $billing_info_validation_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETBillingInfoValidationRuleIdMarket($billing_info_validation_rule_id)
    {
        $this->gETBillingInfoValidationRuleIdMarketWithHttpInfo($billing_info_validation_rule_id);
    }

    /**
     * Operation gETBillingInfoValidationRuleIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the billing info validation rule
     *
     * @param  string $billing_info_validation_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETBillingInfoValidationRuleIdMarketWithHttpInfo($billing_info_validation_rule_id)
    {
        $request = $this->gETBillingInfoValidationRuleIdMarketRequest($billing_info_validation_rule_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETBillingInfoValidationRuleIdMarketAsync
     *
     * Retrieve the market associated to the billing info validation rule
     *
     * @param  string $billing_info_validation_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBillingInfoValidationRuleIdMarketAsync($billing_info_validation_rule_id)
    {
        return $this->gETBillingInfoValidationRuleIdMarketAsyncWithHttpInfo($billing_info_validation_rule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETBillingInfoValidationRuleIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the billing info validation rule
     *
     * @param  string $billing_info_validation_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBillingInfoValidationRuleIdMarketAsyncWithHttpInfo($billing_info_validation_rule_id)
    {
        $returnType = '';
        $request = $this->gETBillingInfoValidationRuleIdMarketRequest($billing_info_validation_rule_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETBillingInfoValidationRuleIdMarket'
     *
     * @param  string $billing_info_validation_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETBillingInfoValidationRuleIdMarketRequest($billing_info_validation_rule_id)
    {
        // verify the required parameter 'billing_info_validation_rule_id' is set
        if ($billing_info_validation_rule_id === null || (is_array($billing_info_validation_rule_id) && count($billing_info_validation_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_info_validation_rule_id when calling gETBillingInfoValidationRuleIdMarket'
            );
        }

        $resourcePath = '/billing_info_validation_rules/{billingInfoValidationRuleId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($billing_info_validation_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'billingInfoValidationRuleId' . '}',
                ObjectSerializer::toPathValue($billing_info_validation_rule_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETBraintreePaymentIdOrder
     *
     * Retrieve the order associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETBraintreePaymentIdOrder($braintree_payment_id)
    {
        $this->gETBraintreePaymentIdOrderWithHttpInfo($braintree_payment_id);
    }

    /**
     * Operation gETBraintreePaymentIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETBraintreePaymentIdOrderWithHttpInfo($braintree_payment_id)
    {
        $request = $this->gETBraintreePaymentIdOrderRequest($braintree_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETBraintreePaymentIdOrderAsync
     *
     * Retrieve the order associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreePaymentIdOrderAsync($braintree_payment_id)
    {
        return $this->gETBraintreePaymentIdOrderAsyncWithHttpInfo($braintree_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETBraintreePaymentIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreePaymentIdOrderAsyncWithHttpInfo($braintree_payment_id)
    {
        $returnType = '';
        $request = $this->gETBraintreePaymentIdOrderRequest($braintree_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETBraintreePaymentIdOrder'
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETBraintreePaymentIdOrderRequest($braintree_payment_id)
    {
        // verify the required parameter 'braintree_payment_id' is set
        if ($braintree_payment_id === null || (is_array($braintree_payment_id) && count($braintree_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $braintree_payment_id when calling gETBraintreePaymentIdOrder'
            );
        }

        $resourcePath = '/braintree_payments/{braintreePaymentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($braintree_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'braintreePaymentId' . '}',
                ObjectSerializer::toPathValue($braintree_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETBraintreePaymentIdPaymentGateway
     *
     * Retrieve the payment gateway associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETBraintreePaymentIdPaymentGateway($braintree_payment_id)
    {
        $this->gETBraintreePaymentIdPaymentGatewayWithHttpInfo($braintree_payment_id);
    }

    /**
     * Operation gETBraintreePaymentIdPaymentGatewayWithHttpInfo
     *
     * Retrieve the payment gateway associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETBraintreePaymentIdPaymentGatewayWithHttpInfo($braintree_payment_id)
    {
        $request = $this->gETBraintreePaymentIdPaymentGatewayRequest($braintree_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETBraintreePaymentIdPaymentGatewayAsync
     *
     * Retrieve the payment gateway associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreePaymentIdPaymentGatewayAsync($braintree_payment_id)
    {
        return $this->gETBraintreePaymentIdPaymentGatewayAsyncWithHttpInfo($braintree_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETBraintreePaymentIdPaymentGatewayAsyncWithHttpInfo
     *
     * Retrieve the payment gateway associated to the braintree payment
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETBraintreePaymentIdPaymentGatewayAsyncWithHttpInfo($braintree_payment_id)
    {
        $returnType = '';
        $request = $this->gETBraintreePaymentIdPaymentGatewayRequest($braintree_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETBraintreePaymentIdPaymentGateway'
     *
     * @param  string $braintree_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETBraintreePaymentIdPaymentGatewayRequest($braintree_payment_id)
    {
        // verify the required parameter 'braintree_payment_id' is set
        if ($braintree_payment_id === null || (is_array($braintree_payment_id) && count($braintree_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $braintree_payment_id when calling gETBraintreePaymentIdPaymentGateway'
            );
        }

        $resourcePath = '/braintree_payments/{braintreePaymentId}/payment_gateway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($braintree_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'braintreePaymentId' . '}',
                ObjectSerializer::toPathValue($braintree_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCaptureIdOrder
     *
     * Retrieve the order associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCaptureIdOrder($capture_id)
    {
        $this->gETCaptureIdOrderWithHttpInfo($capture_id);
    }

    /**
     * Operation gETCaptureIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCaptureIdOrderWithHttpInfo($capture_id)
    {
        $request = $this->gETCaptureIdOrderRequest($capture_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCaptureIdOrderAsync
     *
     * Retrieve the order associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCaptureIdOrderAsync($capture_id)
    {
        return $this->gETCaptureIdOrderAsyncWithHttpInfo($capture_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCaptureIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCaptureIdOrderAsyncWithHttpInfo($capture_id)
    {
        $returnType = '';
        $request = $this->gETCaptureIdOrderRequest($capture_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCaptureIdOrder'
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCaptureIdOrderRequest($capture_id)
    {
        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling gETCaptureIdOrder'
            );
        }

        $resourcePath = '/captures/{captureId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'captureId' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCaptureIdReferenceAuthorization
     *
     * Retrieve the reference authorization associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCaptureIdReferenceAuthorization($capture_id)
    {
        $this->gETCaptureIdReferenceAuthorizationWithHttpInfo($capture_id);
    }

    /**
     * Operation gETCaptureIdReferenceAuthorizationWithHttpInfo
     *
     * Retrieve the reference authorization associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCaptureIdReferenceAuthorizationWithHttpInfo($capture_id)
    {
        $request = $this->gETCaptureIdReferenceAuthorizationRequest($capture_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCaptureIdReferenceAuthorizationAsync
     *
     * Retrieve the reference authorization associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCaptureIdReferenceAuthorizationAsync($capture_id)
    {
        return $this->gETCaptureIdReferenceAuthorizationAsyncWithHttpInfo($capture_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCaptureIdReferenceAuthorizationAsyncWithHttpInfo
     *
     * Retrieve the reference authorization associated to the capture
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCaptureIdReferenceAuthorizationAsyncWithHttpInfo($capture_id)
    {
        $returnType = '';
        $request = $this->gETCaptureIdReferenceAuthorizationRequest($capture_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCaptureIdReferenceAuthorization'
     *
     * @param  string $capture_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCaptureIdReferenceAuthorizationRequest($capture_id)
    {
        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling gETCaptureIdReferenceAuthorization'
            );
        }

        $resourcePath = '/captures/{captureId}/reference_authorization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'captureId' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCarrierAccountIdMarket
     *
     * Retrieve the market associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCarrierAccountIdMarket($carrier_account_id)
    {
        $this->gETCarrierAccountIdMarketWithHttpInfo($carrier_account_id);
    }

    /**
     * Operation gETCarrierAccountIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCarrierAccountIdMarketWithHttpInfo($carrier_account_id)
    {
        $request = $this->gETCarrierAccountIdMarketRequest($carrier_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCarrierAccountIdMarketAsync
     *
     * Retrieve the market associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCarrierAccountIdMarketAsync($carrier_account_id)
    {
        return $this->gETCarrierAccountIdMarketAsyncWithHttpInfo($carrier_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCarrierAccountIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the carrier account
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCarrierAccountIdMarketAsyncWithHttpInfo($carrier_account_id)
    {
        $returnType = '';
        $request = $this->gETCarrierAccountIdMarketRequest($carrier_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCarrierAccountIdMarket'
     *
     * @param  string $carrier_account_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCarrierAccountIdMarketRequest($carrier_account_id)
    {
        // verify the required parameter 'carrier_account_id' is set
        if ($carrier_account_id === null || (is_array($carrier_account_id) && count($carrier_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_account_id when calling gETCarrierAccountIdMarket'
            );
        }

        $resourcePath = '/carrier_accounts/{carrierAccountId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($carrier_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierAccountId' . '}',
                ObjectSerializer::toPathValue($carrier_account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCheckoutComPaymentIdOrder
     *
     * Retrieve the order associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCheckoutComPaymentIdOrder($checkout_com_payment_id)
    {
        $this->gETCheckoutComPaymentIdOrderWithHttpInfo($checkout_com_payment_id);
    }

    /**
     * Operation gETCheckoutComPaymentIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCheckoutComPaymentIdOrderWithHttpInfo($checkout_com_payment_id)
    {
        $request = $this->gETCheckoutComPaymentIdOrderRequest($checkout_com_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCheckoutComPaymentIdOrderAsync
     *
     * Retrieve the order associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComPaymentIdOrderAsync($checkout_com_payment_id)
    {
        return $this->gETCheckoutComPaymentIdOrderAsyncWithHttpInfo($checkout_com_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCheckoutComPaymentIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComPaymentIdOrderAsyncWithHttpInfo($checkout_com_payment_id)
    {
        $returnType = '';
        $request = $this->gETCheckoutComPaymentIdOrderRequest($checkout_com_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCheckoutComPaymentIdOrder'
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCheckoutComPaymentIdOrderRequest($checkout_com_payment_id)
    {
        // verify the required parameter 'checkout_com_payment_id' is set
        if ($checkout_com_payment_id === null || (is_array($checkout_com_payment_id) && count($checkout_com_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_com_payment_id when calling gETCheckoutComPaymentIdOrder'
            );
        }

        $resourcePath = '/checkout_com_payments/{checkoutComPaymentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checkout_com_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutComPaymentId' . '}',
                ObjectSerializer::toPathValue($checkout_com_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCheckoutComPaymentIdPaymentGateway
     *
     * Retrieve the payment gateway associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCheckoutComPaymentIdPaymentGateway($checkout_com_payment_id)
    {
        $this->gETCheckoutComPaymentIdPaymentGatewayWithHttpInfo($checkout_com_payment_id);
    }

    /**
     * Operation gETCheckoutComPaymentIdPaymentGatewayWithHttpInfo
     *
     * Retrieve the payment gateway associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCheckoutComPaymentIdPaymentGatewayWithHttpInfo($checkout_com_payment_id)
    {
        $request = $this->gETCheckoutComPaymentIdPaymentGatewayRequest($checkout_com_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCheckoutComPaymentIdPaymentGatewayAsync
     *
     * Retrieve the payment gateway associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComPaymentIdPaymentGatewayAsync($checkout_com_payment_id)
    {
        return $this->gETCheckoutComPaymentIdPaymentGatewayAsyncWithHttpInfo($checkout_com_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCheckoutComPaymentIdPaymentGatewayAsyncWithHttpInfo
     *
     * Retrieve the payment gateway associated to the checkout com payment
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCheckoutComPaymentIdPaymentGatewayAsyncWithHttpInfo($checkout_com_payment_id)
    {
        $returnType = '';
        $request = $this->gETCheckoutComPaymentIdPaymentGatewayRequest($checkout_com_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCheckoutComPaymentIdPaymentGateway'
     *
     * @param  string $checkout_com_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCheckoutComPaymentIdPaymentGatewayRequest($checkout_com_payment_id)
    {
        // verify the required parameter 'checkout_com_payment_id' is set
        if ($checkout_com_payment_id === null || (is_array($checkout_com_payment_id) && count($checkout_com_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_com_payment_id when calling gETCheckoutComPaymentIdPaymentGateway'
            );
        }

        $resourcePath = '/checkout_com_payments/{checkoutComPaymentId}/payment_gateway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($checkout_com_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutComPaymentId' . '}',
                ObjectSerializer::toPathValue($checkout_com_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCouponIdPromotionRule
     *
     * Retrieve the promotion rule associated to the coupon
     *
     * @param  string $coupon_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCouponIdPromotionRule($coupon_id)
    {
        $this->gETCouponIdPromotionRuleWithHttpInfo($coupon_id);
    }

    /**
     * Operation gETCouponIdPromotionRuleWithHttpInfo
     *
     * Retrieve the promotion rule associated to the coupon
     *
     * @param  string $coupon_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCouponIdPromotionRuleWithHttpInfo($coupon_id)
    {
        $request = $this->gETCouponIdPromotionRuleRequest($coupon_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCouponIdPromotionRuleAsync
     *
     * Retrieve the promotion rule associated to the coupon
     *
     * @param  string $coupon_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCouponIdPromotionRuleAsync($coupon_id)
    {
        return $this->gETCouponIdPromotionRuleAsyncWithHttpInfo($coupon_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCouponIdPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the promotion rule associated to the coupon
     *
     * @param  string $coupon_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCouponIdPromotionRuleAsyncWithHttpInfo($coupon_id)
    {
        $returnType = '';
        $request = $this->gETCouponIdPromotionRuleRequest($coupon_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCouponIdPromotionRule'
     *
     * @param  string $coupon_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCouponIdPromotionRuleRequest($coupon_id)
    {
        // verify the required parameter 'coupon_id' is set
        if ($coupon_id === null || (is_array($coupon_id) && count($coupon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_id when calling gETCouponIdPromotionRule'
            );
        }

        $resourcePath = '/coupons/{couponId}/promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($coupon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'couponId' . '}',
                ObjectSerializer::toPathValue($coupon_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerAddressIdAddress
     *
     * Retrieve the address associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerAddressIdAddress($customer_address_id)
    {
        $this->gETCustomerAddressIdAddressWithHttpInfo($customer_address_id);
    }

    /**
     * Operation gETCustomerAddressIdAddressWithHttpInfo
     *
     * Retrieve the address associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerAddressIdAddressWithHttpInfo($customer_address_id)
    {
        $request = $this->gETCustomerAddressIdAddressRequest($customer_address_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerAddressIdAddressAsync
     *
     * Retrieve the address associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerAddressIdAddressAsync($customer_address_id)
    {
        return $this->gETCustomerAddressIdAddressAsyncWithHttpInfo($customer_address_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerAddressIdAddressAsyncWithHttpInfo
     *
     * Retrieve the address associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerAddressIdAddressAsyncWithHttpInfo($customer_address_id)
    {
        $returnType = '';
        $request = $this->gETCustomerAddressIdAddressRequest($customer_address_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerAddressIdAddress'
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerAddressIdAddressRequest($customer_address_id)
    {
        // verify the required parameter 'customer_address_id' is set
        if ($customer_address_id === null || (is_array($customer_address_id) && count($customer_address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_address_id when calling gETCustomerAddressIdAddress'
            );
        }

        $resourcePath = '/customer_addresses/{customerAddressId}/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerAddressId' . '}',
                ObjectSerializer::toPathValue($customer_address_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerAddressIdCustomer
     *
     * Retrieve the customer associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerAddressIdCustomer($customer_address_id)
    {
        $this->gETCustomerAddressIdCustomerWithHttpInfo($customer_address_id);
    }

    /**
     * Operation gETCustomerAddressIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerAddressIdCustomerWithHttpInfo($customer_address_id)
    {
        $request = $this->gETCustomerAddressIdCustomerRequest($customer_address_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerAddressIdCustomerAsync
     *
     * Retrieve the customer associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerAddressIdCustomerAsync($customer_address_id)
    {
        return $this->gETCustomerAddressIdCustomerAsyncWithHttpInfo($customer_address_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerAddressIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the customer address
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerAddressIdCustomerAsyncWithHttpInfo($customer_address_id)
    {
        $returnType = '';
        $request = $this->gETCustomerAddressIdCustomerRequest($customer_address_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerAddressIdCustomer'
     *
     * @param  string $customer_address_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerAddressIdCustomerRequest($customer_address_id)
    {
        // verify the required parameter 'customer_address_id' is set
        if ($customer_address_id === null || (is_array($customer_address_id) && count($customer_address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_address_id when calling gETCustomerAddressIdCustomer'
            );
        }

        $resourcePath = '/customer_addresses/{customerAddressId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerAddressId' . '}',
                ObjectSerializer::toPathValue($customer_address_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerIdCustomerGroup
     *
     * Retrieve the customer group associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerIdCustomerGroup($customer_id)
    {
        $this->gETCustomerIdCustomerGroupWithHttpInfo($customer_id);
    }

    /**
     * Operation gETCustomerIdCustomerGroupWithHttpInfo
     *
     * Retrieve the customer group associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerIdCustomerGroupWithHttpInfo($customer_id)
    {
        $request = $this->gETCustomerIdCustomerGroupRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerIdCustomerGroupAsync
     *
     * Retrieve the customer group associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerGroupAsync($customer_id)
    {
        return $this->gETCustomerIdCustomerGroupAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerIdCustomerGroupAsyncWithHttpInfo
     *
     * Retrieve the customer group associated to the customer
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerIdCustomerGroupAsyncWithHttpInfo($customer_id)
    {
        $returnType = '';
        $request = $this->gETCustomerIdCustomerGroupRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerIdCustomerGroup'
     *
     * @param  string $customer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerIdCustomerGroupRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling gETCustomerIdCustomerGroup'
            );
        }

        $resourcePath = '/customers/{customerId}/customer_group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerPasswordResetIdCustomer
     *
     * Retrieve the customer associated to the customer password reset
     *
     * @param  string $customer_password_reset_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerPasswordResetIdCustomer($customer_password_reset_id)
    {
        $this->gETCustomerPasswordResetIdCustomerWithHttpInfo($customer_password_reset_id);
    }

    /**
     * Operation gETCustomerPasswordResetIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the customer password reset
     *
     * @param  string $customer_password_reset_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerPasswordResetIdCustomerWithHttpInfo($customer_password_reset_id)
    {
        $request = $this->gETCustomerPasswordResetIdCustomerRequest($customer_password_reset_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerPasswordResetIdCustomerAsync
     *
     * Retrieve the customer associated to the customer password reset
     *
     * @param  string $customer_password_reset_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerPasswordResetIdCustomerAsync($customer_password_reset_id)
    {
        return $this->gETCustomerPasswordResetIdCustomerAsyncWithHttpInfo($customer_password_reset_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerPasswordResetIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the customer password reset
     *
     * @param  string $customer_password_reset_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerPasswordResetIdCustomerAsyncWithHttpInfo($customer_password_reset_id)
    {
        $returnType = '';
        $request = $this->gETCustomerPasswordResetIdCustomerRequest($customer_password_reset_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerPasswordResetIdCustomer'
     *
     * @param  string $customer_password_reset_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerPasswordResetIdCustomerRequest($customer_password_reset_id)
    {
        // verify the required parameter 'customer_password_reset_id' is set
        if ($customer_password_reset_id === null || (is_array($customer_password_reset_id) && count($customer_password_reset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_password_reset_id when calling gETCustomerPasswordResetIdCustomer'
            );
        }

        $resourcePath = '/customer_password_resets/{customerPasswordResetId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_password_reset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerPasswordResetId' . '}',
                ObjectSerializer::toPathValue($customer_password_reset_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerPaymentSourceIdCustomer
     *
     * Retrieve the customer associated to the customer payment source
     *
     * @param  string $customer_payment_source_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerPaymentSourceIdCustomer($customer_payment_source_id)
    {
        $this->gETCustomerPaymentSourceIdCustomerWithHttpInfo($customer_payment_source_id);
    }

    /**
     * Operation gETCustomerPaymentSourceIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the customer payment source
     *
     * @param  string $customer_payment_source_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerPaymentSourceIdCustomerWithHttpInfo($customer_payment_source_id)
    {
        $request = $this->gETCustomerPaymentSourceIdCustomerRequest($customer_payment_source_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerPaymentSourceIdCustomerAsync
     *
     * Retrieve the customer associated to the customer payment source
     *
     * @param  string $customer_payment_source_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerPaymentSourceIdCustomerAsync($customer_payment_source_id)
    {
        return $this->gETCustomerPaymentSourceIdCustomerAsyncWithHttpInfo($customer_payment_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerPaymentSourceIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the customer payment source
     *
     * @param  string $customer_payment_source_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerPaymentSourceIdCustomerAsyncWithHttpInfo($customer_payment_source_id)
    {
        $returnType = '';
        $request = $this->gETCustomerPaymentSourceIdCustomerRequest($customer_payment_source_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerPaymentSourceIdCustomer'
     *
     * @param  string $customer_payment_source_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerPaymentSourceIdCustomerRequest($customer_payment_source_id)
    {
        // verify the required parameter 'customer_payment_source_id' is set
        if ($customer_payment_source_id === null || (is_array($customer_payment_source_id) && count($customer_payment_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_payment_source_id when calling gETCustomerPaymentSourceIdCustomer'
            );
        }

        $resourcePath = '/customer_payment_sources/{customerPaymentSourceId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_payment_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerPaymentSourceId' . '}',
                ObjectSerializer::toPathValue($customer_payment_source_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETCustomerSubscriptionIdCustomer
     *
     * Retrieve the customer associated to the customer subscription
     *
     * @param  string $customer_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETCustomerSubscriptionIdCustomer($customer_subscription_id)
    {
        $this->gETCustomerSubscriptionIdCustomerWithHttpInfo($customer_subscription_id);
    }

    /**
     * Operation gETCustomerSubscriptionIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the customer subscription
     *
     * @param  string $customer_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETCustomerSubscriptionIdCustomerWithHttpInfo($customer_subscription_id)
    {
        $request = $this->gETCustomerSubscriptionIdCustomerRequest($customer_subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETCustomerSubscriptionIdCustomerAsync
     *
     * Retrieve the customer associated to the customer subscription
     *
     * @param  string $customer_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerSubscriptionIdCustomerAsync($customer_subscription_id)
    {
        return $this->gETCustomerSubscriptionIdCustomerAsyncWithHttpInfo($customer_subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETCustomerSubscriptionIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the customer subscription
     *
     * @param  string $customer_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETCustomerSubscriptionIdCustomerAsyncWithHttpInfo($customer_subscription_id)
    {
        $returnType = '';
        $request = $this->gETCustomerSubscriptionIdCustomerRequest($customer_subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETCustomerSubscriptionIdCustomer'
     *
     * @param  string $customer_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETCustomerSubscriptionIdCustomerRequest($customer_subscription_id)
    {
        // verify the required parameter 'customer_subscription_id' is set
        if ($customer_subscription_id === null || (is_array($customer_subscription_id) && count($customer_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_subscription_id when calling gETCustomerSubscriptionIdCustomer'
            );
        }

        $resourcePath = '/customer_subscriptions/{customerSubscriptionId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerSubscriptionId' . '}',
                ObjectSerializer::toPathValue($customer_subscription_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETDeliveryLeadTimeIdShippingMethod
     *
     * Retrieve the shipping method associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETDeliveryLeadTimeIdShippingMethod($delivery_lead_time_id)
    {
        $this->gETDeliveryLeadTimeIdShippingMethodWithHttpInfo($delivery_lead_time_id);
    }

    /**
     * Operation gETDeliveryLeadTimeIdShippingMethodWithHttpInfo
     *
     * Retrieve the shipping method associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETDeliveryLeadTimeIdShippingMethodWithHttpInfo($delivery_lead_time_id)
    {
        $request = $this->gETDeliveryLeadTimeIdShippingMethodRequest($delivery_lead_time_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETDeliveryLeadTimeIdShippingMethodAsync
     *
     * Retrieve the shipping method associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETDeliveryLeadTimeIdShippingMethodAsync($delivery_lead_time_id)
    {
        return $this->gETDeliveryLeadTimeIdShippingMethodAsyncWithHttpInfo($delivery_lead_time_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETDeliveryLeadTimeIdShippingMethodAsyncWithHttpInfo
     *
     * Retrieve the shipping method associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETDeliveryLeadTimeIdShippingMethodAsyncWithHttpInfo($delivery_lead_time_id)
    {
        $returnType = '';
        $request = $this->gETDeliveryLeadTimeIdShippingMethodRequest($delivery_lead_time_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETDeliveryLeadTimeIdShippingMethod'
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETDeliveryLeadTimeIdShippingMethodRequest($delivery_lead_time_id)
    {
        // verify the required parameter 'delivery_lead_time_id' is set
        if ($delivery_lead_time_id === null || (is_array($delivery_lead_time_id) && count($delivery_lead_time_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_lead_time_id when calling gETDeliveryLeadTimeIdShippingMethod'
            );
        }

        $resourcePath = '/delivery_lead_times/{deliveryLeadTimeId}/shipping_method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_lead_time_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryLeadTimeId' . '}',
                ObjectSerializer::toPathValue($delivery_lead_time_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETDeliveryLeadTimeIdStockLocation
     *
     * Retrieve the stock location associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETDeliveryLeadTimeIdStockLocation($delivery_lead_time_id)
    {
        $this->gETDeliveryLeadTimeIdStockLocationWithHttpInfo($delivery_lead_time_id);
    }

    /**
     * Operation gETDeliveryLeadTimeIdStockLocationWithHttpInfo
     *
     * Retrieve the stock location associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETDeliveryLeadTimeIdStockLocationWithHttpInfo($delivery_lead_time_id)
    {
        $request = $this->gETDeliveryLeadTimeIdStockLocationRequest($delivery_lead_time_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETDeliveryLeadTimeIdStockLocationAsync
     *
     * Retrieve the stock location associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETDeliveryLeadTimeIdStockLocationAsync($delivery_lead_time_id)
    {
        return $this->gETDeliveryLeadTimeIdStockLocationAsyncWithHttpInfo($delivery_lead_time_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETDeliveryLeadTimeIdStockLocationAsyncWithHttpInfo
     *
     * Retrieve the stock location associated to the delivery lead time
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETDeliveryLeadTimeIdStockLocationAsyncWithHttpInfo($delivery_lead_time_id)
    {
        $returnType = '';
        $request = $this->gETDeliveryLeadTimeIdStockLocationRequest($delivery_lead_time_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETDeliveryLeadTimeIdStockLocation'
     *
     * @param  string $delivery_lead_time_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETDeliveryLeadTimeIdStockLocationRequest($delivery_lead_time_id)
    {
        // verify the required parameter 'delivery_lead_time_id' is set
        if ($delivery_lead_time_id === null || (is_array($delivery_lead_time_id) && count($delivery_lead_time_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_lead_time_id when calling gETDeliveryLeadTimeIdStockLocation'
            );
        }

        $resourcePath = '/delivery_lead_times/{deliveryLeadTimeId}/stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_lead_time_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryLeadTimeId' . '}',
                ObjectSerializer::toPathValue($delivery_lead_time_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalPaymentIdOrder
     *
     * Retrieve the order associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalPaymentIdOrder($external_payment_id)
    {
        $this->gETExternalPaymentIdOrderWithHttpInfo($external_payment_id);
    }

    /**
     * Operation gETExternalPaymentIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalPaymentIdOrderWithHttpInfo($external_payment_id)
    {
        $request = $this->gETExternalPaymentIdOrderRequest($external_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalPaymentIdOrderAsync
     *
     * Retrieve the order associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPaymentIdOrderAsync($external_payment_id)
    {
        return $this->gETExternalPaymentIdOrderAsyncWithHttpInfo($external_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalPaymentIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPaymentIdOrderAsyncWithHttpInfo($external_payment_id)
    {
        $returnType = '';
        $request = $this->gETExternalPaymentIdOrderRequest($external_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalPaymentIdOrder'
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalPaymentIdOrderRequest($external_payment_id)
    {
        // verify the required parameter 'external_payment_id' is set
        if ($external_payment_id === null || (is_array($external_payment_id) && count($external_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_payment_id when calling gETExternalPaymentIdOrder'
            );
        }

        $resourcePath = '/external_payments/{externalPaymentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPaymentId' . '}',
                ObjectSerializer::toPathValue($external_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalPaymentIdPaymentGateway
     *
     * Retrieve the payment gateway associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalPaymentIdPaymentGateway($external_payment_id)
    {
        $this->gETExternalPaymentIdPaymentGatewayWithHttpInfo($external_payment_id);
    }

    /**
     * Operation gETExternalPaymentIdPaymentGatewayWithHttpInfo
     *
     * Retrieve the payment gateway associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalPaymentIdPaymentGatewayWithHttpInfo($external_payment_id)
    {
        $request = $this->gETExternalPaymentIdPaymentGatewayRequest($external_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalPaymentIdPaymentGatewayAsync
     *
     * Retrieve the payment gateway associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPaymentIdPaymentGatewayAsync($external_payment_id)
    {
        return $this->gETExternalPaymentIdPaymentGatewayAsyncWithHttpInfo($external_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalPaymentIdPaymentGatewayAsyncWithHttpInfo
     *
     * Retrieve the payment gateway associated to the external payment
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPaymentIdPaymentGatewayAsyncWithHttpInfo($external_payment_id)
    {
        $returnType = '';
        $request = $this->gETExternalPaymentIdPaymentGatewayRequest($external_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalPaymentIdPaymentGateway'
     *
     * @param  string $external_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalPaymentIdPaymentGatewayRequest($external_payment_id)
    {
        // verify the required parameter 'external_payment_id' is set
        if ($external_payment_id === null || (is_array($external_payment_id) && count($external_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_payment_id when calling gETExternalPaymentIdPaymentGateway'
            );
        }

        $resourcePath = '/external_payments/{externalPaymentId}/payment_gateway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPaymentId' . '}',
                ObjectSerializer::toPathValue($external_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalPromotionIdCouponCodesPromotionRule
     *
     * Retrieve the coupon codes promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalPromotionIdCouponCodesPromotionRule($external_promotion_id)
    {
        $this->gETExternalPromotionIdCouponCodesPromotionRuleWithHttpInfo($external_promotion_id);
    }

    /**
     * Operation gETExternalPromotionIdCouponCodesPromotionRuleWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalPromotionIdCouponCodesPromotionRuleWithHttpInfo($external_promotion_id)
    {
        $request = $this->gETExternalPromotionIdCouponCodesPromotionRuleRequest($external_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalPromotionIdCouponCodesPromotionRuleAsync
     *
     * Retrieve the coupon codes promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdCouponCodesPromotionRuleAsync($external_promotion_id)
    {
        return $this->gETExternalPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($external_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($external_promotion_id)
    {
        $returnType = '';
        $request = $this->gETExternalPromotionIdCouponCodesPromotionRuleRequest($external_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalPromotionIdCouponCodesPromotionRule'
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalPromotionIdCouponCodesPromotionRuleRequest($external_promotion_id)
    {
        // verify the required parameter 'external_promotion_id' is set
        if ($external_promotion_id === null || (is_array($external_promotion_id) && count($external_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_promotion_id when calling gETExternalPromotionIdCouponCodesPromotionRule'
            );
        }

        $resourcePath = '/external_promotions/{externalPromotionId}/coupon_codes_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPromotionId' . '}',
                ObjectSerializer::toPathValue($external_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalPromotionIdMarket
     *
     * Retrieve the market associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalPromotionIdMarket($external_promotion_id)
    {
        $this->gETExternalPromotionIdMarketWithHttpInfo($external_promotion_id);
    }

    /**
     * Operation gETExternalPromotionIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalPromotionIdMarketWithHttpInfo($external_promotion_id)
    {
        $request = $this->gETExternalPromotionIdMarketRequest($external_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalPromotionIdMarketAsync
     *
     * Retrieve the market associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdMarketAsync($external_promotion_id)
    {
        return $this->gETExternalPromotionIdMarketAsyncWithHttpInfo($external_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalPromotionIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdMarketAsyncWithHttpInfo($external_promotion_id)
    {
        $returnType = '';
        $request = $this->gETExternalPromotionIdMarketRequest($external_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalPromotionIdMarket'
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalPromotionIdMarketRequest($external_promotion_id)
    {
        // verify the required parameter 'external_promotion_id' is set
        if ($external_promotion_id === null || (is_array($external_promotion_id) && count($external_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_promotion_id when calling gETExternalPromotionIdMarket'
            );
        }

        $resourcePath = '/external_promotions/{externalPromotionId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPromotionId' . '}',
                ObjectSerializer::toPathValue($external_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalPromotionIdOrderAmountPromotionRule
     *
     * Retrieve the order amount promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalPromotionIdOrderAmountPromotionRule($external_promotion_id)
    {
        $this->gETExternalPromotionIdOrderAmountPromotionRuleWithHttpInfo($external_promotion_id);
    }

    /**
     * Operation gETExternalPromotionIdOrderAmountPromotionRuleWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalPromotionIdOrderAmountPromotionRuleWithHttpInfo($external_promotion_id)
    {
        $request = $this->gETExternalPromotionIdOrderAmountPromotionRuleRequest($external_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalPromotionIdOrderAmountPromotionRuleAsync
     *
     * Retrieve the order amount promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdOrderAmountPromotionRuleAsync($external_promotion_id)
    {
        return $this->gETExternalPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($external_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($external_promotion_id)
    {
        $returnType = '';
        $request = $this->gETExternalPromotionIdOrderAmountPromotionRuleRequest($external_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalPromotionIdOrderAmountPromotionRule'
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalPromotionIdOrderAmountPromotionRuleRequest($external_promotion_id)
    {
        // verify the required parameter 'external_promotion_id' is set
        if ($external_promotion_id === null || (is_array($external_promotion_id) && count($external_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_promotion_id when calling gETExternalPromotionIdOrderAmountPromotionRule'
            );
        }

        $resourcePath = '/external_promotions/{externalPromotionId}/order_amount_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPromotionId' . '}',
                ObjectSerializer::toPathValue($external_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETExternalPromotionIdSkuListPromotionRule
     *
     * Retrieve the sku list promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETExternalPromotionIdSkuListPromotionRule($external_promotion_id)
    {
        $this->gETExternalPromotionIdSkuListPromotionRuleWithHttpInfo($external_promotion_id);
    }

    /**
     * Operation gETExternalPromotionIdSkuListPromotionRuleWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETExternalPromotionIdSkuListPromotionRuleWithHttpInfo($external_promotion_id)
    {
        $request = $this->gETExternalPromotionIdSkuListPromotionRuleRequest($external_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETExternalPromotionIdSkuListPromotionRuleAsync
     *
     * Retrieve the sku list promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdSkuListPromotionRuleAsync($external_promotion_id)
    {
        return $this->gETExternalPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($external_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETExternalPromotionIdSkuListPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the external promotion
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETExternalPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($external_promotion_id)
    {
        $returnType = '';
        $request = $this->gETExternalPromotionIdSkuListPromotionRuleRequest($external_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETExternalPromotionIdSkuListPromotionRule'
     *
     * @param  string $external_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETExternalPromotionIdSkuListPromotionRuleRequest($external_promotion_id)
    {
        // verify the required parameter 'external_promotion_id' is set
        if ($external_promotion_id === null || (is_array($external_promotion_id) && count($external_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_promotion_id when calling gETExternalPromotionIdSkuListPromotionRule'
            );
        }

        $resourcePath = '/external_promotions/{externalPromotionId}/sku_list_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPromotionId' . '}',
                ObjectSerializer::toPathValue($external_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFixedAmountPromotionIdCouponCodesPromotionRule
     *
     * Retrieve the coupon codes promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFixedAmountPromotionIdCouponCodesPromotionRule($fixed_amount_promotion_id)
    {
        $this->gETFixedAmountPromotionIdCouponCodesPromotionRuleWithHttpInfo($fixed_amount_promotion_id);
    }

    /**
     * Operation gETFixedAmountPromotionIdCouponCodesPromotionRuleWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFixedAmountPromotionIdCouponCodesPromotionRuleWithHttpInfo($fixed_amount_promotion_id)
    {
        $request = $this->gETFixedAmountPromotionIdCouponCodesPromotionRuleRequest($fixed_amount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFixedAmountPromotionIdCouponCodesPromotionRuleAsync
     *
     * Retrieve the coupon codes promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdCouponCodesPromotionRuleAsync($fixed_amount_promotion_id)
    {
        return $this->gETFixedAmountPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($fixed_amount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFixedAmountPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($fixed_amount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFixedAmountPromotionIdCouponCodesPromotionRuleRequest($fixed_amount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFixedAmountPromotionIdCouponCodesPromotionRule'
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFixedAmountPromotionIdCouponCodesPromotionRuleRequest($fixed_amount_promotion_id)
    {
        // verify the required parameter 'fixed_amount_promotion_id' is set
        if ($fixed_amount_promotion_id === null || (is_array($fixed_amount_promotion_id) && count($fixed_amount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fixed_amount_promotion_id when calling gETFixedAmountPromotionIdCouponCodesPromotionRule'
            );
        }

        $resourcePath = '/fixed_amount_promotions/{fixedAmountPromotionId}/coupon_codes_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fixed_amount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fixedAmountPromotionId' . '}',
                ObjectSerializer::toPathValue($fixed_amount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFixedAmountPromotionIdMarket
     *
     * Retrieve the market associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFixedAmountPromotionIdMarket($fixed_amount_promotion_id)
    {
        $this->gETFixedAmountPromotionIdMarketWithHttpInfo($fixed_amount_promotion_id);
    }

    /**
     * Operation gETFixedAmountPromotionIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFixedAmountPromotionIdMarketWithHttpInfo($fixed_amount_promotion_id)
    {
        $request = $this->gETFixedAmountPromotionIdMarketRequest($fixed_amount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFixedAmountPromotionIdMarketAsync
     *
     * Retrieve the market associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdMarketAsync($fixed_amount_promotion_id)
    {
        return $this->gETFixedAmountPromotionIdMarketAsyncWithHttpInfo($fixed_amount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFixedAmountPromotionIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdMarketAsyncWithHttpInfo($fixed_amount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFixedAmountPromotionIdMarketRequest($fixed_amount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFixedAmountPromotionIdMarket'
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFixedAmountPromotionIdMarketRequest($fixed_amount_promotion_id)
    {
        // verify the required parameter 'fixed_amount_promotion_id' is set
        if ($fixed_amount_promotion_id === null || (is_array($fixed_amount_promotion_id) && count($fixed_amount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fixed_amount_promotion_id when calling gETFixedAmountPromotionIdMarket'
            );
        }

        $resourcePath = '/fixed_amount_promotions/{fixedAmountPromotionId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fixed_amount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fixedAmountPromotionId' . '}',
                ObjectSerializer::toPathValue($fixed_amount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFixedAmountPromotionIdOrderAmountPromotionRule
     *
     * Retrieve the order amount promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFixedAmountPromotionIdOrderAmountPromotionRule($fixed_amount_promotion_id)
    {
        $this->gETFixedAmountPromotionIdOrderAmountPromotionRuleWithHttpInfo($fixed_amount_promotion_id);
    }

    /**
     * Operation gETFixedAmountPromotionIdOrderAmountPromotionRuleWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFixedAmountPromotionIdOrderAmountPromotionRuleWithHttpInfo($fixed_amount_promotion_id)
    {
        $request = $this->gETFixedAmountPromotionIdOrderAmountPromotionRuleRequest($fixed_amount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFixedAmountPromotionIdOrderAmountPromotionRuleAsync
     *
     * Retrieve the order amount promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdOrderAmountPromotionRuleAsync($fixed_amount_promotion_id)
    {
        return $this->gETFixedAmountPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($fixed_amount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFixedAmountPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($fixed_amount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFixedAmountPromotionIdOrderAmountPromotionRuleRequest($fixed_amount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFixedAmountPromotionIdOrderAmountPromotionRule'
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFixedAmountPromotionIdOrderAmountPromotionRuleRequest($fixed_amount_promotion_id)
    {
        // verify the required parameter 'fixed_amount_promotion_id' is set
        if ($fixed_amount_promotion_id === null || (is_array($fixed_amount_promotion_id) && count($fixed_amount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fixed_amount_promotion_id when calling gETFixedAmountPromotionIdOrderAmountPromotionRule'
            );
        }

        $resourcePath = '/fixed_amount_promotions/{fixedAmountPromotionId}/order_amount_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fixed_amount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fixedAmountPromotionId' . '}',
                ObjectSerializer::toPathValue($fixed_amount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFixedAmountPromotionIdSkuListPromotionRule
     *
     * Retrieve the sku list promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFixedAmountPromotionIdSkuListPromotionRule($fixed_amount_promotion_id)
    {
        $this->gETFixedAmountPromotionIdSkuListPromotionRuleWithHttpInfo($fixed_amount_promotion_id);
    }

    /**
     * Operation gETFixedAmountPromotionIdSkuListPromotionRuleWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFixedAmountPromotionIdSkuListPromotionRuleWithHttpInfo($fixed_amount_promotion_id)
    {
        $request = $this->gETFixedAmountPromotionIdSkuListPromotionRuleRequest($fixed_amount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFixedAmountPromotionIdSkuListPromotionRuleAsync
     *
     * Retrieve the sku list promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdSkuListPromotionRuleAsync($fixed_amount_promotion_id)
    {
        return $this->gETFixedAmountPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($fixed_amount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFixedAmountPromotionIdSkuListPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the fixed amount promotion
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFixedAmountPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($fixed_amount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFixedAmountPromotionIdSkuListPromotionRuleRequest($fixed_amount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFixedAmountPromotionIdSkuListPromotionRule'
     *
     * @param  string $fixed_amount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFixedAmountPromotionIdSkuListPromotionRuleRequest($fixed_amount_promotion_id)
    {
        // verify the required parameter 'fixed_amount_promotion_id' is set
        if ($fixed_amount_promotion_id === null || (is_array($fixed_amount_promotion_id) && count($fixed_amount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fixed_amount_promotion_id when calling gETFixedAmountPromotionIdSkuListPromotionRule'
            );
        }

        $resourcePath = '/fixed_amount_promotions/{fixedAmountPromotionId}/sku_list_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fixed_amount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fixedAmountPromotionId' . '}',
                ObjectSerializer::toPathValue($fixed_amount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFreeShippingPromotionIdCouponCodesPromotionRule
     *
     * Retrieve the coupon codes promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFreeShippingPromotionIdCouponCodesPromotionRule($free_shipping_promotion_id)
    {
        $this->gETFreeShippingPromotionIdCouponCodesPromotionRuleWithHttpInfo($free_shipping_promotion_id);
    }

    /**
     * Operation gETFreeShippingPromotionIdCouponCodesPromotionRuleWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFreeShippingPromotionIdCouponCodesPromotionRuleWithHttpInfo($free_shipping_promotion_id)
    {
        $request = $this->gETFreeShippingPromotionIdCouponCodesPromotionRuleRequest($free_shipping_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFreeShippingPromotionIdCouponCodesPromotionRuleAsync
     *
     * Retrieve the coupon codes promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdCouponCodesPromotionRuleAsync($free_shipping_promotion_id)
    {
        return $this->gETFreeShippingPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($free_shipping_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFreeShippingPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($free_shipping_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFreeShippingPromotionIdCouponCodesPromotionRuleRequest($free_shipping_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFreeShippingPromotionIdCouponCodesPromotionRule'
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFreeShippingPromotionIdCouponCodesPromotionRuleRequest($free_shipping_promotion_id)
    {
        // verify the required parameter 'free_shipping_promotion_id' is set
        if ($free_shipping_promotion_id === null || (is_array($free_shipping_promotion_id) && count($free_shipping_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_shipping_promotion_id when calling gETFreeShippingPromotionIdCouponCodesPromotionRule'
            );
        }

        $resourcePath = '/free_shipping_promotions/{freeShippingPromotionId}/coupon_codes_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($free_shipping_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'freeShippingPromotionId' . '}',
                ObjectSerializer::toPathValue($free_shipping_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFreeShippingPromotionIdMarket
     *
     * Retrieve the market associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFreeShippingPromotionIdMarket($free_shipping_promotion_id)
    {
        $this->gETFreeShippingPromotionIdMarketWithHttpInfo($free_shipping_promotion_id);
    }

    /**
     * Operation gETFreeShippingPromotionIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFreeShippingPromotionIdMarketWithHttpInfo($free_shipping_promotion_id)
    {
        $request = $this->gETFreeShippingPromotionIdMarketRequest($free_shipping_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFreeShippingPromotionIdMarketAsync
     *
     * Retrieve the market associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdMarketAsync($free_shipping_promotion_id)
    {
        return $this->gETFreeShippingPromotionIdMarketAsyncWithHttpInfo($free_shipping_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFreeShippingPromotionIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdMarketAsyncWithHttpInfo($free_shipping_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFreeShippingPromotionIdMarketRequest($free_shipping_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFreeShippingPromotionIdMarket'
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFreeShippingPromotionIdMarketRequest($free_shipping_promotion_id)
    {
        // verify the required parameter 'free_shipping_promotion_id' is set
        if ($free_shipping_promotion_id === null || (is_array($free_shipping_promotion_id) && count($free_shipping_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_shipping_promotion_id when calling gETFreeShippingPromotionIdMarket'
            );
        }

        $resourcePath = '/free_shipping_promotions/{freeShippingPromotionId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($free_shipping_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'freeShippingPromotionId' . '}',
                ObjectSerializer::toPathValue($free_shipping_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFreeShippingPromotionIdOrderAmountPromotionRule
     *
     * Retrieve the order amount promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFreeShippingPromotionIdOrderAmountPromotionRule($free_shipping_promotion_id)
    {
        $this->gETFreeShippingPromotionIdOrderAmountPromotionRuleWithHttpInfo($free_shipping_promotion_id);
    }

    /**
     * Operation gETFreeShippingPromotionIdOrderAmountPromotionRuleWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFreeShippingPromotionIdOrderAmountPromotionRuleWithHttpInfo($free_shipping_promotion_id)
    {
        $request = $this->gETFreeShippingPromotionIdOrderAmountPromotionRuleRequest($free_shipping_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFreeShippingPromotionIdOrderAmountPromotionRuleAsync
     *
     * Retrieve the order amount promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdOrderAmountPromotionRuleAsync($free_shipping_promotion_id)
    {
        return $this->gETFreeShippingPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($free_shipping_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFreeShippingPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($free_shipping_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFreeShippingPromotionIdOrderAmountPromotionRuleRequest($free_shipping_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFreeShippingPromotionIdOrderAmountPromotionRule'
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFreeShippingPromotionIdOrderAmountPromotionRuleRequest($free_shipping_promotion_id)
    {
        // verify the required parameter 'free_shipping_promotion_id' is set
        if ($free_shipping_promotion_id === null || (is_array($free_shipping_promotion_id) && count($free_shipping_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_shipping_promotion_id when calling gETFreeShippingPromotionIdOrderAmountPromotionRule'
            );
        }

        $resourcePath = '/free_shipping_promotions/{freeShippingPromotionId}/order_amount_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($free_shipping_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'freeShippingPromotionId' . '}',
                ObjectSerializer::toPathValue($free_shipping_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETFreeShippingPromotionIdSkuListPromotionRule
     *
     * Retrieve the sku list promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETFreeShippingPromotionIdSkuListPromotionRule($free_shipping_promotion_id)
    {
        $this->gETFreeShippingPromotionIdSkuListPromotionRuleWithHttpInfo($free_shipping_promotion_id);
    }

    /**
     * Operation gETFreeShippingPromotionIdSkuListPromotionRuleWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETFreeShippingPromotionIdSkuListPromotionRuleWithHttpInfo($free_shipping_promotion_id)
    {
        $request = $this->gETFreeShippingPromotionIdSkuListPromotionRuleRequest($free_shipping_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETFreeShippingPromotionIdSkuListPromotionRuleAsync
     *
     * Retrieve the sku list promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdSkuListPromotionRuleAsync($free_shipping_promotion_id)
    {
        return $this->gETFreeShippingPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($free_shipping_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETFreeShippingPromotionIdSkuListPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the free shipping promotion
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETFreeShippingPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($free_shipping_promotion_id)
    {
        $returnType = '';
        $request = $this->gETFreeShippingPromotionIdSkuListPromotionRuleRequest($free_shipping_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETFreeShippingPromotionIdSkuListPromotionRule'
     *
     * @param  string $free_shipping_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETFreeShippingPromotionIdSkuListPromotionRuleRequest($free_shipping_promotion_id)
    {
        // verify the required parameter 'free_shipping_promotion_id' is set
        if ($free_shipping_promotion_id === null || (is_array($free_shipping_promotion_id) && count($free_shipping_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $free_shipping_promotion_id when calling gETFreeShippingPromotionIdSkuListPromotionRule'
            );
        }

        $resourcePath = '/free_shipping_promotions/{freeShippingPromotionId}/sku_list_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($free_shipping_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'freeShippingPromotionId' . '}',
                ObjectSerializer::toPathValue($free_shipping_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETGiftCardIdGiftCardRecipient
     *
     * Retrieve the gift card recipient associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETGiftCardIdGiftCardRecipient($gift_card_id)
    {
        $this->gETGiftCardIdGiftCardRecipientWithHttpInfo($gift_card_id);
    }

    /**
     * Operation gETGiftCardIdGiftCardRecipientWithHttpInfo
     *
     * Retrieve the gift card recipient associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETGiftCardIdGiftCardRecipientWithHttpInfo($gift_card_id)
    {
        $request = $this->gETGiftCardIdGiftCardRecipientRequest($gift_card_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETGiftCardIdGiftCardRecipientAsync
     *
     * Retrieve the gift card recipient associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardIdGiftCardRecipientAsync($gift_card_id)
    {
        return $this->gETGiftCardIdGiftCardRecipientAsyncWithHttpInfo($gift_card_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETGiftCardIdGiftCardRecipientAsyncWithHttpInfo
     *
     * Retrieve the gift card recipient associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardIdGiftCardRecipientAsyncWithHttpInfo($gift_card_id)
    {
        $returnType = '';
        $request = $this->gETGiftCardIdGiftCardRecipientRequest($gift_card_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETGiftCardIdGiftCardRecipient'
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETGiftCardIdGiftCardRecipientRequest($gift_card_id)
    {
        // verify the required parameter 'gift_card_id' is set
        if ($gift_card_id === null || (is_array($gift_card_id) && count($gift_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gift_card_id when calling gETGiftCardIdGiftCardRecipient'
            );
        }

        $resourcePath = '/gift_cards/{giftCardId}/gift_card_recipient';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($gift_card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'giftCardId' . '}',
                ObjectSerializer::toPathValue($gift_card_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETGiftCardIdMarket
     *
     * Retrieve the market associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETGiftCardIdMarket($gift_card_id)
    {
        $this->gETGiftCardIdMarketWithHttpInfo($gift_card_id);
    }

    /**
     * Operation gETGiftCardIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETGiftCardIdMarketWithHttpInfo($gift_card_id)
    {
        $request = $this->gETGiftCardIdMarketRequest($gift_card_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETGiftCardIdMarketAsync
     *
     * Retrieve the market associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardIdMarketAsync($gift_card_id)
    {
        return $this->gETGiftCardIdMarketAsyncWithHttpInfo($gift_card_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETGiftCardIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the gift card
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardIdMarketAsyncWithHttpInfo($gift_card_id)
    {
        $returnType = '';
        $request = $this->gETGiftCardIdMarketRequest($gift_card_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETGiftCardIdMarket'
     *
     * @param  string $gift_card_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETGiftCardIdMarketRequest($gift_card_id)
    {
        // verify the required parameter 'gift_card_id' is set
        if ($gift_card_id === null || (is_array($gift_card_id) && count($gift_card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gift_card_id when calling gETGiftCardIdMarket'
            );
        }

        $resourcePath = '/gift_cards/{giftCardId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($gift_card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'giftCardId' . '}',
                ObjectSerializer::toPathValue($gift_card_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETGiftCardRecipientIdCustomer
     *
     * Retrieve the customer associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETGiftCardRecipientIdCustomer($gift_card_recipient_id)
    {
        $this->gETGiftCardRecipientIdCustomerWithHttpInfo($gift_card_recipient_id);
    }

    /**
     * Operation gETGiftCardRecipientIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETGiftCardRecipientIdCustomerWithHttpInfo($gift_card_recipient_id)
    {
        $request = $this->gETGiftCardRecipientIdCustomerRequest($gift_card_recipient_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETGiftCardRecipientIdCustomerAsync
     *
     * Retrieve the customer associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardRecipientIdCustomerAsync($gift_card_recipient_id)
    {
        return $this->gETGiftCardRecipientIdCustomerAsyncWithHttpInfo($gift_card_recipient_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETGiftCardRecipientIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the gift card recipient
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETGiftCardRecipientIdCustomerAsyncWithHttpInfo($gift_card_recipient_id)
    {
        $returnType = '';
        $request = $this->gETGiftCardRecipientIdCustomerRequest($gift_card_recipient_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETGiftCardRecipientIdCustomer'
     *
     * @param  string $gift_card_recipient_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETGiftCardRecipientIdCustomerRequest($gift_card_recipient_id)
    {
        // verify the required parameter 'gift_card_recipient_id' is set
        if ($gift_card_recipient_id === null || (is_array($gift_card_recipient_id) && count($gift_card_recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gift_card_recipient_id when calling gETGiftCardRecipientIdCustomer'
            );
        }

        $resourcePath = '/gift_card_recipients/{giftCardRecipientId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($gift_card_recipient_id !== null) {
            $resourcePath = str_replace(
                '{' . 'giftCardRecipientId' . '}',
                ObjectSerializer::toPathValue($gift_card_recipient_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInStockSubscriptionIdCustomer
     *
     * Retrieve the customer associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInStockSubscriptionIdCustomer($in_stock_subscription_id)
    {
        $this->gETInStockSubscriptionIdCustomerWithHttpInfo($in_stock_subscription_id);
    }

    /**
     * Operation gETInStockSubscriptionIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInStockSubscriptionIdCustomerWithHttpInfo($in_stock_subscription_id)
    {
        $request = $this->gETInStockSubscriptionIdCustomerRequest($in_stock_subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInStockSubscriptionIdCustomerAsync
     *
     * Retrieve the customer associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInStockSubscriptionIdCustomerAsync($in_stock_subscription_id)
    {
        return $this->gETInStockSubscriptionIdCustomerAsyncWithHttpInfo($in_stock_subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInStockSubscriptionIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInStockSubscriptionIdCustomerAsyncWithHttpInfo($in_stock_subscription_id)
    {
        $returnType = '';
        $request = $this->gETInStockSubscriptionIdCustomerRequest($in_stock_subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInStockSubscriptionIdCustomer'
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInStockSubscriptionIdCustomerRequest($in_stock_subscription_id)
    {
        // verify the required parameter 'in_stock_subscription_id' is set
        if ($in_stock_subscription_id === null || (is_array($in_stock_subscription_id) && count($in_stock_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $in_stock_subscription_id when calling gETInStockSubscriptionIdCustomer'
            );
        }

        $resourcePath = '/in_stock_subscriptions/{inStockSubscriptionId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($in_stock_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inStockSubscriptionId' . '}',
                ObjectSerializer::toPathValue($in_stock_subscription_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInStockSubscriptionIdMarket
     *
     * Retrieve the market associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInStockSubscriptionIdMarket($in_stock_subscription_id)
    {
        $this->gETInStockSubscriptionIdMarketWithHttpInfo($in_stock_subscription_id);
    }

    /**
     * Operation gETInStockSubscriptionIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInStockSubscriptionIdMarketWithHttpInfo($in_stock_subscription_id)
    {
        $request = $this->gETInStockSubscriptionIdMarketRequest($in_stock_subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInStockSubscriptionIdMarketAsync
     *
     * Retrieve the market associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInStockSubscriptionIdMarketAsync($in_stock_subscription_id)
    {
        return $this->gETInStockSubscriptionIdMarketAsyncWithHttpInfo($in_stock_subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInStockSubscriptionIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInStockSubscriptionIdMarketAsyncWithHttpInfo($in_stock_subscription_id)
    {
        $returnType = '';
        $request = $this->gETInStockSubscriptionIdMarketRequest($in_stock_subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInStockSubscriptionIdMarket'
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInStockSubscriptionIdMarketRequest($in_stock_subscription_id)
    {
        // verify the required parameter 'in_stock_subscription_id' is set
        if ($in_stock_subscription_id === null || (is_array($in_stock_subscription_id) && count($in_stock_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $in_stock_subscription_id when calling gETInStockSubscriptionIdMarket'
            );
        }

        $resourcePath = '/in_stock_subscriptions/{inStockSubscriptionId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($in_stock_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inStockSubscriptionId' . '}',
                ObjectSerializer::toPathValue($in_stock_subscription_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInStockSubscriptionIdSku
     *
     * Retrieve the sku associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInStockSubscriptionIdSku($in_stock_subscription_id)
    {
        $this->gETInStockSubscriptionIdSkuWithHttpInfo($in_stock_subscription_id);
    }

    /**
     * Operation gETInStockSubscriptionIdSkuWithHttpInfo
     *
     * Retrieve the sku associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInStockSubscriptionIdSkuWithHttpInfo($in_stock_subscription_id)
    {
        $request = $this->gETInStockSubscriptionIdSkuRequest($in_stock_subscription_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInStockSubscriptionIdSkuAsync
     *
     * Retrieve the sku associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInStockSubscriptionIdSkuAsync($in_stock_subscription_id)
    {
        return $this->gETInStockSubscriptionIdSkuAsyncWithHttpInfo($in_stock_subscription_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInStockSubscriptionIdSkuAsyncWithHttpInfo
     *
     * Retrieve the sku associated to the in stock subscription
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInStockSubscriptionIdSkuAsyncWithHttpInfo($in_stock_subscription_id)
    {
        $returnType = '';
        $request = $this->gETInStockSubscriptionIdSkuRequest($in_stock_subscription_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInStockSubscriptionIdSku'
     *
     * @param  string $in_stock_subscription_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInStockSubscriptionIdSkuRequest($in_stock_subscription_id)
    {
        // verify the required parameter 'in_stock_subscription_id' is set
        if ($in_stock_subscription_id === null || (is_array($in_stock_subscription_id) && count($in_stock_subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $in_stock_subscription_id when calling gETInStockSubscriptionIdSku'
            );
        }

        $resourcePath = '/in_stock_subscriptions/{inStockSubscriptionId}/sku';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($in_stock_subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inStockSubscriptionId' . '}',
                ObjectSerializer::toPathValue($in_stock_subscription_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryReturnLocationIdInventoryModel
     *
     * Retrieve the inventory model associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryReturnLocationIdInventoryModel($inventory_return_location_id)
    {
        $this->gETInventoryReturnLocationIdInventoryModelWithHttpInfo($inventory_return_location_id);
    }

    /**
     * Operation gETInventoryReturnLocationIdInventoryModelWithHttpInfo
     *
     * Retrieve the inventory model associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryReturnLocationIdInventoryModelWithHttpInfo($inventory_return_location_id)
    {
        $request = $this->gETInventoryReturnLocationIdInventoryModelRequest($inventory_return_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryReturnLocationIdInventoryModelAsync
     *
     * Retrieve the inventory model associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationIdInventoryModelAsync($inventory_return_location_id)
    {
        return $this->gETInventoryReturnLocationIdInventoryModelAsyncWithHttpInfo($inventory_return_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryReturnLocationIdInventoryModelAsyncWithHttpInfo
     *
     * Retrieve the inventory model associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationIdInventoryModelAsyncWithHttpInfo($inventory_return_location_id)
    {
        $returnType = '';
        $request = $this->gETInventoryReturnLocationIdInventoryModelRequest($inventory_return_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryReturnLocationIdInventoryModel'
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryReturnLocationIdInventoryModelRequest($inventory_return_location_id)
    {
        // verify the required parameter 'inventory_return_location_id' is set
        if ($inventory_return_location_id === null || (is_array($inventory_return_location_id) && count($inventory_return_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_return_location_id when calling gETInventoryReturnLocationIdInventoryModel'
            );
        }

        $resourcePath = '/inventory_return_locations/{inventoryReturnLocationId}/inventory_model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_return_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryReturnLocationId' . '}',
                ObjectSerializer::toPathValue($inventory_return_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryReturnLocationIdStockLocation
     *
     * Retrieve the stock location associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryReturnLocationIdStockLocation($inventory_return_location_id)
    {
        $this->gETInventoryReturnLocationIdStockLocationWithHttpInfo($inventory_return_location_id);
    }

    /**
     * Operation gETInventoryReturnLocationIdStockLocationWithHttpInfo
     *
     * Retrieve the stock location associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryReturnLocationIdStockLocationWithHttpInfo($inventory_return_location_id)
    {
        $request = $this->gETInventoryReturnLocationIdStockLocationRequest($inventory_return_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryReturnLocationIdStockLocationAsync
     *
     * Retrieve the stock location associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationIdStockLocationAsync($inventory_return_location_id)
    {
        return $this->gETInventoryReturnLocationIdStockLocationAsyncWithHttpInfo($inventory_return_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryReturnLocationIdStockLocationAsyncWithHttpInfo
     *
     * Retrieve the stock location associated to the inventory return location
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryReturnLocationIdStockLocationAsyncWithHttpInfo($inventory_return_location_id)
    {
        $returnType = '';
        $request = $this->gETInventoryReturnLocationIdStockLocationRequest($inventory_return_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryReturnLocationIdStockLocation'
     *
     * @param  string $inventory_return_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryReturnLocationIdStockLocationRequest($inventory_return_location_id)
    {
        // verify the required parameter 'inventory_return_location_id' is set
        if ($inventory_return_location_id === null || (is_array($inventory_return_location_id) && count($inventory_return_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_return_location_id when calling gETInventoryReturnLocationIdStockLocation'
            );
        }

        $resourcePath = '/inventory_return_locations/{inventoryReturnLocationId}/stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_return_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryReturnLocationId' . '}',
                ObjectSerializer::toPathValue($inventory_return_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryStockLocationIdInventoryModel
     *
     * Retrieve the inventory model associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryStockLocationIdInventoryModel($inventory_stock_location_id)
    {
        $this->gETInventoryStockLocationIdInventoryModelWithHttpInfo($inventory_stock_location_id);
    }

    /**
     * Operation gETInventoryStockLocationIdInventoryModelWithHttpInfo
     *
     * Retrieve the inventory model associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryStockLocationIdInventoryModelWithHttpInfo($inventory_stock_location_id)
    {
        $request = $this->gETInventoryStockLocationIdInventoryModelRequest($inventory_stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryStockLocationIdInventoryModelAsync
     *
     * Retrieve the inventory model associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryStockLocationIdInventoryModelAsync($inventory_stock_location_id)
    {
        return $this->gETInventoryStockLocationIdInventoryModelAsyncWithHttpInfo($inventory_stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryStockLocationIdInventoryModelAsyncWithHttpInfo
     *
     * Retrieve the inventory model associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryStockLocationIdInventoryModelAsyncWithHttpInfo($inventory_stock_location_id)
    {
        $returnType = '';
        $request = $this->gETInventoryStockLocationIdInventoryModelRequest($inventory_stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryStockLocationIdInventoryModel'
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryStockLocationIdInventoryModelRequest($inventory_stock_location_id)
    {
        // verify the required parameter 'inventory_stock_location_id' is set
        if ($inventory_stock_location_id === null || (is_array($inventory_stock_location_id) && count($inventory_stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_stock_location_id when calling gETInventoryStockLocationIdInventoryModel'
            );
        }

        $resourcePath = '/inventory_stock_locations/{inventoryStockLocationId}/inventory_model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryStockLocationId' . '}',
                ObjectSerializer::toPathValue($inventory_stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETInventoryStockLocationIdStockLocation
     *
     * Retrieve the stock location associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETInventoryStockLocationIdStockLocation($inventory_stock_location_id)
    {
        $this->gETInventoryStockLocationIdStockLocationWithHttpInfo($inventory_stock_location_id);
    }

    /**
     * Operation gETInventoryStockLocationIdStockLocationWithHttpInfo
     *
     * Retrieve the stock location associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETInventoryStockLocationIdStockLocationWithHttpInfo($inventory_stock_location_id)
    {
        $request = $this->gETInventoryStockLocationIdStockLocationRequest($inventory_stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETInventoryStockLocationIdStockLocationAsync
     *
     * Retrieve the stock location associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryStockLocationIdStockLocationAsync($inventory_stock_location_id)
    {
        return $this->gETInventoryStockLocationIdStockLocationAsyncWithHttpInfo($inventory_stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETInventoryStockLocationIdStockLocationAsyncWithHttpInfo
     *
     * Retrieve the stock location associated to the inventory stock location
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETInventoryStockLocationIdStockLocationAsyncWithHttpInfo($inventory_stock_location_id)
    {
        $returnType = '';
        $request = $this->gETInventoryStockLocationIdStockLocationRequest($inventory_stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETInventoryStockLocationIdStockLocation'
     *
     * @param  string $inventory_stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETInventoryStockLocationIdStockLocationRequest($inventory_stock_location_id)
    {
        // verify the required parameter 'inventory_stock_location_id' is set
        if ($inventory_stock_location_id === null || (is_array($inventory_stock_location_id) && count($inventory_stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inventory_stock_location_id when calling gETInventoryStockLocationIdStockLocation'
            );
        }

        $resourcePath = '/inventory_stock_locations/{inventoryStockLocationId}/stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($inventory_stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inventoryStockLocationId' . '}',
                ObjectSerializer::toPathValue($inventory_stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLineItemIdOrder
     *
     * Retrieve the order associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETLineItemIdOrder($line_item_id)
    {
        $this->gETLineItemIdOrderWithHttpInfo($line_item_id);
    }

    /**
     * Operation gETLineItemIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLineItemIdOrderWithHttpInfo($line_item_id)
    {
        $request = $this->gETLineItemIdOrderRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETLineItemIdOrderAsync
     *
     * Retrieve the order associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdOrderAsync($line_item_id)
    {
        return $this->gETLineItemIdOrderAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLineItemIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the line item
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemIdOrderAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '';
        $request = $this->gETLineItemIdOrderRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLineItemIdOrder'
     *
     * @param  string $line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLineItemIdOrderRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling gETLineItemIdOrder'
            );
        }

        $resourcePath = '/line_items/{lineItemId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLineItemOptionIdLineItem
     *
     * Retrieve the line item associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETLineItemOptionIdLineItem($line_item_option_id)
    {
        $this->gETLineItemOptionIdLineItemWithHttpInfo($line_item_option_id);
    }

    /**
     * Operation gETLineItemOptionIdLineItemWithHttpInfo
     *
     * Retrieve the line item associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLineItemOptionIdLineItemWithHttpInfo($line_item_option_id)
    {
        $request = $this->gETLineItemOptionIdLineItemRequest($line_item_option_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETLineItemOptionIdLineItemAsync
     *
     * Retrieve the line item associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemOptionIdLineItemAsync($line_item_option_id)
    {
        return $this->gETLineItemOptionIdLineItemAsyncWithHttpInfo($line_item_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLineItemOptionIdLineItemAsyncWithHttpInfo
     *
     * Retrieve the line item associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemOptionIdLineItemAsyncWithHttpInfo($line_item_option_id)
    {
        $returnType = '';
        $request = $this->gETLineItemOptionIdLineItemRequest($line_item_option_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLineItemOptionIdLineItem'
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLineItemOptionIdLineItemRequest($line_item_option_id)
    {
        // verify the required parameter 'line_item_option_id' is set
        if ($line_item_option_id === null || (is_array($line_item_option_id) && count($line_item_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_option_id when calling gETLineItemOptionIdLineItem'
            );
        }

        $resourcePath = '/line_item_options/{lineItemOptionId}/line_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemOptionId' . '}',
                ObjectSerializer::toPathValue($line_item_option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLineItemOptionIdSkuOption
     *
     * Retrieve the sku option associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETLineItemOptionIdSkuOption($line_item_option_id)
    {
        $this->gETLineItemOptionIdSkuOptionWithHttpInfo($line_item_option_id);
    }

    /**
     * Operation gETLineItemOptionIdSkuOptionWithHttpInfo
     *
     * Retrieve the sku option associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLineItemOptionIdSkuOptionWithHttpInfo($line_item_option_id)
    {
        $request = $this->gETLineItemOptionIdSkuOptionRequest($line_item_option_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETLineItemOptionIdSkuOptionAsync
     *
     * Retrieve the sku option associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemOptionIdSkuOptionAsync($line_item_option_id)
    {
        return $this->gETLineItemOptionIdSkuOptionAsyncWithHttpInfo($line_item_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLineItemOptionIdSkuOptionAsyncWithHttpInfo
     *
     * Retrieve the sku option associated to the line item option
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLineItemOptionIdSkuOptionAsyncWithHttpInfo($line_item_option_id)
    {
        $returnType = '';
        $request = $this->gETLineItemOptionIdSkuOptionRequest($line_item_option_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLineItemOptionIdSkuOption'
     *
     * @param  string $line_item_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLineItemOptionIdSkuOptionRequest($line_item_option_id)
    {
        // verify the required parameter 'line_item_option_id' is set
        if ($line_item_option_id === null || (is_array($line_item_option_id) && count($line_item_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_option_id when calling gETLineItemOptionIdSkuOption'
            );
        }

        $resourcePath = '/line_item_options/{lineItemOptionId}/sku_option';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemOptionId' . '}',
                ObjectSerializer::toPathValue($line_item_option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETMarketIdCustomerGroup
     *
     * Retrieve the customer group associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETMarketIdCustomerGroup($market_id)
    {
        $this->gETMarketIdCustomerGroupWithHttpInfo($market_id);
    }

    /**
     * Operation gETMarketIdCustomerGroupWithHttpInfo
     *
     * Retrieve the customer group associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETMarketIdCustomerGroupWithHttpInfo($market_id)
    {
        $request = $this->gETMarketIdCustomerGroupRequest($market_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETMarketIdCustomerGroupAsync
     *
     * Retrieve the customer group associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdCustomerGroupAsync($market_id)
    {
        return $this->gETMarketIdCustomerGroupAsyncWithHttpInfo($market_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETMarketIdCustomerGroupAsyncWithHttpInfo
     *
     * Retrieve the customer group associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdCustomerGroupAsyncWithHttpInfo($market_id)
    {
        $returnType = '';
        $request = $this->gETMarketIdCustomerGroupRequest($market_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETMarketIdCustomerGroup'
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETMarketIdCustomerGroupRequest($market_id)
    {
        // verify the required parameter 'market_id' is set
        if ($market_id === null || (is_array($market_id) && count($market_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $market_id when calling gETMarketIdCustomerGroup'
            );
        }

        $resourcePath = '/markets/{marketId}/customer_group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($market_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketId' . '}',
                ObjectSerializer::toPathValue($market_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETMarketIdInventoryModel
     *
     * Retrieve the inventory model associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETMarketIdInventoryModel($market_id)
    {
        $this->gETMarketIdInventoryModelWithHttpInfo($market_id);
    }

    /**
     * Operation gETMarketIdInventoryModelWithHttpInfo
     *
     * Retrieve the inventory model associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETMarketIdInventoryModelWithHttpInfo($market_id)
    {
        $request = $this->gETMarketIdInventoryModelRequest($market_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETMarketIdInventoryModelAsync
     *
     * Retrieve the inventory model associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdInventoryModelAsync($market_id)
    {
        return $this->gETMarketIdInventoryModelAsyncWithHttpInfo($market_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETMarketIdInventoryModelAsyncWithHttpInfo
     *
     * Retrieve the inventory model associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdInventoryModelAsyncWithHttpInfo($market_id)
    {
        $returnType = '';
        $request = $this->gETMarketIdInventoryModelRequest($market_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETMarketIdInventoryModel'
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETMarketIdInventoryModelRequest($market_id)
    {
        // verify the required parameter 'market_id' is set
        if ($market_id === null || (is_array($market_id) && count($market_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $market_id when calling gETMarketIdInventoryModel'
            );
        }

        $resourcePath = '/markets/{marketId}/inventory_model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($market_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketId' . '}',
                ObjectSerializer::toPathValue($market_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETMarketIdMerchant
     *
     * Retrieve the merchant associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETMarketIdMerchant($market_id)
    {
        $this->gETMarketIdMerchantWithHttpInfo($market_id);
    }

    /**
     * Operation gETMarketIdMerchantWithHttpInfo
     *
     * Retrieve the merchant associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETMarketIdMerchantWithHttpInfo($market_id)
    {
        $request = $this->gETMarketIdMerchantRequest($market_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETMarketIdMerchantAsync
     *
     * Retrieve the merchant associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdMerchantAsync($market_id)
    {
        return $this->gETMarketIdMerchantAsyncWithHttpInfo($market_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETMarketIdMerchantAsyncWithHttpInfo
     *
     * Retrieve the merchant associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdMerchantAsyncWithHttpInfo($market_id)
    {
        $returnType = '';
        $request = $this->gETMarketIdMerchantRequest($market_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETMarketIdMerchant'
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETMarketIdMerchantRequest($market_id)
    {
        // verify the required parameter 'market_id' is set
        if ($market_id === null || (is_array($market_id) && count($market_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $market_id when calling gETMarketIdMerchant'
            );
        }

        $resourcePath = '/markets/{marketId}/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($market_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketId' . '}',
                ObjectSerializer::toPathValue($market_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETMarketIdPriceList
     *
     * Retrieve the price list associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETMarketIdPriceList($market_id)
    {
        $this->gETMarketIdPriceListWithHttpInfo($market_id);
    }

    /**
     * Operation gETMarketIdPriceListWithHttpInfo
     *
     * Retrieve the price list associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETMarketIdPriceListWithHttpInfo($market_id)
    {
        $request = $this->gETMarketIdPriceListRequest($market_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETMarketIdPriceListAsync
     *
     * Retrieve the price list associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdPriceListAsync($market_id)
    {
        return $this->gETMarketIdPriceListAsyncWithHttpInfo($market_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETMarketIdPriceListAsyncWithHttpInfo
     *
     * Retrieve the price list associated to the market
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMarketIdPriceListAsyncWithHttpInfo($market_id)
    {
        $returnType = '';
        $request = $this->gETMarketIdPriceListRequest($market_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETMarketIdPriceList'
     *
     * @param  string $market_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETMarketIdPriceListRequest($market_id)
    {
        // verify the required parameter 'market_id' is set
        if ($market_id === null || (is_array($market_id) && count($market_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $market_id when calling gETMarketIdPriceList'
            );
        }

        $resourcePath = '/markets/{marketId}/price_list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($market_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketId' . '}',
                ObjectSerializer::toPathValue($market_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETMerchantIdAddress
     *
     * Retrieve the address associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETMerchantIdAddress($merchant_id)
    {
        $this->gETMerchantIdAddressWithHttpInfo($merchant_id);
    }

    /**
     * Operation gETMerchantIdAddressWithHttpInfo
     *
     * Retrieve the address associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETMerchantIdAddressWithHttpInfo($merchant_id)
    {
        $request = $this->gETMerchantIdAddressRequest($merchant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETMerchantIdAddressAsync
     *
     * Retrieve the address associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMerchantIdAddressAsync($merchant_id)
    {
        return $this->gETMerchantIdAddressAsyncWithHttpInfo($merchant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETMerchantIdAddressAsyncWithHttpInfo
     *
     * Retrieve the address associated to the merchant
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETMerchantIdAddressAsyncWithHttpInfo($merchant_id)
    {
        $returnType = '';
        $request = $this->gETMerchantIdAddressRequest($merchant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETMerchantIdAddress'
     *
     * @param  string $merchant_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETMerchantIdAddressRequest($merchant_id)
    {
        // verify the required parameter 'merchant_id' is set
        if ($merchant_id === null || (is_array($merchant_id) && count($merchant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_id when calling gETMerchantIdAddress'
            );
        }

        $resourcePath = '/merchants/{merchantId}/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($merchant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantId' . '}',
                ObjectSerializer::toPathValue($merchant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdBillingAddress
     *
     * Retrieve the billing address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdBillingAddress($order_id)
    {
        $this->gETOrderIdBillingAddressWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdBillingAddressWithHttpInfo
     *
     * Retrieve the billing address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdBillingAddressWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdBillingAddressRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdBillingAddressAsync
     *
     * Retrieve the billing address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdBillingAddressAsync($order_id)
    {
        return $this->gETOrderIdBillingAddressAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdBillingAddressAsyncWithHttpInfo
     *
     * Retrieve the billing address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdBillingAddressAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdBillingAddressRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdBillingAddress'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdBillingAddressRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdBillingAddress'
            );
        }

        $resourcePath = '/orders/{orderId}/billing_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdCustomer
     *
     * Retrieve the customer associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdCustomer($order_id)
    {
        $this->gETOrderIdCustomerWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdCustomerWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdCustomerRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdCustomerAsync
     *
     * Retrieve the customer associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdCustomerAsync($order_id)
    {
        return $this->gETOrderIdCustomerAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdCustomerAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdCustomerRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdCustomer'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdCustomerRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdCustomer'
            );
        }

        $resourcePath = '/orders/{orderId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdMarket
     *
     * Retrieve the market associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdMarket($order_id)
    {
        $this->gETOrderIdMarketWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdMarketWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdMarketRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdMarketAsync
     *
     * Retrieve the market associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdMarketAsync($order_id)
    {
        return $this->gETOrderIdMarketAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdMarketAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdMarketRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdMarket'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdMarketRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdMarket'
            );
        }

        $resourcePath = '/orders/{orderId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdPaymentMethod
     *
     * Retrieve the payment method associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdPaymentMethod($order_id)
    {
        $this->gETOrderIdPaymentMethodWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdPaymentMethodWithHttpInfo
     *
     * Retrieve the payment method associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdPaymentMethodWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdPaymentMethodRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdPaymentMethodAsync
     *
     * Retrieve the payment method associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdPaymentMethodAsync($order_id)
    {
        return $this->gETOrderIdPaymentMethodAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdPaymentMethodAsyncWithHttpInfo
     *
     * Retrieve the payment method associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdPaymentMethodAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdPaymentMethodRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdPaymentMethod'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdPaymentMethodRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdPaymentMethod'
            );
        }

        $resourcePath = '/orders/{orderId}/payment_method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETOrderIdShippingAddress
     *
     * Retrieve the shipping address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETOrderIdShippingAddress($order_id)
    {
        $this->gETOrderIdShippingAddressWithHttpInfo($order_id);
    }

    /**
     * Operation gETOrderIdShippingAddressWithHttpInfo
     *
     * Retrieve the shipping address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETOrderIdShippingAddressWithHttpInfo($order_id)
    {
        $request = $this->gETOrderIdShippingAddressRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETOrderIdShippingAddressAsync
     *
     * Retrieve the shipping address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdShippingAddressAsync($order_id)
    {
        return $this->gETOrderIdShippingAddressAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETOrderIdShippingAddressAsyncWithHttpInfo
     *
     * Retrieve the shipping address associated to the order
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETOrderIdShippingAddressAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->gETOrderIdShippingAddressRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETOrderIdShippingAddress'
     *
     * @param  string $order_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETOrderIdShippingAddressRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling gETOrderIdShippingAddress'
            );
        }

        $resourcePath = '/orders/{orderId}/shipping_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPackageIdStockLocation
     *
     * Retrieve the stock location associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPackageIdStockLocation($package_id)
    {
        $this->gETPackageIdStockLocationWithHttpInfo($package_id);
    }

    /**
     * Operation gETPackageIdStockLocationWithHttpInfo
     *
     * Retrieve the stock location associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPackageIdStockLocationWithHttpInfo($package_id)
    {
        $request = $this->gETPackageIdStockLocationRequest($package_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPackageIdStockLocationAsync
     *
     * Retrieve the stock location associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPackageIdStockLocationAsync($package_id)
    {
        return $this->gETPackageIdStockLocationAsyncWithHttpInfo($package_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPackageIdStockLocationAsyncWithHttpInfo
     *
     * Retrieve the stock location associated to the package
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPackageIdStockLocationAsyncWithHttpInfo($package_id)
    {
        $returnType = '';
        $request = $this->gETPackageIdStockLocationRequest($package_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPackageIdStockLocation'
     *
     * @param  string $package_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPackageIdStockLocationRequest($package_id)
    {
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $package_id when calling gETPackageIdStockLocation'
            );
        }

        $resourcePath = '/packages/{packageId}/stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETParcelIdPackage
     *
     * Retrieve the package associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETParcelIdPackage($parcel_id)
    {
        $this->gETParcelIdPackageWithHttpInfo($parcel_id);
    }

    /**
     * Operation gETParcelIdPackageWithHttpInfo
     *
     * Retrieve the package associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETParcelIdPackageWithHttpInfo($parcel_id)
    {
        $request = $this->gETParcelIdPackageRequest($parcel_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETParcelIdPackageAsync
     *
     * Retrieve the package associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdPackageAsync($parcel_id)
    {
        return $this->gETParcelIdPackageAsyncWithHttpInfo($parcel_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETParcelIdPackageAsyncWithHttpInfo
     *
     * Retrieve the package associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdPackageAsyncWithHttpInfo($parcel_id)
    {
        $returnType = '';
        $request = $this->gETParcelIdPackageRequest($parcel_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETParcelIdPackage'
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETParcelIdPackageRequest($parcel_id)
    {
        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling gETParcelIdPackage'
            );
        }

        $resourcePath = '/parcels/{parcelId}/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETParcelIdShipment
     *
     * Retrieve the shipment associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETParcelIdShipment($parcel_id)
    {
        $this->gETParcelIdShipmentWithHttpInfo($parcel_id);
    }

    /**
     * Operation gETParcelIdShipmentWithHttpInfo
     *
     * Retrieve the shipment associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETParcelIdShipmentWithHttpInfo($parcel_id)
    {
        $request = $this->gETParcelIdShipmentRequest($parcel_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETParcelIdShipmentAsync
     *
     * Retrieve the shipment associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdShipmentAsync($parcel_id)
    {
        return $this->gETParcelIdShipmentAsyncWithHttpInfo($parcel_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETParcelIdShipmentAsyncWithHttpInfo
     *
     * Retrieve the shipment associated to the parcel
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelIdShipmentAsyncWithHttpInfo($parcel_id)
    {
        $returnType = '';
        $request = $this->gETParcelIdShipmentRequest($parcel_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETParcelIdShipment'
     *
     * @param  string $parcel_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETParcelIdShipmentRequest($parcel_id)
    {
        // verify the required parameter 'parcel_id' is set
        if ($parcel_id === null || (is_array($parcel_id) && count($parcel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_id when calling gETParcelIdShipment'
            );
        }

        $resourcePath = '/parcels/{parcelId}/shipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parcel_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelId' . '}',
                ObjectSerializer::toPathValue($parcel_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETParcelLineItemIdParcel
     *
     * Retrieve the parcel associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETParcelLineItemIdParcel($parcel_line_item_id)
    {
        $this->gETParcelLineItemIdParcelWithHttpInfo($parcel_line_item_id);
    }

    /**
     * Operation gETParcelLineItemIdParcelWithHttpInfo
     *
     * Retrieve the parcel associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETParcelLineItemIdParcelWithHttpInfo($parcel_line_item_id)
    {
        $request = $this->gETParcelLineItemIdParcelRequest($parcel_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETParcelLineItemIdParcelAsync
     *
     * Retrieve the parcel associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelLineItemIdParcelAsync($parcel_line_item_id)
    {
        return $this->gETParcelLineItemIdParcelAsyncWithHttpInfo($parcel_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETParcelLineItemIdParcelAsyncWithHttpInfo
     *
     * Retrieve the parcel associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelLineItemIdParcelAsyncWithHttpInfo($parcel_line_item_id)
    {
        $returnType = '';
        $request = $this->gETParcelLineItemIdParcelRequest($parcel_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETParcelLineItemIdParcel'
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETParcelLineItemIdParcelRequest($parcel_line_item_id)
    {
        // verify the required parameter 'parcel_line_item_id' is set
        if ($parcel_line_item_id === null || (is_array($parcel_line_item_id) && count($parcel_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_line_item_id when calling gETParcelLineItemIdParcel'
            );
        }

        $resourcePath = '/parcel_line_items/{parcelLineItemId}/parcel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parcel_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelLineItemId' . '}',
                ObjectSerializer::toPathValue($parcel_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETParcelLineItemIdShipmentLineItem
     *
     * Retrieve the shipment line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETParcelLineItemIdShipmentLineItem($parcel_line_item_id)
    {
        $this->gETParcelLineItemIdShipmentLineItemWithHttpInfo($parcel_line_item_id);
    }

    /**
     * Operation gETParcelLineItemIdShipmentLineItemWithHttpInfo
     *
     * Retrieve the shipment line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETParcelLineItemIdShipmentLineItemWithHttpInfo($parcel_line_item_id)
    {
        $request = $this->gETParcelLineItemIdShipmentLineItemRequest($parcel_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETParcelLineItemIdShipmentLineItemAsync
     *
     * Retrieve the shipment line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelLineItemIdShipmentLineItemAsync($parcel_line_item_id)
    {
        return $this->gETParcelLineItemIdShipmentLineItemAsyncWithHttpInfo($parcel_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETParcelLineItemIdShipmentLineItemAsyncWithHttpInfo
     *
     * Retrieve the shipment line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelLineItemIdShipmentLineItemAsyncWithHttpInfo($parcel_line_item_id)
    {
        $returnType = '';
        $request = $this->gETParcelLineItemIdShipmentLineItemRequest($parcel_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETParcelLineItemIdShipmentLineItem'
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETParcelLineItemIdShipmentLineItemRequest($parcel_line_item_id)
    {
        // verify the required parameter 'parcel_line_item_id' is set
        if ($parcel_line_item_id === null || (is_array($parcel_line_item_id) && count($parcel_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_line_item_id when calling gETParcelLineItemIdShipmentLineItem'
            );
        }

        $resourcePath = '/parcel_line_items/{parcelLineItemId}/shipment_line_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parcel_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelLineItemId' . '}',
                ObjectSerializer::toPathValue($parcel_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETParcelLineItemIdStockLineItem
     *
     * Retrieve the stock line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETParcelLineItemIdStockLineItem($parcel_line_item_id)
    {
        $this->gETParcelLineItemIdStockLineItemWithHttpInfo($parcel_line_item_id);
    }

    /**
     * Operation gETParcelLineItemIdStockLineItemWithHttpInfo
     *
     * Retrieve the stock line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETParcelLineItemIdStockLineItemWithHttpInfo($parcel_line_item_id)
    {
        $request = $this->gETParcelLineItemIdStockLineItemRequest($parcel_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETParcelLineItemIdStockLineItemAsync
     *
     * Retrieve the stock line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelLineItemIdStockLineItemAsync($parcel_line_item_id)
    {
        return $this->gETParcelLineItemIdStockLineItemAsyncWithHttpInfo($parcel_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETParcelLineItemIdStockLineItemAsyncWithHttpInfo
     *
     * Retrieve the stock line item associated to the parcel line item
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETParcelLineItemIdStockLineItemAsyncWithHttpInfo($parcel_line_item_id)
    {
        $returnType = '';
        $request = $this->gETParcelLineItemIdStockLineItemRequest($parcel_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETParcelLineItemIdStockLineItem'
     *
     * @param  string $parcel_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETParcelLineItemIdStockLineItemRequest($parcel_line_item_id)
    {
        // verify the required parameter 'parcel_line_item_id' is set
        if ($parcel_line_item_id === null || (is_array($parcel_line_item_id) && count($parcel_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_line_item_id when calling gETParcelLineItemIdStockLineItem'
            );
        }

        $resourcePath = '/parcel_line_items/{parcelLineItemId}/stock_line_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parcel_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelLineItemId' . '}',
                ObjectSerializer::toPathValue($parcel_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaymentMethodIdMarket
     *
     * Retrieve the market associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaymentMethodIdMarket($payment_method_id)
    {
        $this->gETPaymentMethodIdMarketWithHttpInfo($payment_method_id);
    }

    /**
     * Operation gETPaymentMethodIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaymentMethodIdMarketWithHttpInfo($payment_method_id)
    {
        $request = $this->gETPaymentMethodIdMarketRequest($payment_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaymentMethodIdMarketAsync
     *
     * Retrieve the market associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentMethodIdMarketAsync($payment_method_id)
    {
        return $this->gETPaymentMethodIdMarketAsyncWithHttpInfo($payment_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaymentMethodIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentMethodIdMarketAsyncWithHttpInfo($payment_method_id)
    {
        $returnType = '';
        $request = $this->gETPaymentMethodIdMarketRequest($payment_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaymentMethodIdMarket'
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaymentMethodIdMarketRequest($payment_method_id)
    {
        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling gETPaymentMethodIdMarket'
            );
        }

        $resourcePath = '/payment_methods/{paymentMethodId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaymentMethodIdPaymentGateway
     *
     * Retrieve the payment gateway associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaymentMethodIdPaymentGateway($payment_method_id)
    {
        $this->gETPaymentMethodIdPaymentGatewayWithHttpInfo($payment_method_id);
    }

    /**
     * Operation gETPaymentMethodIdPaymentGatewayWithHttpInfo
     *
     * Retrieve the payment gateway associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaymentMethodIdPaymentGatewayWithHttpInfo($payment_method_id)
    {
        $request = $this->gETPaymentMethodIdPaymentGatewayRequest($payment_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaymentMethodIdPaymentGatewayAsync
     *
     * Retrieve the payment gateway associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentMethodIdPaymentGatewayAsync($payment_method_id)
    {
        return $this->gETPaymentMethodIdPaymentGatewayAsyncWithHttpInfo($payment_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaymentMethodIdPaymentGatewayAsyncWithHttpInfo
     *
     * Retrieve the payment gateway associated to the payment method
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaymentMethodIdPaymentGatewayAsyncWithHttpInfo($payment_method_id)
    {
        $returnType = '';
        $request = $this->gETPaymentMethodIdPaymentGatewayRequest($payment_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaymentMethodIdPaymentGateway'
     *
     * @param  string $payment_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaymentMethodIdPaymentGatewayRequest($payment_method_id)
    {
        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling gETPaymentMethodIdPaymentGateway'
            );
        }

        $resourcePath = '/payment_methods/{paymentMethodId}/payment_gateway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaypalPaymentIdOrder
     *
     * Retrieve the order associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaypalPaymentIdOrder($paypal_payment_id)
    {
        $this->gETPaypalPaymentIdOrderWithHttpInfo($paypal_payment_id);
    }

    /**
     * Operation gETPaypalPaymentIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaypalPaymentIdOrderWithHttpInfo($paypal_payment_id)
    {
        $request = $this->gETPaypalPaymentIdOrderRequest($paypal_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaypalPaymentIdOrderAsync
     *
     * Retrieve the order associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalPaymentIdOrderAsync($paypal_payment_id)
    {
        return $this->gETPaypalPaymentIdOrderAsyncWithHttpInfo($paypal_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaypalPaymentIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalPaymentIdOrderAsyncWithHttpInfo($paypal_payment_id)
    {
        $returnType = '';
        $request = $this->gETPaypalPaymentIdOrderRequest($paypal_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaypalPaymentIdOrder'
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaypalPaymentIdOrderRequest($paypal_payment_id)
    {
        // verify the required parameter 'paypal_payment_id' is set
        if ($paypal_payment_id === null || (is_array($paypal_payment_id) && count($paypal_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paypal_payment_id when calling gETPaypalPaymentIdOrder'
            );
        }

        $resourcePath = '/paypal_payments/{paypalPaymentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($paypal_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paypalPaymentId' . '}',
                ObjectSerializer::toPathValue($paypal_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPaypalPaymentIdPaymentGateway
     *
     * Retrieve the payment gateway associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPaypalPaymentIdPaymentGateway($paypal_payment_id)
    {
        $this->gETPaypalPaymentIdPaymentGatewayWithHttpInfo($paypal_payment_id);
    }

    /**
     * Operation gETPaypalPaymentIdPaymentGatewayWithHttpInfo
     *
     * Retrieve the payment gateway associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPaypalPaymentIdPaymentGatewayWithHttpInfo($paypal_payment_id)
    {
        $request = $this->gETPaypalPaymentIdPaymentGatewayRequest($paypal_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPaypalPaymentIdPaymentGatewayAsync
     *
     * Retrieve the payment gateway associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalPaymentIdPaymentGatewayAsync($paypal_payment_id)
    {
        return $this->gETPaypalPaymentIdPaymentGatewayAsyncWithHttpInfo($paypal_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPaypalPaymentIdPaymentGatewayAsyncWithHttpInfo
     *
     * Retrieve the payment gateway associated to the paypal payment
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPaypalPaymentIdPaymentGatewayAsyncWithHttpInfo($paypal_payment_id)
    {
        $returnType = '';
        $request = $this->gETPaypalPaymentIdPaymentGatewayRequest($paypal_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPaypalPaymentIdPaymentGateway'
     *
     * @param  string $paypal_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPaypalPaymentIdPaymentGatewayRequest($paypal_payment_id)
    {
        // verify the required parameter 'paypal_payment_id' is set
        if ($paypal_payment_id === null || (is_array($paypal_payment_id) && count($paypal_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paypal_payment_id when calling gETPaypalPaymentIdPaymentGateway'
            );
        }

        $resourcePath = '/paypal_payments/{paypalPaymentId}/payment_gateway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($paypal_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paypalPaymentId' . '}',
                ObjectSerializer::toPathValue($paypal_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdCouponCodesPromotionRule
     *
     * Retrieve the coupon codes promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPercentageDiscountPromotionIdCouponCodesPromotionRule($percentage_discount_promotion_id)
    {
        $this->gETPercentageDiscountPromotionIdCouponCodesPromotionRuleWithHttpInfo($percentage_discount_promotion_id);
    }

    /**
     * Operation gETPercentageDiscountPromotionIdCouponCodesPromotionRuleWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPercentageDiscountPromotionIdCouponCodesPromotionRuleWithHttpInfo($percentage_discount_promotion_id)
    {
        $request = $this->gETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest($percentage_discount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPercentageDiscountPromotionIdCouponCodesPromotionRuleAsync
     *
     * Retrieve the coupon codes promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdCouponCodesPromotionRuleAsync($percentage_discount_promotion_id)
    {
        return $this->gETPercentageDiscountPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($percentage_discount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($percentage_discount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest($percentage_discount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPercentageDiscountPromotionIdCouponCodesPromotionRule'
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPercentageDiscountPromotionIdCouponCodesPromotionRuleRequest($percentage_discount_promotion_id)
    {
        // verify the required parameter 'percentage_discount_promotion_id' is set
        if ($percentage_discount_promotion_id === null || (is_array($percentage_discount_promotion_id) && count($percentage_discount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $percentage_discount_promotion_id when calling gETPercentageDiscountPromotionIdCouponCodesPromotionRule'
            );
        }

        $resourcePath = '/percentage_discount_promotions/{percentageDiscountPromotionId}/coupon_codes_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($percentage_discount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'percentageDiscountPromotionId' . '}',
                ObjectSerializer::toPathValue($percentage_discount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdMarket
     *
     * Retrieve the market associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPercentageDiscountPromotionIdMarket($percentage_discount_promotion_id)
    {
        $this->gETPercentageDiscountPromotionIdMarketWithHttpInfo($percentage_discount_promotion_id);
    }

    /**
     * Operation gETPercentageDiscountPromotionIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPercentageDiscountPromotionIdMarketWithHttpInfo($percentage_discount_promotion_id)
    {
        $request = $this->gETPercentageDiscountPromotionIdMarketRequest($percentage_discount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPercentageDiscountPromotionIdMarketAsync
     *
     * Retrieve the market associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdMarketAsync($percentage_discount_promotion_id)
    {
        return $this->gETPercentageDiscountPromotionIdMarketAsyncWithHttpInfo($percentage_discount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdMarketAsyncWithHttpInfo($percentage_discount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETPercentageDiscountPromotionIdMarketRequest($percentage_discount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPercentageDiscountPromotionIdMarket'
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPercentageDiscountPromotionIdMarketRequest($percentage_discount_promotion_id)
    {
        // verify the required parameter 'percentage_discount_promotion_id' is set
        if ($percentage_discount_promotion_id === null || (is_array($percentage_discount_promotion_id) && count($percentage_discount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $percentage_discount_promotion_id when calling gETPercentageDiscountPromotionIdMarket'
            );
        }

        $resourcePath = '/percentage_discount_promotions/{percentageDiscountPromotionId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($percentage_discount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'percentageDiscountPromotionId' . '}',
                ObjectSerializer::toPathValue($percentage_discount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdOrderAmountPromotionRule
     *
     * Retrieve the order amount promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPercentageDiscountPromotionIdOrderAmountPromotionRule($percentage_discount_promotion_id)
    {
        $this->gETPercentageDiscountPromotionIdOrderAmountPromotionRuleWithHttpInfo($percentage_discount_promotion_id);
    }

    /**
     * Operation gETPercentageDiscountPromotionIdOrderAmountPromotionRuleWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPercentageDiscountPromotionIdOrderAmountPromotionRuleWithHttpInfo($percentage_discount_promotion_id)
    {
        $request = $this->gETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest($percentage_discount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPercentageDiscountPromotionIdOrderAmountPromotionRuleAsync
     *
     * Retrieve the order amount promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdOrderAmountPromotionRuleAsync($percentage_discount_promotion_id)
    {
        return $this->gETPercentageDiscountPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($percentage_discount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($percentage_discount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest($percentage_discount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPercentageDiscountPromotionIdOrderAmountPromotionRule'
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPercentageDiscountPromotionIdOrderAmountPromotionRuleRequest($percentage_discount_promotion_id)
    {
        // verify the required parameter 'percentage_discount_promotion_id' is set
        if ($percentage_discount_promotion_id === null || (is_array($percentage_discount_promotion_id) && count($percentage_discount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $percentage_discount_promotion_id when calling gETPercentageDiscountPromotionIdOrderAmountPromotionRule'
            );
        }

        $resourcePath = '/percentage_discount_promotions/{percentageDiscountPromotionId}/order_amount_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($percentage_discount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'percentageDiscountPromotionId' . '}',
                ObjectSerializer::toPathValue($percentage_discount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuList
     *
     * Retrieve the sku list associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPercentageDiscountPromotionIdSkuList($percentage_discount_promotion_id)
    {
        $this->gETPercentageDiscountPromotionIdSkuListWithHttpInfo($percentage_discount_promotion_id);
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuListWithHttpInfo
     *
     * Retrieve the sku list associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPercentageDiscountPromotionIdSkuListWithHttpInfo($percentage_discount_promotion_id)
    {
        $request = $this->gETPercentageDiscountPromotionIdSkuListRequest($percentage_discount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuListAsync
     *
     * Retrieve the sku list associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdSkuListAsync($percentage_discount_promotion_id)
    {
        return $this->gETPercentageDiscountPromotionIdSkuListAsyncWithHttpInfo($percentage_discount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuListAsyncWithHttpInfo
     *
     * Retrieve the sku list associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdSkuListAsyncWithHttpInfo($percentage_discount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETPercentageDiscountPromotionIdSkuListRequest($percentage_discount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPercentageDiscountPromotionIdSkuList'
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPercentageDiscountPromotionIdSkuListRequest($percentage_discount_promotion_id)
    {
        // verify the required parameter 'percentage_discount_promotion_id' is set
        if ($percentage_discount_promotion_id === null || (is_array($percentage_discount_promotion_id) && count($percentage_discount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $percentage_discount_promotion_id when calling gETPercentageDiscountPromotionIdSkuList'
            );
        }

        $resourcePath = '/percentage_discount_promotions/{percentageDiscountPromotionId}/sku_list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($percentage_discount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'percentageDiscountPromotionId' . '}',
                ObjectSerializer::toPathValue($percentage_discount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuListPromotionRule
     *
     * Retrieve the sku list promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPercentageDiscountPromotionIdSkuListPromotionRule($percentage_discount_promotion_id)
    {
        $this->gETPercentageDiscountPromotionIdSkuListPromotionRuleWithHttpInfo($percentage_discount_promotion_id);
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuListPromotionRuleWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPercentageDiscountPromotionIdSkuListPromotionRuleWithHttpInfo($percentage_discount_promotion_id)
    {
        $request = $this->gETPercentageDiscountPromotionIdSkuListPromotionRuleRequest($percentage_discount_promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuListPromotionRuleAsync
     *
     * Retrieve the sku list promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdSkuListPromotionRuleAsync($percentage_discount_promotion_id)
    {
        return $this->gETPercentageDiscountPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($percentage_discount_promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPercentageDiscountPromotionIdSkuListPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the percentage discount promotion
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPercentageDiscountPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($percentage_discount_promotion_id)
    {
        $returnType = '';
        $request = $this->gETPercentageDiscountPromotionIdSkuListPromotionRuleRequest($percentage_discount_promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPercentageDiscountPromotionIdSkuListPromotionRule'
     *
     * @param  string $percentage_discount_promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPercentageDiscountPromotionIdSkuListPromotionRuleRequest($percentage_discount_promotion_id)
    {
        // verify the required parameter 'percentage_discount_promotion_id' is set
        if ($percentage_discount_promotion_id === null || (is_array($percentage_discount_promotion_id) && count($percentage_discount_promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $percentage_discount_promotion_id when calling gETPercentageDiscountPromotionIdSkuListPromotionRule'
            );
        }

        $resourcePath = '/percentage_discount_promotions/{percentageDiscountPromotionId}/sku_list_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($percentage_discount_promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'percentageDiscountPromotionId' . '}',
                ObjectSerializer::toPathValue($percentage_discount_promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPriceIdPriceList
     *
     * Retrieve the price list associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPriceIdPriceList($price_id)
    {
        $this->gETPriceIdPriceListWithHttpInfo($price_id);
    }

    /**
     * Operation gETPriceIdPriceListWithHttpInfo
     *
     * Retrieve the price list associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPriceIdPriceListWithHttpInfo($price_id)
    {
        $request = $this->gETPriceIdPriceListRequest($price_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPriceIdPriceListAsync
     *
     * Retrieve the price list associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceIdPriceListAsync($price_id)
    {
        return $this->gETPriceIdPriceListAsyncWithHttpInfo($price_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPriceIdPriceListAsyncWithHttpInfo
     *
     * Retrieve the price list associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceIdPriceListAsyncWithHttpInfo($price_id)
    {
        $returnType = '';
        $request = $this->gETPriceIdPriceListRequest($price_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPriceIdPriceList'
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPriceIdPriceListRequest($price_id)
    {
        // verify the required parameter 'price_id' is set
        if ($price_id === null || (is_array($price_id) && count($price_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_id when calling gETPriceIdPriceList'
            );
        }

        $resourcePath = '/prices/{priceId}/price_list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($price_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPriceIdSku
     *
     * Retrieve the sku associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPriceIdSku($price_id)
    {
        $this->gETPriceIdSkuWithHttpInfo($price_id);
    }

    /**
     * Operation gETPriceIdSkuWithHttpInfo
     *
     * Retrieve the sku associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPriceIdSkuWithHttpInfo($price_id)
    {
        $request = $this->gETPriceIdSkuRequest($price_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPriceIdSkuAsync
     *
     * Retrieve the sku associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceIdSkuAsync($price_id)
    {
        return $this->gETPriceIdSkuAsyncWithHttpInfo($price_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPriceIdSkuAsyncWithHttpInfo
     *
     * Retrieve the sku associated to the price
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPriceIdSkuAsyncWithHttpInfo($price_id)
    {
        $returnType = '';
        $request = $this->gETPriceIdSkuRequest($price_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPriceIdSku'
     *
     * @param  string $price_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPriceIdSkuRequest($price_id)
    {
        // verify the required parameter 'price_id' is set
        if ($price_id === null || (is_array($price_id) && count($price_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_id when calling gETPriceIdSku'
            );
        }

        $resourcePath = '/prices/{priceId}/sku';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($price_id !== null) {
            $resourcePath = str_replace(
                '{' . 'priceId' . '}',
                ObjectSerializer::toPathValue($price_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPromotionIdCouponCodesPromotionRule
     *
     * Retrieve the coupon codes promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPromotionIdCouponCodesPromotionRule($promotion_id)
    {
        $this->gETPromotionIdCouponCodesPromotionRuleWithHttpInfo($promotion_id);
    }

    /**
     * Operation gETPromotionIdCouponCodesPromotionRuleWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPromotionIdCouponCodesPromotionRuleWithHttpInfo($promotion_id)
    {
        $request = $this->gETPromotionIdCouponCodesPromotionRuleRequest($promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPromotionIdCouponCodesPromotionRuleAsync
     *
     * Retrieve the coupon codes promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdCouponCodesPromotionRuleAsync($promotion_id)
    {
        return $this->gETPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the coupon codes promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdCouponCodesPromotionRuleAsyncWithHttpInfo($promotion_id)
    {
        $returnType = '';
        $request = $this->gETPromotionIdCouponCodesPromotionRuleRequest($promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPromotionIdCouponCodesPromotionRule'
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPromotionIdCouponCodesPromotionRuleRequest($promotion_id)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling gETPromotionIdCouponCodesPromotionRule'
            );
        }

        $resourcePath = '/promotions/{promotionId}/coupon_codes_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPromotionIdMarket
     *
     * Retrieve the market associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPromotionIdMarket($promotion_id)
    {
        $this->gETPromotionIdMarketWithHttpInfo($promotion_id);
    }

    /**
     * Operation gETPromotionIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPromotionIdMarketWithHttpInfo($promotion_id)
    {
        $request = $this->gETPromotionIdMarketRequest($promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPromotionIdMarketAsync
     *
     * Retrieve the market associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdMarketAsync($promotion_id)
    {
        return $this->gETPromotionIdMarketAsyncWithHttpInfo($promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPromotionIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdMarketAsyncWithHttpInfo($promotion_id)
    {
        $returnType = '';
        $request = $this->gETPromotionIdMarketRequest($promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPromotionIdMarket'
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPromotionIdMarketRequest($promotion_id)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling gETPromotionIdMarket'
            );
        }

        $resourcePath = '/promotions/{promotionId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPromotionIdOrderAmountPromotionRule
     *
     * Retrieve the order amount promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPromotionIdOrderAmountPromotionRule($promotion_id)
    {
        $this->gETPromotionIdOrderAmountPromotionRuleWithHttpInfo($promotion_id);
    }

    /**
     * Operation gETPromotionIdOrderAmountPromotionRuleWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPromotionIdOrderAmountPromotionRuleWithHttpInfo($promotion_id)
    {
        $request = $this->gETPromotionIdOrderAmountPromotionRuleRequest($promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPromotionIdOrderAmountPromotionRuleAsync
     *
     * Retrieve the order amount promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdOrderAmountPromotionRuleAsync($promotion_id)
    {
        return $this->gETPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the order amount promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdOrderAmountPromotionRuleAsyncWithHttpInfo($promotion_id)
    {
        $returnType = '';
        $request = $this->gETPromotionIdOrderAmountPromotionRuleRequest($promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPromotionIdOrderAmountPromotionRule'
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPromotionIdOrderAmountPromotionRuleRequest($promotion_id)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling gETPromotionIdOrderAmountPromotionRule'
            );
        }

        $resourcePath = '/promotions/{promotionId}/order_amount_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETPromotionIdSkuListPromotionRule
     *
     * Retrieve the sku list promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETPromotionIdSkuListPromotionRule($promotion_id)
    {
        $this->gETPromotionIdSkuListPromotionRuleWithHttpInfo($promotion_id);
    }

    /**
     * Operation gETPromotionIdSkuListPromotionRuleWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETPromotionIdSkuListPromotionRuleWithHttpInfo($promotion_id)
    {
        $request = $this->gETPromotionIdSkuListPromotionRuleRequest($promotion_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETPromotionIdSkuListPromotionRuleAsync
     *
     * Retrieve the sku list promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdSkuListPromotionRuleAsync($promotion_id)
    {
        return $this->gETPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($promotion_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETPromotionIdSkuListPromotionRuleAsyncWithHttpInfo
     *
     * Retrieve the sku list promotion rule associated to the promotion
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETPromotionIdSkuListPromotionRuleAsyncWithHttpInfo($promotion_id)
    {
        $returnType = '';
        $request = $this->gETPromotionIdSkuListPromotionRuleRequest($promotion_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETPromotionIdSkuListPromotionRule'
     *
     * @param  string $promotion_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETPromotionIdSkuListPromotionRuleRequest($promotion_id)
    {
        // verify the required parameter 'promotion_id' is set
        if ($promotion_id === null || (is_array($promotion_id) && count($promotion_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotion_id when calling gETPromotionIdSkuListPromotionRule'
            );
        }

        $resourcePath = '/promotions/{promotionId}/sku_list_promotion_rule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotion_id !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionId' . '}',
                ObjectSerializer::toPathValue($promotion_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETRefundIdOrder
     *
     * Retrieve the order associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETRefundIdOrder($refund_id)
    {
        $this->gETRefundIdOrderWithHttpInfo($refund_id);
    }

    /**
     * Operation gETRefundIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETRefundIdOrderWithHttpInfo($refund_id)
    {
        $request = $this->gETRefundIdOrderRequest($refund_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETRefundIdOrderAsync
     *
     * Retrieve the order associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETRefundIdOrderAsync($refund_id)
    {
        return $this->gETRefundIdOrderAsyncWithHttpInfo($refund_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETRefundIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETRefundIdOrderAsyncWithHttpInfo($refund_id)
    {
        $returnType = '';
        $request = $this->gETRefundIdOrderRequest($refund_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETRefundIdOrder'
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETRefundIdOrderRequest($refund_id)
    {
        // verify the required parameter 'refund_id' is set
        if ($refund_id === null || (is_array($refund_id) && count($refund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refund_id when calling gETRefundIdOrder'
            );
        }

        $resourcePath = '/refunds/{refundId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($refund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'refundId' . '}',
                ObjectSerializer::toPathValue($refund_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETRefundIdReferenceCapture
     *
     * Retrieve the reference capture associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETRefundIdReferenceCapture($refund_id)
    {
        $this->gETRefundIdReferenceCaptureWithHttpInfo($refund_id);
    }

    /**
     * Operation gETRefundIdReferenceCaptureWithHttpInfo
     *
     * Retrieve the reference capture associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETRefundIdReferenceCaptureWithHttpInfo($refund_id)
    {
        $request = $this->gETRefundIdReferenceCaptureRequest($refund_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETRefundIdReferenceCaptureAsync
     *
     * Retrieve the reference capture associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETRefundIdReferenceCaptureAsync($refund_id)
    {
        return $this->gETRefundIdReferenceCaptureAsyncWithHttpInfo($refund_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETRefundIdReferenceCaptureAsyncWithHttpInfo
     *
     * Retrieve the reference capture associated to the refund
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETRefundIdReferenceCaptureAsyncWithHttpInfo($refund_id)
    {
        $returnType = '';
        $request = $this->gETRefundIdReferenceCaptureRequest($refund_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETRefundIdReferenceCapture'
     *
     * @param  string $refund_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETRefundIdReferenceCaptureRequest($refund_id)
    {
        // verify the required parameter 'refund_id' is set
        if ($refund_id === null || (is_array($refund_id) && count($refund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refund_id when calling gETRefundIdReferenceCapture'
            );
        }

        $resourcePath = '/refunds/{refundId}/reference_capture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($refund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'refundId' . '}',
                ObjectSerializer::toPathValue($refund_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnIdCustomer
     *
     * Retrieve the customer associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnIdCustomer($return_id)
    {
        $this->gETReturnIdCustomerWithHttpInfo($return_id);
    }

    /**
     * Operation gETReturnIdCustomerWithHttpInfo
     *
     * Retrieve the customer associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnIdCustomerWithHttpInfo($return_id)
    {
        $request = $this->gETReturnIdCustomerRequest($return_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnIdCustomerAsync
     *
     * Retrieve the customer associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdCustomerAsync($return_id)
    {
        return $this->gETReturnIdCustomerAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnIdCustomerAsyncWithHttpInfo
     *
     * Retrieve the customer associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdCustomerAsyncWithHttpInfo($return_id)
    {
        $returnType = '';
        $request = $this->gETReturnIdCustomerRequest($return_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnIdCustomer'
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnIdCustomerRequest($return_id)
    {
        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling gETReturnIdCustomer'
            );
        }

        $resourcePath = '/returns/{returnId}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnId' . '}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnIdDestinationAddress
     *
     * Retrieve the destination address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnIdDestinationAddress($return_id)
    {
        $this->gETReturnIdDestinationAddressWithHttpInfo($return_id);
    }

    /**
     * Operation gETReturnIdDestinationAddressWithHttpInfo
     *
     * Retrieve the destination address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnIdDestinationAddressWithHttpInfo($return_id)
    {
        $request = $this->gETReturnIdDestinationAddressRequest($return_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnIdDestinationAddressAsync
     *
     * Retrieve the destination address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdDestinationAddressAsync($return_id)
    {
        return $this->gETReturnIdDestinationAddressAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnIdDestinationAddressAsyncWithHttpInfo
     *
     * Retrieve the destination address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdDestinationAddressAsyncWithHttpInfo($return_id)
    {
        $returnType = '';
        $request = $this->gETReturnIdDestinationAddressRequest($return_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnIdDestinationAddress'
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnIdDestinationAddressRequest($return_id)
    {
        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling gETReturnIdDestinationAddress'
            );
        }

        $resourcePath = '/returns/{returnId}/destination_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnId' . '}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnIdOrder
     *
     * Retrieve the order associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnIdOrder($return_id)
    {
        $this->gETReturnIdOrderWithHttpInfo($return_id);
    }

    /**
     * Operation gETReturnIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnIdOrderWithHttpInfo($return_id)
    {
        $request = $this->gETReturnIdOrderRequest($return_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnIdOrderAsync
     *
     * Retrieve the order associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdOrderAsync($return_id)
    {
        return $this->gETReturnIdOrderAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdOrderAsyncWithHttpInfo($return_id)
    {
        $returnType = '';
        $request = $this->gETReturnIdOrderRequest($return_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnIdOrder'
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnIdOrderRequest($return_id)
    {
        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling gETReturnIdOrder'
            );
        }

        $resourcePath = '/returns/{returnId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnId' . '}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnIdOriginAddress
     *
     * Retrieve the origin address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnIdOriginAddress($return_id)
    {
        $this->gETReturnIdOriginAddressWithHttpInfo($return_id);
    }

    /**
     * Operation gETReturnIdOriginAddressWithHttpInfo
     *
     * Retrieve the origin address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnIdOriginAddressWithHttpInfo($return_id)
    {
        $request = $this->gETReturnIdOriginAddressRequest($return_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnIdOriginAddressAsync
     *
     * Retrieve the origin address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdOriginAddressAsync($return_id)
    {
        return $this->gETReturnIdOriginAddressAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnIdOriginAddressAsyncWithHttpInfo
     *
     * Retrieve the origin address associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdOriginAddressAsyncWithHttpInfo($return_id)
    {
        $returnType = '';
        $request = $this->gETReturnIdOriginAddressRequest($return_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnIdOriginAddress'
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnIdOriginAddressRequest($return_id)
    {
        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling gETReturnIdOriginAddress'
            );
        }

        $resourcePath = '/returns/{returnId}/origin_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnId' . '}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnIdStockLocation
     *
     * Retrieve the stock location associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnIdStockLocation($return_id)
    {
        $this->gETReturnIdStockLocationWithHttpInfo($return_id);
    }

    /**
     * Operation gETReturnIdStockLocationWithHttpInfo
     *
     * Retrieve the stock location associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnIdStockLocationWithHttpInfo($return_id)
    {
        $request = $this->gETReturnIdStockLocationRequest($return_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnIdStockLocationAsync
     *
     * Retrieve the stock location associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdStockLocationAsync($return_id)
    {
        return $this->gETReturnIdStockLocationAsyncWithHttpInfo($return_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnIdStockLocationAsyncWithHttpInfo
     *
     * Retrieve the stock location associated to the return
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnIdStockLocationAsyncWithHttpInfo($return_id)
    {
        $returnType = '';
        $request = $this->gETReturnIdStockLocationRequest($return_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnIdStockLocation'
     *
     * @param  string $return_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnIdStockLocationRequest($return_id)
    {
        // verify the required parameter 'return_id' is set
        if ($return_id === null || (is_array($return_id) && count($return_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_id when calling gETReturnIdStockLocation'
            );
        }

        $resourcePath = '/returns/{returnId}/stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnId' . '}',
                ObjectSerializer::toPathValue($return_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnLineItemIdLineItem
     *
     * Retrieve the line item associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnLineItemIdLineItem($return_line_item_id)
    {
        $this->gETReturnLineItemIdLineItemWithHttpInfo($return_line_item_id);
    }

    /**
     * Operation gETReturnLineItemIdLineItemWithHttpInfo
     *
     * Retrieve the line item associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnLineItemIdLineItemWithHttpInfo($return_line_item_id)
    {
        $request = $this->gETReturnLineItemIdLineItemRequest($return_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnLineItemIdLineItemAsync
     *
     * Retrieve the line item associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnLineItemIdLineItemAsync($return_line_item_id)
    {
        return $this->gETReturnLineItemIdLineItemAsyncWithHttpInfo($return_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnLineItemIdLineItemAsyncWithHttpInfo
     *
     * Retrieve the line item associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnLineItemIdLineItemAsyncWithHttpInfo($return_line_item_id)
    {
        $returnType = '';
        $request = $this->gETReturnLineItemIdLineItemRequest($return_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnLineItemIdLineItem'
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnLineItemIdLineItemRequest($return_line_item_id)
    {
        // verify the required parameter 'return_line_item_id' is set
        if ($return_line_item_id === null || (is_array($return_line_item_id) && count($return_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_line_item_id when calling gETReturnLineItemIdLineItem'
            );
        }

        $resourcePath = '/return_line_items/{returnLineItemId}/line_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnLineItemId' . '}',
                ObjectSerializer::toPathValue($return_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETReturnLineItemIdReturn
     *
     * Retrieve the return associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETReturnLineItemIdReturn($return_line_item_id)
    {
        $this->gETReturnLineItemIdReturnWithHttpInfo($return_line_item_id);
    }

    /**
     * Operation gETReturnLineItemIdReturnWithHttpInfo
     *
     * Retrieve the return associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETReturnLineItemIdReturnWithHttpInfo($return_line_item_id)
    {
        $request = $this->gETReturnLineItemIdReturnRequest($return_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETReturnLineItemIdReturnAsync
     *
     * Retrieve the return associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnLineItemIdReturnAsync($return_line_item_id)
    {
        return $this->gETReturnLineItemIdReturnAsyncWithHttpInfo($return_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETReturnLineItemIdReturnAsyncWithHttpInfo
     *
     * Retrieve the return associated to the return line item
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETReturnLineItemIdReturnAsyncWithHttpInfo($return_line_item_id)
    {
        $returnType = '';
        $request = $this->gETReturnLineItemIdReturnRequest($return_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETReturnLineItemIdReturn'
     *
     * @param  string $return_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETReturnLineItemIdReturnRequest($return_line_item_id)
    {
        // verify the required parameter 'return_line_item_id' is set
        if ($return_line_item_id === null || (is_array($return_line_item_id) && count($return_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_line_item_id when calling gETReturnLineItemIdReturn'
            );
        }

        $resourcePath = '/return_line_items/{returnLineItemId}/return';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($return_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnLineItemId' . '}',
                ObjectSerializer::toPathValue($return_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdDeliveryLeadTime
     *
     * Retrieve the delivery lead time associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdDeliveryLeadTime($shipment_id)
    {
        $this->gETShipmentIdDeliveryLeadTimeWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdDeliveryLeadTimeWithHttpInfo
     *
     * Retrieve the delivery lead time associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdDeliveryLeadTimeWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdDeliveryLeadTimeRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdDeliveryLeadTimeAsync
     *
     * Retrieve the delivery lead time associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdDeliveryLeadTimeAsync($shipment_id)
    {
        return $this->gETShipmentIdDeliveryLeadTimeAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdDeliveryLeadTimeAsyncWithHttpInfo
     *
     * Retrieve the delivery lead time associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdDeliveryLeadTimeAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdDeliveryLeadTimeRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdDeliveryLeadTime'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdDeliveryLeadTimeRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdDeliveryLeadTime'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/delivery_lead_time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdOrder
     *
     * Retrieve the order associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdOrder($shipment_id)
    {
        $this->gETShipmentIdOrderWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdOrderWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdOrderRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdOrderAsync
     *
     * Retrieve the order associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdOrderAsync($shipment_id)
    {
        return $this->gETShipmentIdOrderAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdOrderAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdOrderRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdOrder'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdOrderRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdOrder'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdOriginAddress
     *
     * Retrieve the origin address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdOriginAddress($shipment_id)
    {
        $this->gETShipmentIdOriginAddressWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdOriginAddressWithHttpInfo
     *
     * Retrieve the origin address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdOriginAddressWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdOriginAddressRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdOriginAddressAsync
     *
     * Retrieve the origin address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdOriginAddressAsync($shipment_id)
    {
        return $this->gETShipmentIdOriginAddressAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdOriginAddressAsyncWithHttpInfo
     *
     * Retrieve the origin address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdOriginAddressAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdOriginAddressRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdOriginAddress'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdOriginAddressRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdOriginAddress'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/origin_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdShippingAddress
     *
     * Retrieve the shipping address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdShippingAddress($shipment_id)
    {
        $this->gETShipmentIdShippingAddressWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdShippingAddressWithHttpInfo
     *
     * Retrieve the shipping address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdShippingAddressWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdShippingAddressRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdShippingAddressAsync
     *
     * Retrieve the shipping address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShippingAddressAsync($shipment_id)
    {
        return $this->gETShipmentIdShippingAddressAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdShippingAddressAsyncWithHttpInfo
     *
     * Retrieve the shipping address associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShippingAddressAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdShippingAddressRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdShippingAddress'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdShippingAddressRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdShippingAddress'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/shipping_address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdShippingCategory
     *
     * Retrieve the shipping category associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdShippingCategory($shipment_id)
    {
        $this->gETShipmentIdShippingCategoryWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdShippingCategoryWithHttpInfo
     *
     * Retrieve the shipping category associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdShippingCategoryWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdShippingCategoryRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdShippingCategoryAsync
     *
     * Retrieve the shipping category associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShippingCategoryAsync($shipment_id)
    {
        return $this->gETShipmentIdShippingCategoryAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdShippingCategoryAsyncWithHttpInfo
     *
     * Retrieve the shipping category associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShippingCategoryAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdShippingCategoryRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdShippingCategory'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdShippingCategoryRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdShippingCategory'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/shipping_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdShippingMethod
     *
     * Retrieve the shipping method associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdShippingMethod($shipment_id)
    {
        $this->gETShipmentIdShippingMethodWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdShippingMethodWithHttpInfo
     *
     * Retrieve the shipping method associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdShippingMethodWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdShippingMethodRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdShippingMethodAsync
     *
     * Retrieve the shipping method associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShippingMethodAsync($shipment_id)
    {
        return $this->gETShipmentIdShippingMethodAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdShippingMethodAsyncWithHttpInfo
     *
     * Retrieve the shipping method associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdShippingMethodAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdShippingMethodRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdShippingMethod'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdShippingMethodRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdShippingMethod'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/shipping_method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShipmentIdStockLocation
     *
     * Retrieve the stock location associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShipmentIdStockLocation($shipment_id)
    {
        $this->gETShipmentIdStockLocationWithHttpInfo($shipment_id);
    }

    /**
     * Operation gETShipmentIdStockLocationWithHttpInfo
     *
     * Retrieve the stock location associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShipmentIdStockLocationWithHttpInfo($shipment_id)
    {
        $request = $this->gETShipmentIdStockLocationRequest($shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShipmentIdStockLocationAsync
     *
     * Retrieve the stock location associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdStockLocationAsync($shipment_id)
    {
        return $this->gETShipmentIdStockLocationAsyncWithHttpInfo($shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShipmentIdStockLocationAsyncWithHttpInfo
     *
     * Retrieve the stock location associated to the shipment
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShipmentIdStockLocationAsyncWithHttpInfo($shipment_id)
    {
        $returnType = '';
        $request = $this->gETShipmentIdStockLocationRequest($shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShipmentIdStockLocation'
     *
     * @param  string $shipment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShipmentIdStockLocationRequest($shipment_id)
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling gETShipmentIdStockLocation'
            );
        }

        $resourcePath = '/shipments/{shipmentId}/stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingMethodIdDeliveryLeadTimeForShipment
     *
     * Retrieve the delivery lead time for shipment associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingMethodIdDeliveryLeadTimeForShipment($shipping_method_id)
    {
        $this->gETShippingMethodIdDeliveryLeadTimeForShipmentWithHttpInfo($shipping_method_id);
    }

    /**
     * Operation gETShippingMethodIdDeliveryLeadTimeForShipmentWithHttpInfo
     *
     * Retrieve the delivery lead time for shipment associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingMethodIdDeliveryLeadTimeForShipmentWithHttpInfo($shipping_method_id)
    {
        $request = $this->gETShippingMethodIdDeliveryLeadTimeForShipmentRequest($shipping_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingMethodIdDeliveryLeadTimeForShipmentAsync
     *
     * Retrieve the delivery lead time for shipment associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdDeliveryLeadTimeForShipmentAsync($shipping_method_id)
    {
        return $this->gETShippingMethodIdDeliveryLeadTimeForShipmentAsyncWithHttpInfo($shipping_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingMethodIdDeliveryLeadTimeForShipmentAsyncWithHttpInfo
     *
     * Retrieve the delivery lead time for shipment associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdDeliveryLeadTimeForShipmentAsyncWithHttpInfo($shipping_method_id)
    {
        $returnType = '';
        $request = $this->gETShippingMethodIdDeliveryLeadTimeForShipmentRequest($shipping_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingMethodIdDeliveryLeadTimeForShipment'
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingMethodIdDeliveryLeadTimeForShipmentRequest($shipping_method_id)
    {
        // verify the required parameter 'shipping_method_id' is set
        if ($shipping_method_id === null || (is_array($shipping_method_id) && count($shipping_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_method_id when calling gETShippingMethodIdDeliveryLeadTimeForShipment'
            );
        }

        $resourcePath = '/shipping_methods/{shippingMethodId}/delivery_lead_time_for_shipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingMethodId' . '}',
                ObjectSerializer::toPathValue($shipping_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingMethodIdMarket
     *
     * Retrieve the market associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingMethodIdMarket($shipping_method_id)
    {
        $this->gETShippingMethodIdMarketWithHttpInfo($shipping_method_id);
    }

    /**
     * Operation gETShippingMethodIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingMethodIdMarketWithHttpInfo($shipping_method_id)
    {
        $request = $this->gETShippingMethodIdMarketRequest($shipping_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingMethodIdMarketAsync
     *
     * Retrieve the market associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdMarketAsync($shipping_method_id)
    {
        return $this->gETShippingMethodIdMarketAsyncWithHttpInfo($shipping_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingMethodIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdMarketAsyncWithHttpInfo($shipping_method_id)
    {
        $returnType = '';
        $request = $this->gETShippingMethodIdMarketRequest($shipping_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingMethodIdMarket'
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingMethodIdMarketRequest($shipping_method_id)
    {
        // verify the required parameter 'shipping_method_id' is set
        if ($shipping_method_id === null || (is_array($shipping_method_id) && count($shipping_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_method_id when calling gETShippingMethodIdMarket'
            );
        }

        $resourcePath = '/shipping_methods/{shippingMethodId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingMethodId' . '}',
                ObjectSerializer::toPathValue($shipping_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingMethodIdShippingCategory
     *
     * Retrieve the shipping category associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingMethodIdShippingCategory($shipping_method_id)
    {
        $this->gETShippingMethodIdShippingCategoryWithHttpInfo($shipping_method_id);
    }

    /**
     * Operation gETShippingMethodIdShippingCategoryWithHttpInfo
     *
     * Retrieve the shipping category associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingMethodIdShippingCategoryWithHttpInfo($shipping_method_id)
    {
        $request = $this->gETShippingMethodIdShippingCategoryRequest($shipping_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingMethodIdShippingCategoryAsync
     *
     * Retrieve the shipping category associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdShippingCategoryAsync($shipping_method_id)
    {
        return $this->gETShippingMethodIdShippingCategoryAsyncWithHttpInfo($shipping_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingMethodIdShippingCategoryAsyncWithHttpInfo
     *
     * Retrieve the shipping category associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdShippingCategoryAsyncWithHttpInfo($shipping_method_id)
    {
        $returnType = '';
        $request = $this->gETShippingMethodIdShippingCategoryRequest($shipping_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingMethodIdShippingCategory'
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingMethodIdShippingCategoryRequest($shipping_method_id)
    {
        // verify the required parameter 'shipping_method_id' is set
        if ($shipping_method_id === null || (is_array($shipping_method_id) && count($shipping_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_method_id when calling gETShippingMethodIdShippingCategory'
            );
        }

        $resourcePath = '/shipping_methods/{shippingMethodId}/shipping_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingMethodId' . '}',
                ObjectSerializer::toPathValue($shipping_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETShippingMethodIdShippingZone
     *
     * Retrieve the shipping zone associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETShippingMethodIdShippingZone($shipping_method_id)
    {
        $this->gETShippingMethodIdShippingZoneWithHttpInfo($shipping_method_id);
    }

    /**
     * Operation gETShippingMethodIdShippingZoneWithHttpInfo
     *
     * Retrieve the shipping zone associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETShippingMethodIdShippingZoneWithHttpInfo($shipping_method_id)
    {
        $request = $this->gETShippingMethodIdShippingZoneRequest($shipping_method_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETShippingMethodIdShippingZoneAsync
     *
     * Retrieve the shipping zone associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdShippingZoneAsync($shipping_method_id)
    {
        return $this->gETShippingMethodIdShippingZoneAsyncWithHttpInfo($shipping_method_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETShippingMethodIdShippingZoneAsyncWithHttpInfo
     *
     * Retrieve the shipping zone associated to the shipping method
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETShippingMethodIdShippingZoneAsyncWithHttpInfo($shipping_method_id)
    {
        $returnType = '';
        $request = $this->gETShippingMethodIdShippingZoneRequest($shipping_method_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETShippingMethodIdShippingZone'
     *
     * @param  string $shipping_method_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETShippingMethodIdShippingZoneRequest($shipping_method_id)
    {
        // verify the required parameter 'shipping_method_id' is set
        if ($shipping_method_id === null || (is_array($shipping_method_id) && count($shipping_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_method_id when calling gETShippingMethodIdShippingZone'
            );
        }

        $resourcePath = '/shipping_methods/{shippingMethodId}/shipping_zone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($shipping_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingMethodId' . '}',
                ObjectSerializer::toPathValue($shipping_method_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuIdShippingCategory
     *
     * Retrieve the shipping category associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuIdShippingCategory($sku_id)
    {
        $this->gETSkuIdShippingCategoryWithHttpInfo($sku_id);
    }

    /**
     * Operation gETSkuIdShippingCategoryWithHttpInfo
     *
     * Retrieve the shipping category associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuIdShippingCategoryWithHttpInfo($sku_id)
    {
        $request = $this->gETSkuIdShippingCategoryRequest($sku_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuIdShippingCategoryAsync
     *
     * Retrieve the shipping category associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdShippingCategoryAsync($sku_id)
    {
        return $this->gETSkuIdShippingCategoryAsyncWithHttpInfo($sku_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuIdShippingCategoryAsyncWithHttpInfo
     *
     * Retrieve the shipping category associated to the SKU
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuIdShippingCategoryAsyncWithHttpInfo($sku_id)
    {
        $returnType = '';
        $request = $this->gETSkuIdShippingCategoryRequest($sku_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuIdShippingCategory'
     *
     * @param  string $sku_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuIdShippingCategoryRequest($sku_id)
    {
        // verify the required parameter 'sku_id' is set
        if ($sku_id === null || (is_array($sku_id) && count($sku_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_id when calling gETSkuIdShippingCategory'
            );
        }

        $resourcePath = '/skus/{skuId}/shipping_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuId' . '}',
                ObjectSerializer::toPathValue($sku_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuListItemIdSku
     *
     * Retrieve the sku associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuListItemIdSku($sku_list_item_id)
    {
        $this->gETSkuListItemIdSkuWithHttpInfo($sku_list_item_id);
    }

    /**
     * Operation gETSkuListItemIdSkuWithHttpInfo
     *
     * Retrieve the sku associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuListItemIdSkuWithHttpInfo($sku_list_item_id)
    {
        $request = $this->gETSkuListItemIdSkuRequest($sku_list_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuListItemIdSkuAsync
     *
     * Retrieve the sku associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListItemIdSkuAsync($sku_list_item_id)
    {
        return $this->gETSkuListItemIdSkuAsyncWithHttpInfo($sku_list_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuListItemIdSkuAsyncWithHttpInfo
     *
     * Retrieve the sku associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListItemIdSkuAsyncWithHttpInfo($sku_list_item_id)
    {
        $returnType = '';
        $request = $this->gETSkuListItemIdSkuRequest($sku_list_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuListItemIdSku'
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuListItemIdSkuRequest($sku_list_item_id)
    {
        // verify the required parameter 'sku_list_item_id' is set
        if ($sku_list_item_id === null || (is_array($sku_list_item_id) && count($sku_list_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_list_item_id when calling gETSkuListItemIdSku'
            );
        }

        $resourcePath = '/sku_list_items/{skuListItemId}/sku';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_list_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuListItemId' . '}',
                ObjectSerializer::toPathValue($sku_list_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuListItemIdSkuList
     *
     * Retrieve the sku list associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuListItemIdSkuList($sku_list_item_id)
    {
        $this->gETSkuListItemIdSkuListWithHttpInfo($sku_list_item_id);
    }

    /**
     * Operation gETSkuListItemIdSkuListWithHttpInfo
     *
     * Retrieve the sku list associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuListItemIdSkuListWithHttpInfo($sku_list_item_id)
    {
        $request = $this->gETSkuListItemIdSkuListRequest($sku_list_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuListItemIdSkuListAsync
     *
     * Retrieve the sku list associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListItemIdSkuListAsync($sku_list_item_id)
    {
        return $this->gETSkuListItemIdSkuListAsyncWithHttpInfo($sku_list_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuListItemIdSkuListAsyncWithHttpInfo
     *
     * Retrieve the sku list associated to the SKU list item
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListItemIdSkuListAsyncWithHttpInfo($sku_list_item_id)
    {
        $returnType = '';
        $request = $this->gETSkuListItemIdSkuListRequest($sku_list_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuListItemIdSkuList'
     *
     * @param  string $sku_list_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuListItemIdSkuListRequest($sku_list_item_id)
    {
        // verify the required parameter 'sku_list_item_id' is set
        if ($sku_list_item_id === null || (is_array($sku_list_item_id) && count($sku_list_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_list_item_id when calling gETSkuListItemIdSkuList'
            );
        }

        $resourcePath = '/sku_list_items/{skuListItemId}/sku_list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_list_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuListItemId' . '}',
                ObjectSerializer::toPathValue($sku_list_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkuList
     *
     * Retrieve the sku list associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuListPromotionRuleIdSkuList($sku_list_promotion_rule_id)
    {
        $this->gETSkuListPromotionRuleIdSkuListWithHttpInfo($sku_list_promotion_rule_id);
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkuListWithHttpInfo
     *
     * Retrieve the sku list associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuListPromotionRuleIdSkuListWithHttpInfo($sku_list_promotion_rule_id)
    {
        $request = $this->gETSkuListPromotionRuleIdSkuListRequest($sku_list_promotion_rule_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkuListAsync
     *
     * Retrieve the sku list associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListPromotionRuleIdSkuListAsync($sku_list_promotion_rule_id)
    {
        return $this->gETSkuListPromotionRuleIdSkuListAsyncWithHttpInfo($sku_list_promotion_rule_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuListPromotionRuleIdSkuListAsyncWithHttpInfo
     *
     * Retrieve the sku list associated to the SKU list promotion rule
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuListPromotionRuleIdSkuListAsyncWithHttpInfo($sku_list_promotion_rule_id)
    {
        $returnType = '';
        $request = $this->gETSkuListPromotionRuleIdSkuListRequest($sku_list_promotion_rule_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuListPromotionRuleIdSkuList'
     *
     * @param  string $sku_list_promotion_rule_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuListPromotionRuleIdSkuListRequest($sku_list_promotion_rule_id)
    {
        // verify the required parameter 'sku_list_promotion_rule_id' is set
        if ($sku_list_promotion_rule_id === null || (is_array($sku_list_promotion_rule_id) && count($sku_list_promotion_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_list_promotion_rule_id when calling gETSkuListPromotionRuleIdSkuList'
            );
        }

        $resourcePath = '/sku_list_promotion_rules/{skuListPromotionRuleId}/sku_list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_list_promotion_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuListPromotionRuleId' . '}',
                ObjectSerializer::toPathValue($sku_list_promotion_rule_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETSkuOptionIdMarket
     *
     * Retrieve the market associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETSkuOptionIdMarket($sku_option_id)
    {
        $this->gETSkuOptionIdMarketWithHttpInfo($sku_option_id);
    }

    /**
     * Operation gETSkuOptionIdMarketWithHttpInfo
     *
     * Retrieve the market associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETSkuOptionIdMarketWithHttpInfo($sku_option_id)
    {
        $request = $this->gETSkuOptionIdMarketRequest($sku_option_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETSkuOptionIdMarketAsync
     *
     * Retrieve the market associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuOptionIdMarketAsync($sku_option_id)
    {
        return $this->gETSkuOptionIdMarketAsyncWithHttpInfo($sku_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETSkuOptionIdMarketAsyncWithHttpInfo
     *
     * Retrieve the market associated to the SKU option
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETSkuOptionIdMarketAsyncWithHttpInfo($sku_option_id)
    {
        $returnType = '';
        $request = $this->gETSkuOptionIdMarketRequest($sku_option_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETSkuOptionIdMarket'
     *
     * @param  string $sku_option_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETSkuOptionIdMarketRequest($sku_option_id)
    {
        // verify the required parameter 'sku_option_id' is set
        if ($sku_option_id === null || (is_array($sku_option_id) && count($sku_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku_option_id when calling gETSkuOptionIdMarket'
            );
        }

        $resourcePath = '/sku_options/{skuOptionId}/market';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sku_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'skuOptionId' . '}',
                ObjectSerializer::toPathValue($sku_option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockItemIdSku
     *
     * Retrieve the sku associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockItemIdSku($stock_item_id)
    {
        $this->gETStockItemIdSkuWithHttpInfo($stock_item_id);
    }

    /**
     * Operation gETStockItemIdSkuWithHttpInfo
     *
     * Retrieve the sku associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockItemIdSkuWithHttpInfo($stock_item_id)
    {
        $request = $this->gETStockItemIdSkuRequest($stock_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockItemIdSkuAsync
     *
     * Retrieve the sku associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockItemIdSkuAsync($stock_item_id)
    {
        return $this->gETStockItemIdSkuAsyncWithHttpInfo($stock_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockItemIdSkuAsyncWithHttpInfo
     *
     * Retrieve the sku associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockItemIdSkuAsyncWithHttpInfo($stock_item_id)
    {
        $returnType = '';
        $request = $this->gETStockItemIdSkuRequest($stock_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockItemIdSku'
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockItemIdSkuRequest($stock_item_id)
    {
        // verify the required parameter 'stock_item_id' is set
        if ($stock_item_id === null || (is_array($stock_item_id) && count($stock_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_item_id when calling gETStockItemIdSku'
            );
        }

        $resourcePath = '/stock_items/{stockItemId}/sku';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockItemId' . '}',
                ObjectSerializer::toPathValue($stock_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockItemIdStockLocation
     *
     * Retrieve the stock location associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockItemIdStockLocation($stock_item_id)
    {
        $this->gETStockItemIdStockLocationWithHttpInfo($stock_item_id);
    }

    /**
     * Operation gETStockItemIdStockLocationWithHttpInfo
     *
     * Retrieve the stock location associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockItemIdStockLocationWithHttpInfo($stock_item_id)
    {
        $request = $this->gETStockItemIdStockLocationRequest($stock_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockItemIdStockLocationAsync
     *
     * Retrieve the stock location associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockItemIdStockLocationAsync($stock_item_id)
    {
        return $this->gETStockItemIdStockLocationAsyncWithHttpInfo($stock_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockItemIdStockLocationAsyncWithHttpInfo
     *
     * Retrieve the stock location associated to the stock item
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockItemIdStockLocationAsyncWithHttpInfo($stock_item_id)
    {
        $returnType = '';
        $request = $this->gETStockItemIdStockLocationRequest($stock_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockItemIdStockLocation'
     *
     * @param  string $stock_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockItemIdStockLocationRequest($stock_item_id)
    {
        // verify the required parameter 'stock_item_id' is set
        if ($stock_item_id === null || (is_array($stock_item_id) && count($stock_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_item_id when calling gETStockItemIdStockLocation'
            );
        }

        $resourcePath = '/stock_items/{stockItemId}/stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockItemId' . '}',
                ObjectSerializer::toPathValue($stock_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLineItemIdLineItem
     *
     * Retrieve the line item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLineItemIdLineItem($stock_line_item_id)
    {
        $this->gETStockLineItemIdLineItemWithHttpInfo($stock_line_item_id);
    }

    /**
     * Operation gETStockLineItemIdLineItemWithHttpInfo
     *
     * Retrieve the line item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLineItemIdLineItemWithHttpInfo($stock_line_item_id)
    {
        $request = $this->gETStockLineItemIdLineItemRequest($stock_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLineItemIdLineItemAsync
     *
     * Retrieve the line item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLineItemIdLineItemAsync($stock_line_item_id)
    {
        return $this->gETStockLineItemIdLineItemAsyncWithHttpInfo($stock_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLineItemIdLineItemAsyncWithHttpInfo
     *
     * Retrieve the line item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLineItemIdLineItemAsyncWithHttpInfo($stock_line_item_id)
    {
        $returnType = '';
        $request = $this->gETStockLineItemIdLineItemRequest($stock_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLineItemIdLineItem'
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLineItemIdLineItemRequest($stock_line_item_id)
    {
        // verify the required parameter 'stock_line_item_id' is set
        if ($stock_line_item_id === null || (is_array($stock_line_item_id) && count($stock_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_line_item_id when calling gETStockLineItemIdLineItem'
            );
        }

        $resourcePath = '/stock_line_items/{stockLineItemId}/line_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLineItemId' . '}',
                ObjectSerializer::toPathValue($stock_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLineItemIdShipment
     *
     * Retrieve the shipment associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLineItemIdShipment($stock_line_item_id)
    {
        $this->gETStockLineItemIdShipmentWithHttpInfo($stock_line_item_id);
    }

    /**
     * Operation gETStockLineItemIdShipmentWithHttpInfo
     *
     * Retrieve the shipment associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLineItemIdShipmentWithHttpInfo($stock_line_item_id)
    {
        $request = $this->gETStockLineItemIdShipmentRequest($stock_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLineItemIdShipmentAsync
     *
     * Retrieve the shipment associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLineItemIdShipmentAsync($stock_line_item_id)
    {
        return $this->gETStockLineItemIdShipmentAsyncWithHttpInfo($stock_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLineItemIdShipmentAsyncWithHttpInfo
     *
     * Retrieve the shipment associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLineItemIdShipmentAsyncWithHttpInfo($stock_line_item_id)
    {
        $returnType = '';
        $request = $this->gETStockLineItemIdShipmentRequest($stock_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLineItemIdShipment'
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLineItemIdShipmentRequest($stock_line_item_id)
    {
        // verify the required parameter 'stock_line_item_id' is set
        if ($stock_line_item_id === null || (is_array($stock_line_item_id) && count($stock_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_line_item_id when calling gETStockLineItemIdShipment'
            );
        }

        $resourcePath = '/stock_line_items/{stockLineItemId}/shipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLineItemId' . '}',
                ObjectSerializer::toPathValue($stock_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLineItemIdStockItem
     *
     * Retrieve the stock item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLineItemIdStockItem($stock_line_item_id)
    {
        $this->gETStockLineItemIdStockItemWithHttpInfo($stock_line_item_id);
    }

    /**
     * Operation gETStockLineItemIdStockItemWithHttpInfo
     *
     * Retrieve the stock item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLineItemIdStockItemWithHttpInfo($stock_line_item_id)
    {
        $request = $this->gETStockLineItemIdStockItemRequest($stock_line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLineItemIdStockItemAsync
     *
     * Retrieve the stock item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLineItemIdStockItemAsync($stock_line_item_id)
    {
        return $this->gETStockLineItemIdStockItemAsyncWithHttpInfo($stock_line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLineItemIdStockItemAsyncWithHttpInfo
     *
     * Retrieve the stock item associated to the stock line item
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLineItemIdStockItemAsyncWithHttpInfo($stock_line_item_id)
    {
        $returnType = '';
        $request = $this->gETStockLineItemIdStockItemRequest($stock_line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLineItemIdStockItem'
     *
     * @param  string $stock_line_item_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLineItemIdStockItemRequest($stock_line_item_id)
    {
        // verify the required parameter 'stock_line_item_id' is set
        if ($stock_line_item_id === null || (is_array($stock_line_item_id) && count($stock_line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_line_item_id when calling gETStockLineItemIdStockItem'
            );
        }

        $resourcePath = '/stock_line_items/{stockLineItemId}/stock_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLineItemId' . '}',
                ObjectSerializer::toPathValue($stock_line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockLocationIdAddress
     *
     * Retrieve the address associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockLocationIdAddress($stock_location_id)
    {
        $this->gETStockLocationIdAddressWithHttpInfo($stock_location_id);
    }

    /**
     * Operation gETStockLocationIdAddressWithHttpInfo
     *
     * Retrieve the address associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockLocationIdAddressWithHttpInfo($stock_location_id)
    {
        $request = $this->gETStockLocationIdAddressRequest($stock_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockLocationIdAddressAsync
     *
     * Retrieve the address associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdAddressAsync($stock_location_id)
    {
        return $this->gETStockLocationIdAddressAsyncWithHttpInfo($stock_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockLocationIdAddressAsyncWithHttpInfo
     *
     * Retrieve the address associated to the stock location
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockLocationIdAddressAsyncWithHttpInfo($stock_location_id)
    {
        $returnType = '';
        $request = $this->gETStockLocationIdAddressRequest($stock_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockLocationIdAddress'
     *
     * @param  string $stock_location_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockLocationIdAddressRequest($stock_location_id)
    {
        // verify the required parameter 'stock_location_id' is set
        if ($stock_location_id === null || (is_array($stock_location_id) && count($stock_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_location_id when calling gETStockLocationIdAddress'
            );
        }

        $resourcePath = '/stock_locations/{stockLocationId}/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockLocationId' . '}',
                ObjectSerializer::toPathValue($stock_location_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockTransferIdDestinationStockLocation
     *
     * Retrieve the destination stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockTransferIdDestinationStockLocation($stock_transfer_id)
    {
        $this->gETStockTransferIdDestinationStockLocationWithHttpInfo($stock_transfer_id);
    }

    /**
     * Operation gETStockTransferIdDestinationStockLocationWithHttpInfo
     *
     * Retrieve the destination stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockTransferIdDestinationStockLocationWithHttpInfo($stock_transfer_id)
    {
        $request = $this->gETStockTransferIdDestinationStockLocationRequest($stock_transfer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockTransferIdDestinationStockLocationAsync
     *
     * Retrieve the destination stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdDestinationStockLocationAsync($stock_transfer_id)
    {
        return $this->gETStockTransferIdDestinationStockLocationAsyncWithHttpInfo($stock_transfer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockTransferIdDestinationStockLocationAsyncWithHttpInfo
     *
     * Retrieve the destination stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdDestinationStockLocationAsyncWithHttpInfo($stock_transfer_id)
    {
        $returnType = '';
        $request = $this->gETStockTransferIdDestinationStockLocationRequest($stock_transfer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockTransferIdDestinationStockLocation'
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockTransferIdDestinationStockLocationRequest($stock_transfer_id)
    {
        // verify the required parameter 'stock_transfer_id' is set
        if ($stock_transfer_id === null || (is_array($stock_transfer_id) && count($stock_transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_transfer_id when calling gETStockTransferIdDestinationStockLocation'
            );
        }

        $resourcePath = '/stock_transfers/{stockTransferId}/destination_stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockTransferId' . '}',
                ObjectSerializer::toPathValue($stock_transfer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockTransferIdLineItem
     *
     * Retrieve the line item associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockTransferIdLineItem($stock_transfer_id)
    {
        $this->gETStockTransferIdLineItemWithHttpInfo($stock_transfer_id);
    }

    /**
     * Operation gETStockTransferIdLineItemWithHttpInfo
     *
     * Retrieve the line item associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockTransferIdLineItemWithHttpInfo($stock_transfer_id)
    {
        $request = $this->gETStockTransferIdLineItemRequest($stock_transfer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockTransferIdLineItemAsync
     *
     * Retrieve the line item associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdLineItemAsync($stock_transfer_id)
    {
        return $this->gETStockTransferIdLineItemAsyncWithHttpInfo($stock_transfer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockTransferIdLineItemAsyncWithHttpInfo
     *
     * Retrieve the line item associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdLineItemAsyncWithHttpInfo($stock_transfer_id)
    {
        $returnType = '';
        $request = $this->gETStockTransferIdLineItemRequest($stock_transfer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockTransferIdLineItem'
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockTransferIdLineItemRequest($stock_transfer_id)
    {
        // verify the required parameter 'stock_transfer_id' is set
        if ($stock_transfer_id === null || (is_array($stock_transfer_id) && count($stock_transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_transfer_id when calling gETStockTransferIdLineItem'
            );
        }

        $resourcePath = '/stock_transfers/{stockTransferId}/line_item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockTransferId' . '}',
                ObjectSerializer::toPathValue($stock_transfer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockTransferIdOriginStockLocation
     *
     * Retrieve the origin stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockTransferIdOriginStockLocation($stock_transfer_id)
    {
        $this->gETStockTransferIdOriginStockLocationWithHttpInfo($stock_transfer_id);
    }

    /**
     * Operation gETStockTransferIdOriginStockLocationWithHttpInfo
     *
     * Retrieve the origin stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockTransferIdOriginStockLocationWithHttpInfo($stock_transfer_id)
    {
        $request = $this->gETStockTransferIdOriginStockLocationRequest($stock_transfer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockTransferIdOriginStockLocationAsync
     *
     * Retrieve the origin stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdOriginStockLocationAsync($stock_transfer_id)
    {
        return $this->gETStockTransferIdOriginStockLocationAsyncWithHttpInfo($stock_transfer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockTransferIdOriginStockLocationAsyncWithHttpInfo
     *
     * Retrieve the origin stock location associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdOriginStockLocationAsyncWithHttpInfo($stock_transfer_id)
    {
        $returnType = '';
        $request = $this->gETStockTransferIdOriginStockLocationRequest($stock_transfer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockTransferIdOriginStockLocation'
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockTransferIdOriginStockLocationRequest($stock_transfer_id)
    {
        // verify the required parameter 'stock_transfer_id' is set
        if ($stock_transfer_id === null || (is_array($stock_transfer_id) && count($stock_transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_transfer_id when calling gETStockTransferIdOriginStockLocation'
            );
        }

        $resourcePath = '/stock_transfers/{stockTransferId}/origin_stock_location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockTransferId' . '}',
                ObjectSerializer::toPathValue($stock_transfer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockTransferIdShipment
     *
     * Retrieve the shipment associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockTransferIdShipment($stock_transfer_id)
    {
        $this->gETStockTransferIdShipmentWithHttpInfo($stock_transfer_id);
    }

    /**
     * Operation gETStockTransferIdShipmentWithHttpInfo
     *
     * Retrieve the shipment associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockTransferIdShipmentWithHttpInfo($stock_transfer_id)
    {
        $request = $this->gETStockTransferIdShipmentRequest($stock_transfer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockTransferIdShipmentAsync
     *
     * Retrieve the shipment associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdShipmentAsync($stock_transfer_id)
    {
        return $this->gETStockTransferIdShipmentAsyncWithHttpInfo($stock_transfer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockTransferIdShipmentAsyncWithHttpInfo
     *
     * Retrieve the shipment associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdShipmentAsyncWithHttpInfo($stock_transfer_id)
    {
        $returnType = '';
        $request = $this->gETStockTransferIdShipmentRequest($stock_transfer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockTransferIdShipment'
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockTransferIdShipmentRequest($stock_transfer_id)
    {
        // verify the required parameter 'stock_transfer_id' is set
        if ($stock_transfer_id === null || (is_array($stock_transfer_id) && count($stock_transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_transfer_id when calling gETStockTransferIdShipment'
            );
        }

        $resourcePath = '/stock_transfers/{stockTransferId}/shipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockTransferId' . '}',
                ObjectSerializer::toPathValue($stock_transfer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStockTransferIdSku
     *
     * Retrieve the sku associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStockTransferIdSku($stock_transfer_id)
    {
        $this->gETStockTransferIdSkuWithHttpInfo($stock_transfer_id);
    }

    /**
     * Operation gETStockTransferIdSkuWithHttpInfo
     *
     * Retrieve the sku associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStockTransferIdSkuWithHttpInfo($stock_transfer_id)
    {
        $request = $this->gETStockTransferIdSkuRequest($stock_transfer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStockTransferIdSkuAsync
     *
     * Retrieve the sku associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdSkuAsync($stock_transfer_id)
    {
        return $this->gETStockTransferIdSkuAsyncWithHttpInfo($stock_transfer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStockTransferIdSkuAsyncWithHttpInfo
     *
     * Retrieve the sku associated to the stock transfer
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStockTransferIdSkuAsyncWithHttpInfo($stock_transfer_id)
    {
        $returnType = '';
        $request = $this->gETStockTransferIdSkuRequest($stock_transfer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStockTransferIdSku'
     *
     * @param  string $stock_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStockTransferIdSkuRequest($stock_transfer_id)
    {
        // verify the required parameter 'stock_transfer_id' is set
        if ($stock_transfer_id === null || (is_array($stock_transfer_id) && count($stock_transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_transfer_id when calling gETStockTransferIdSku'
            );
        }

        $resourcePath = '/stock_transfers/{stockTransferId}/sku';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stock_transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stockTransferId' . '}',
                ObjectSerializer::toPathValue($stock_transfer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStripePaymentIdOrder
     *
     * Retrieve the order associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStripePaymentIdOrder($stripe_payment_id)
    {
        $this->gETStripePaymentIdOrderWithHttpInfo($stripe_payment_id);
    }

    /**
     * Operation gETStripePaymentIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStripePaymentIdOrderWithHttpInfo($stripe_payment_id)
    {
        $request = $this->gETStripePaymentIdOrderRequest($stripe_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStripePaymentIdOrderAsync
     *
     * Retrieve the order associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripePaymentIdOrderAsync($stripe_payment_id)
    {
        return $this->gETStripePaymentIdOrderAsyncWithHttpInfo($stripe_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStripePaymentIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripePaymentIdOrderAsyncWithHttpInfo($stripe_payment_id)
    {
        $returnType = '';
        $request = $this->gETStripePaymentIdOrderRequest($stripe_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStripePaymentIdOrder'
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStripePaymentIdOrderRequest($stripe_payment_id)
    {
        // verify the required parameter 'stripe_payment_id' is set
        if ($stripe_payment_id === null || (is_array($stripe_payment_id) && count($stripe_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stripe_payment_id when calling gETStripePaymentIdOrder'
            );
        }

        $resourcePath = '/stripe_payments/{stripePaymentId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stripe_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stripePaymentId' . '}',
                ObjectSerializer::toPathValue($stripe_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETStripePaymentIdPaymentGateway
     *
     * Retrieve the payment gateway associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETStripePaymentIdPaymentGateway($stripe_payment_id)
    {
        $this->gETStripePaymentIdPaymentGatewayWithHttpInfo($stripe_payment_id);
    }

    /**
     * Operation gETStripePaymentIdPaymentGatewayWithHttpInfo
     *
     * Retrieve the payment gateway associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETStripePaymentIdPaymentGatewayWithHttpInfo($stripe_payment_id)
    {
        $request = $this->gETStripePaymentIdPaymentGatewayRequest($stripe_payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETStripePaymentIdPaymentGatewayAsync
     *
     * Retrieve the payment gateway associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripePaymentIdPaymentGatewayAsync($stripe_payment_id)
    {
        return $this->gETStripePaymentIdPaymentGatewayAsyncWithHttpInfo($stripe_payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETStripePaymentIdPaymentGatewayAsyncWithHttpInfo
     *
     * Retrieve the payment gateway associated to the stripe payment
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETStripePaymentIdPaymentGatewayAsyncWithHttpInfo($stripe_payment_id)
    {
        $returnType = '';
        $request = $this->gETStripePaymentIdPaymentGatewayRequest($stripe_payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETStripePaymentIdPaymentGateway'
     *
     * @param  string $stripe_payment_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETStripePaymentIdPaymentGatewayRequest($stripe_payment_id)
    {
        // verify the required parameter 'stripe_payment_id' is set
        if ($stripe_payment_id === null || (is_array($stripe_payment_id) && count($stripe_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stripe_payment_id when calling gETStripePaymentIdPaymentGateway'
            );
        }

        $resourcePath = '/stripe_payments/{stripePaymentId}/payment_gateway';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($stripe_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stripePaymentId' . '}',
                ObjectSerializer::toPathValue($stripe_payment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETTaxCategoryIdSku
     *
     * Retrieve the sku associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETTaxCategoryIdSku($tax_category_id)
    {
        $this->gETTaxCategoryIdSkuWithHttpInfo($tax_category_id);
    }

    /**
     * Operation gETTaxCategoryIdSkuWithHttpInfo
     *
     * Retrieve the sku associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETTaxCategoryIdSkuWithHttpInfo($tax_category_id)
    {
        $request = $this->gETTaxCategoryIdSkuRequest($tax_category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETTaxCategoryIdSkuAsync
     *
     * Retrieve the sku associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCategoryIdSkuAsync($tax_category_id)
    {
        return $this->gETTaxCategoryIdSkuAsyncWithHttpInfo($tax_category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETTaxCategoryIdSkuAsyncWithHttpInfo
     *
     * Retrieve the sku associated to the tax category
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTaxCategoryIdSkuAsyncWithHttpInfo($tax_category_id)
    {
        $returnType = '';
        $request = $this->gETTaxCategoryIdSkuRequest($tax_category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETTaxCategoryIdSku'
     *
     * @param  string $tax_category_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETTaxCategoryIdSkuRequest($tax_category_id)
    {
        // verify the required parameter 'tax_category_id' is set
        if ($tax_category_id === null || (is_array($tax_category_id) && count($tax_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_category_id when calling gETTaxCategoryIdSku'
            );
        }

        $resourcePath = '/tax_categories/{taxCategoryId}/sku';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tax_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taxCategoryId' . '}',
                ObjectSerializer::toPathValue($tax_category_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETTransactionIdOrder
     *
     * Retrieve the order associated to the transaction
     *
     * @param  string $transaction_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETTransactionIdOrder($transaction_id)
    {
        $this->gETTransactionIdOrderWithHttpInfo($transaction_id);
    }

    /**
     * Operation gETTransactionIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the transaction
     *
     * @param  string $transaction_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETTransactionIdOrderWithHttpInfo($transaction_id)
    {
        $request = $this->gETTransactionIdOrderRequest($transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETTransactionIdOrderAsync
     *
     * Retrieve the order associated to the transaction
     *
     * @param  string $transaction_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTransactionIdOrderAsync($transaction_id)
    {
        return $this->gETTransactionIdOrderAsyncWithHttpInfo($transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETTransactionIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the transaction
     *
     * @param  string $transaction_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETTransactionIdOrderAsyncWithHttpInfo($transaction_id)
    {
        $returnType = '';
        $request = $this->gETTransactionIdOrderRequest($transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETTransactionIdOrder'
     *
     * @param  string $transaction_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETTransactionIdOrderRequest($transaction_id)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling gETTransactionIdOrder'
            );
        }

        $resourcePath = '/transactions/{transactionId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETVoidIdOrder
     *
     * Retrieve the order associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETVoidIdOrder($void_id)
    {
        $this->gETVoidIdOrderWithHttpInfo($void_id);
    }

    /**
     * Operation gETVoidIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETVoidIdOrderWithHttpInfo($void_id)
    {
        $request = $this->gETVoidIdOrderRequest($void_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETVoidIdOrderAsync
     *
     * Retrieve the order associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETVoidIdOrderAsync($void_id)
    {
        return $this->gETVoidIdOrderAsyncWithHttpInfo($void_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETVoidIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETVoidIdOrderAsyncWithHttpInfo($void_id)
    {
        $returnType = '';
        $request = $this->gETVoidIdOrderRequest($void_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETVoidIdOrder'
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETVoidIdOrderRequest($void_id)
    {
        // verify the required parameter 'void_id' is set
        if ($void_id === null || (is_array($void_id) && count($void_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $void_id when calling gETVoidIdOrder'
            );
        }

        $resourcePath = '/voids/{voidId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($void_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voidId' . '}',
                ObjectSerializer::toPathValue($void_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETVoidIdReferenceAuthorization
     *
     * Retrieve the reference authorization associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETVoidIdReferenceAuthorization($void_id)
    {
        $this->gETVoidIdReferenceAuthorizationWithHttpInfo($void_id);
    }

    /**
     * Operation gETVoidIdReferenceAuthorizationWithHttpInfo
     *
     * Retrieve the reference authorization associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETVoidIdReferenceAuthorizationWithHttpInfo($void_id)
    {
        $request = $this->gETVoidIdReferenceAuthorizationRequest($void_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETVoidIdReferenceAuthorizationAsync
     *
     * Retrieve the reference authorization associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETVoidIdReferenceAuthorizationAsync($void_id)
    {
        return $this->gETVoidIdReferenceAuthorizationAsyncWithHttpInfo($void_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETVoidIdReferenceAuthorizationAsyncWithHttpInfo
     *
     * Retrieve the reference authorization associated to the void
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETVoidIdReferenceAuthorizationAsyncWithHttpInfo($void_id)
    {
        $returnType = '';
        $request = $this->gETVoidIdReferenceAuthorizationRequest($void_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETVoidIdReferenceAuthorization'
     *
     * @param  string $void_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETVoidIdReferenceAuthorizationRequest($void_id)
    {
        // verify the required parameter 'void_id' is set
        if ($void_id === null || (is_array($void_id) && count($void_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $void_id when calling gETVoidIdReferenceAuthorization'
            );
        }

        $resourcePath = '/voids/{voidId}/reference_authorization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($void_id !== null) {
            $resourcePath = str_replace(
                '{' . 'voidId' . '}',
                ObjectSerializer::toPathValue($void_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETWireTransferIdOrder
     *
     * Retrieve the order associated to the wire transfer
     *
     * @param  string $wire_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function gETWireTransferIdOrder($wire_transfer_id)
    {
        $this->gETWireTransferIdOrderWithHttpInfo($wire_transfer_id);
    }

    /**
     * Operation gETWireTransferIdOrderWithHttpInfo
     *
     * Retrieve the order associated to the wire transfer
     *
     * @param  string $wire_transfer_id The resource&#39;s id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETWireTransferIdOrderWithHttpInfo($wire_transfer_id)
    {
        $request = $this->gETWireTransferIdOrderRequest($wire_transfer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation gETWireTransferIdOrderAsync
     *
     * Retrieve the order associated to the wire transfer
     *
     * @param  string $wire_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETWireTransferIdOrderAsync($wire_transfer_id)
    {
        return $this->gETWireTransferIdOrderAsyncWithHttpInfo($wire_transfer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETWireTransferIdOrderAsyncWithHttpInfo
     *
     * Retrieve the order associated to the wire transfer
     *
     * @param  string $wire_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETWireTransferIdOrderAsyncWithHttpInfo($wire_transfer_id)
    {
        $returnType = '';
        $request = $this->gETWireTransferIdOrderRequest($wire_transfer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETWireTransferIdOrder'
     *
     * @param  string $wire_transfer_id The resource&#39;s id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETWireTransferIdOrderRequest($wire_transfer_id)
    {
        // verify the required parameter 'wire_transfer_id' is set
        if ($wire_transfer_id === null || (is_array($wire_transfer_id) && count($wire_transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wire_transfer_id when calling gETWireTransferIdOrder'
            );
        }

        $resourcePath = '/wire_transfers/{wireTransferId}/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wire_transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wireTransferId' . '}',
                ObjectSerializer::toPathValue($wire_transfer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
