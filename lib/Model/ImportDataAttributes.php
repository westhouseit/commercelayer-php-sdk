<?php
/**
 * ImportDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImportDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ImportDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'import_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'resource_type' => 'string',
        'parent_resource_id' => 'string',
        'status' => 'string',
        'started_at' => 'string',
        'completed_at' => 'string',
        'interrupted_at' => 'string',
        'inputs' => 'object[]',
        'inputs_size' => 'int',
        'errors_count' => 'int',
        'warnings_count' => 'int',
        'destroyed_count' => 'int',
        'processed_count' => 'int',
        'errors_log' => 'object[]',
        'warnings_log' => 'object[]',
        'cleanup_records' => 'bool',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'resource_type' => null,
        'parent_resource_id' => null,
        'status' => null,
        'started_at' => null,
        'completed_at' => null,
        'interrupted_at' => null,
        'inputs' => null,
        'inputs_size' => null,
        'errors_count' => null,
        'warnings_count' => null,
        'destroyed_count' => null,
        'processed_count' => null,
        'errors_log' => null,
        'warnings_log' => null,
        'cleanup_records' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resource_type' => 'resource_type',
        'parent_resource_id' => 'parent_resource_id',
        'status' => 'status',
        'started_at' => 'started_at',
        'completed_at' => 'completed_at',
        'interrupted_at' => 'interrupted_at',
        'inputs' => 'inputs',
        'inputs_size' => 'inputs_size',
        'errors_count' => 'errors_count',
        'warnings_count' => 'warnings_count',
        'destroyed_count' => 'destroyed_count',
        'processed_count' => 'processed_count',
        'errors_log' => 'errors_log',
        'warnings_log' => 'warnings_log',
        'cleanup_records' => 'cleanup_records',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resource_type' => 'setResourceType',
        'parent_resource_id' => 'setParentResourceId',
        'status' => 'setStatus',
        'started_at' => 'setStartedAt',
        'completed_at' => 'setCompletedAt',
        'interrupted_at' => 'setInterruptedAt',
        'inputs' => 'setInputs',
        'inputs_size' => 'setInputsSize',
        'errors_count' => 'setErrorsCount',
        'warnings_count' => 'setWarningsCount',
        'destroyed_count' => 'setDestroyedCount',
        'processed_count' => 'setProcessedCount',
        'errors_log' => 'setErrorsLog',
        'warnings_log' => 'setWarningsLog',
        'cleanup_records' => 'setCleanupRecords',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resource_type' => 'getResourceType',
        'parent_resource_id' => 'getParentResourceId',
        'status' => 'getStatus',
        'started_at' => 'getStartedAt',
        'completed_at' => 'getCompletedAt',
        'interrupted_at' => 'getInterruptedAt',
        'inputs' => 'getInputs',
        'inputs_size' => 'getInputsSize',
        'errors_count' => 'getErrorsCount',
        'warnings_count' => 'getWarningsCount',
        'destroyed_count' => 'getDestroyedCount',
        'processed_count' => 'getProcessedCount',
        'errors_log' => 'getErrorsLog',
        'warnings_log' => 'getWarningsLog',
        'cleanup_records' => 'getCleanupRecords',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resource_type'] = $data['resource_type'] ?? null;
        $this->container['parent_resource_id'] = $data['parent_resource_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['started_at'] = $data['started_at'] ?? null;
        $this->container['completed_at'] = $data['completed_at'] ?? null;
        $this->container['interrupted_at'] = $data['interrupted_at'] ?? null;
        $this->container['inputs'] = $data['inputs'] ?? null;
        $this->container['inputs_size'] = $data['inputs_size'] ?? null;
        $this->container['errors_count'] = $data['errors_count'] ?? null;
        $this->container['warnings_count'] = $data['warnings_count'] ?? null;
        $this->container['destroyed_count'] = $data['destroyed_count'] ?? null;
        $this->container['processed_count'] = $data['processed_count'] ?? null;
        $this->container['errors_log'] = $data['errors_log'] ?? null;
        $this->container['warnings_log'] = $data['warnings_log'] ?? null;
        $this->container['cleanup_records'] = $data['cleanup_records'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resource_type
     *
     * @return string|null
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string|null $resource_type The type of resource being imported.
     *
     * @return self
     */
    public function setResourceType($resource_type)
    {
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets parent_resource_id
     *
     * @return string|null
     */
    public function getParentResourceId()
    {
        return $this->container['parent_resource_id'];
    }

    /**
     * Sets parent_resource_id
     *
     * @param string|null $parent_resource_id The ID of the parent resource to be associated with imported data.
     *
     * @return self
     */
    public function setParentResourceId($parent_resource_id)
    {
        $this->container['parent_resource_id'] = $parent_resource_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The import job status. One of 'pending' (default), 'started', or 'completed'
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return string|null
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param string|null $started_at Time at which the import was started.
     *
     * @return self
     */
    public function setStartedAt($started_at)
    {
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return string|null
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param string|null $completed_at Time at which the import was completed.
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets interrupted_at
     *
     * @return string|null
     */
    public function getInterruptedAt()
    {
        return $this->container['interrupted_at'];
    }

    /**
     * Sets interrupted_at
     *
     * @param string|null $interrupted_at Time at which the import was interrupted.
     *
     * @return self
     */
    public function setInterruptedAt($interrupted_at)
    {
        $this->container['interrupted_at'] = $interrupted_at;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return object[]|null
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param object[]|null $inputs Array of objects representing the resources that are being imported.
     *
     * @return self
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets inputs_size
     *
     * @return int|null
     */
    public function getInputsSize()
    {
        return $this->container['inputs_size'];
    }

    /**
     * Sets inputs_size
     *
     * @param int|null $inputs_size Indicates the size of the objects to be imported.
     *
     * @return self
     */
    public function setInputsSize($inputs_size)
    {
        $this->container['inputs_size'] = $inputs_size;

        return $this;
    }

    /**
     * Gets errors_count
     *
     * @return int|null
     */
    public function getErrorsCount()
    {
        return $this->container['errors_count'];
    }

    /**
     * Sets errors_count
     *
     * @param int|null $errors_count Indicates the number of import errors, if any.
     *
     * @return self
     */
    public function setErrorsCount($errors_count)
    {
        $this->container['errors_count'] = $errors_count;

        return $this;
    }

    /**
     * Gets warnings_count
     *
     * @return int|null
     */
    public function getWarningsCount()
    {
        return $this->container['warnings_count'];
    }

    /**
     * Sets warnings_count
     *
     * @param int|null $warnings_count Indicates the number of import warnings, if any.
     *
     * @return self
     */
    public function setWarningsCount($warnings_count)
    {
        $this->container['warnings_count'] = $warnings_count;

        return $this;
    }

    /**
     * Gets destroyed_count
     *
     * @return int|null
     */
    public function getDestroyedCount()
    {
        return $this->container['destroyed_count'];
    }

    /**
     * Sets destroyed_count
     *
     * @param int|null $destroyed_count Indicates the number of records that have been destroyed, if any.
     *
     * @return self
     */
    public function setDestroyedCount($destroyed_count)
    {
        $this->container['destroyed_count'] = $destroyed_count;

        return $this;
    }

    /**
     * Gets processed_count
     *
     * @return int|null
     */
    public function getProcessedCount()
    {
        return $this->container['processed_count'];
    }

    /**
     * Sets processed_count
     *
     * @param int|null $processed_count Indicates the number of records that have been processed (created or updated).
     *
     * @return self
     */
    public function setProcessedCount($processed_count)
    {
        $this->container['processed_count'] = $processed_count;

        return $this;
    }

    /**
     * Gets errors_log
     *
     * @return object[]|null
     */
    public function getErrorsLog()
    {
        return $this->container['errors_log'];
    }

    /**
     * Sets errors_log
     *
     * @param object[]|null $errors_log Contains the import errors, if any.
     *
     * @return self
     */
    public function setErrorsLog($errors_log)
    {
        $this->container['errors_log'] = $errors_log;

        return $this;
    }

    /**
     * Gets warnings_log
     *
     * @return object[]|null
     */
    public function getWarningsLog()
    {
        return $this->container['warnings_log'];
    }

    /**
     * Sets warnings_log
     *
     * @param object[]|null $warnings_log Contains the import warnings, if any.
     *
     * @return self
     */
    public function setWarningsLog($warnings_log)
    {
        $this->container['warnings_log'] = $warnings_log;

        return $this;
    }

    /**
     * Gets cleanup_records
     *
     * @return bool|null
     */
    public function getCleanupRecords()
    {
        return $this->container['cleanup_records'];
    }

    /**
     * Sets cleanup_records
     *
     * @param bool|null $cleanup_records Indicates if the import should cleanup records that are not included in the inputs array.
     *
     * @return self
     */
    public function setCleanupRecords($cleanup_records)
    {
        $this->container['cleanup_records'] = $cleanup_records;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


