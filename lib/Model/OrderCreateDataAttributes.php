<?php
/**
 * OrderCreateDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderCreateDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrderCreateDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderCreate_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guest' => 'bool',
        'customer_email' => 'string',
        'customer_password' => 'string',
        'language_code' => 'string',
        'shipping_country_code_lock' => 'string',
        'coupon_code' => 'string',
        'gift_card_code' => 'string',
        'gift_card_or_coupon_code' => 'string',
        'cart_url' => 'string',
        'return_url' => 'string',
        'terms_url' => 'string',
        'privacy_url' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'guest' => null,
        'customer_email' => null,
        'customer_password' => null,
        'language_code' => null,
        'shipping_country_code_lock' => null,
        'coupon_code' => null,
        'gift_card_code' => null,
        'gift_card_or_coupon_code' => null,
        'cart_url' => null,
        'return_url' => null,
        'terms_url' => null,
        'privacy_url' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guest' => 'guest',
        'customer_email' => 'customer_email',
        'customer_password' => 'customer_password',
        'language_code' => 'language_code',
        'shipping_country_code_lock' => 'shipping_country_code_lock',
        'coupon_code' => 'coupon_code',
        'gift_card_code' => 'gift_card_code',
        'gift_card_or_coupon_code' => 'gift_card_or_coupon_code',
        'cart_url' => 'cart_url',
        'return_url' => 'return_url',
        'terms_url' => 'terms_url',
        'privacy_url' => 'privacy_url',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guest' => 'setGuest',
        'customer_email' => 'setCustomerEmail',
        'customer_password' => 'setCustomerPassword',
        'language_code' => 'setLanguageCode',
        'shipping_country_code_lock' => 'setShippingCountryCodeLock',
        'coupon_code' => 'setCouponCode',
        'gift_card_code' => 'setGiftCardCode',
        'gift_card_or_coupon_code' => 'setGiftCardOrCouponCode',
        'cart_url' => 'setCartUrl',
        'return_url' => 'setReturnUrl',
        'terms_url' => 'setTermsUrl',
        'privacy_url' => 'setPrivacyUrl',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guest' => 'getGuest',
        'customer_email' => 'getCustomerEmail',
        'customer_password' => 'getCustomerPassword',
        'language_code' => 'getLanguageCode',
        'shipping_country_code_lock' => 'getShippingCountryCodeLock',
        'coupon_code' => 'getCouponCode',
        'gift_card_code' => 'getGiftCardCode',
        'gift_card_or_coupon_code' => 'getGiftCardOrCouponCode',
        'cart_url' => 'getCartUrl',
        'return_url' => 'getReturnUrl',
        'terms_url' => 'getTermsUrl',
        'privacy_url' => 'getPrivacyUrl',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guest'] = $data['guest'] ?? null;
        $this->container['customer_email'] = $data['customer_email'] ?? null;
        $this->container['customer_password'] = $data['customer_password'] ?? null;
        $this->container['language_code'] = $data['language_code'] ?? null;
        $this->container['shipping_country_code_lock'] = $data['shipping_country_code_lock'] ?? null;
        $this->container['coupon_code'] = $data['coupon_code'] ?? null;
        $this->container['gift_card_code'] = $data['gift_card_code'] ?? null;
        $this->container['gift_card_or_coupon_code'] = $data['gift_card_or_coupon_code'] ?? null;
        $this->container['cart_url'] = $data['cart_url'] ?? null;
        $this->container['return_url'] = $data['return_url'] ?? null;
        $this->container['terms_url'] = $data['terms_url'] ?? null;
        $this->container['privacy_url'] = $data['privacy_url'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guest
     *
     * @return bool|null
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param bool|null $guest Indicates if the order has been placed as guest.
     *
     * @return self
     */
    public function setGuest($guest)
    {
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email The email address of the associated customer. When creating or updating an order, this is a shortcut to find or create the associated customer by email.
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_password
     *
     * @return string|null
     */
    public function getCustomerPassword()
    {
        return $this->container['customer_password'];
    }

    /**
     * Sets customer_password
     *
     * @param string|null $customer_password The password of the associated customer. When creating or updating an order, this is a shortcut to sign up the associated customer.
     *
     * @return self
     */
    public function setCustomerPassword($customer_password)
    {
        $this->container['customer_password'] = $customer_password;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string|null
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string|null $language_code The preferred language code (ISO 639-1) to be used when communicating with the customer. This can be useful when sending the order to 3rd party marketing tools and CRMs. If the language is supported, the hosted checkout will be localized accordingly.
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets shipping_country_code_lock
     *
     * @return string|null
     */
    public function getShippingCountryCodeLock()
    {
        return $this->container['shipping_country_code_lock'];
    }

    /**
     * Sets shipping_country_code_lock
     *
     * @param string|null $shipping_country_code_lock The country code that you want the shipping address to be locked to. This can be useful to make sure the shipping address belongs to a given shipping country, e.g. the one selected in a country selector page.
     *
     * @return self
     */
    public function setShippingCountryCodeLock($shipping_country_code_lock)
    {
        $this->container['shipping_country_code_lock'] = $shipping_country_code_lock;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string|null
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string|null $coupon_code The coupon code to be used for the order. If valid, it triggers a promotion adding a discount line item to the order.
     *
     * @return self
     */
    public function setCouponCode($coupon_code)
    {
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets gift_card_code
     *
     * @return string|null
     */
    public function getGiftCardCode()
    {
        return $this->container['gift_card_code'];
    }

    /**
     * Sets gift_card_code
     *
     * @param string|null $gift_card_code The gift card code (at least the first 8 characters) to be used for the order. If valid, it uses the gift card balance to pay for the order.
     *
     * @return self
     */
    public function setGiftCardCode($gift_card_code)
    {
        $this->container['gift_card_code'] = $gift_card_code;

        return $this;
    }

    /**
     * Gets gift_card_or_coupon_code
     *
     * @return string|null
     */
    public function getGiftCardOrCouponCode()
    {
        return $this->container['gift_card_or_coupon_code'];
    }

    /**
     * Sets gift_card_or_coupon_code
     *
     * @param string|null $gift_card_or_coupon_code The gift card or coupon code (at least the first 8 characters) to be used for the order. If a gift card mathes, it uses the gift card balance to pay for the order. Otherwise it tries to find a valid coupon code and applies the associated discount.
     *
     * @return self
     */
    public function setGiftCardOrCouponCode($gift_card_or_coupon_code)
    {
        $this->container['gift_card_or_coupon_code'] = $gift_card_or_coupon_code;

        return $this;
    }

    /**
     * Gets cart_url
     *
     * @return string|null
     */
    public function getCartUrl()
    {
        return $this->container['cart_url'];
    }

    /**
     * Sets cart_url
     *
     * @param string|null $cart_url The cart url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setCartUrl($cart_url)
    {
        $this->container['cart_url'] = $cart_url;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string|null
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string|null $return_url The return url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets terms_url
     *
     * @return string|null
     */
    public function getTermsUrl()
    {
        return $this->container['terms_url'];
    }

    /**
     * Sets terms_url
     *
     * @param string|null $terms_url The terms and conditions url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setTermsUrl($terms_url)
    {
        $this->container['terms_url'] = $terms_url;

        return $this;
    }

    /**
     * Gets privacy_url
     *
     * @return string|null
     */
    public function getPrivacyUrl()
    {
        return $this->container['privacy_url'];
    }

    /**
     * Sets privacy_url
     *
     * @param string|null $privacy_url The privacy policy url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setPrivacyUrl($privacy_url)
    {
        $this->container['privacy_url'] = $privacy_url;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


