<?php
/**
 * ReturnUpdateDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReturnUpdateDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ReturnUpdateDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'returnUpdate_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_request' => 'bool',
        '_approve' => 'bool',
        '_cancel' => 'bool',
        '_ship' => 'bool',
        '_reject' => 'bool',
        '_receive' => 'bool',
        '_restock' => 'bool',
        '_archive' => 'bool',
        '_unarchive' => 'bool',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_request' => null,
        '_approve' => null,
        '_cancel' => null,
        '_ship' => null,
        '_reject' => null,
        '_receive' => null,
        '_restock' => null,
        '_archive' => null,
        '_unarchive' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_request' => '_request',
        '_approve' => '_approve',
        '_cancel' => '_cancel',
        '_ship' => '_ship',
        '_reject' => '_reject',
        '_receive' => '_receive',
        '_restock' => '_restock',
        '_archive' => '_archive',
        '_unarchive' => '_unarchive',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_request' => 'setRequest',
        '_approve' => 'setApprove',
        '_cancel' => 'setCancel',
        '_ship' => 'setShip',
        '_reject' => 'setReject',
        '_receive' => 'setReceive',
        '_restock' => 'setRestock',
        '_archive' => 'setArchive',
        '_unarchive' => 'setUnarchive',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_request' => 'getRequest',
        '_approve' => 'getApprove',
        '_cancel' => 'getCancel',
        '_ship' => 'getShip',
        '_reject' => 'getReject',
        '_receive' => 'getReceive',
        '_restock' => 'getRestock',
        '_archive' => 'getArchive',
        '_unarchive' => 'getUnarchive',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_request'] = $data['_request'] ?? null;
        $this->container['_approve'] = $data['_approve'] ?? null;
        $this->container['_cancel'] = $data['_cancel'] ?? null;
        $this->container['_ship'] = $data['_ship'] ?? null;
        $this->container['_reject'] = $data['_reject'] ?? null;
        $this->container['_receive'] = $data['_receive'] ?? null;
        $this->container['_restock'] = $data['_restock'] ?? null;
        $this->container['_archive'] = $data['_archive'] ?? null;
        $this->container['_unarchive'] = $data['_unarchive'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _request
     *
     * @return bool|null
     */
    public function getRequest()
    {
        return $this->container['_request'];
    }

    /**
     * Sets _request
     *
     * @param bool|null $_request Send this attribute if you want to activate this return.
     *
     * @return self
     */
    public function setRequest($_request)
    {
        $this->container['_request'] = $_request;

        return $this;
    }

    /**
     * Gets _approve
     *
     * @return bool|null
     */
    public function getApprove()
    {
        return $this->container['_approve'];
    }

    /**
     * Sets _approve
     *
     * @param bool|null $_approve Send this attribute if you want to mark this return as approved.
     *
     * @return self
     */
    public function setApprove($_approve)
    {
        $this->container['_approve'] = $_approve;

        return $this;
    }

    /**
     * Gets _cancel
     *
     * @return bool|null
     */
    public function getCancel()
    {
        return $this->container['_cancel'];
    }

    /**
     * Sets _cancel
     *
     * @param bool|null $_cancel Send this attribute if you want to mark this return as cancelled.
     *
     * @return self
     */
    public function setCancel($_cancel)
    {
        $this->container['_cancel'] = $_cancel;

        return $this;
    }

    /**
     * Gets _ship
     *
     * @return bool|null
     */
    public function getShip()
    {
        return $this->container['_ship'];
    }

    /**
     * Sets _ship
     *
     * @param bool|null $_ship Send this attribute if you want to mark this return as shipped.
     *
     * @return self
     */
    public function setShip($_ship)
    {
        $this->container['_ship'] = $_ship;

        return $this;
    }

    /**
     * Gets _reject
     *
     * @return bool|null
     */
    public function getReject()
    {
        return $this->container['_reject'];
    }

    /**
     * Sets _reject
     *
     * @param bool|null $_reject Send this attribute if you want to mark this return as rejected.
     *
     * @return self
     */
    public function setReject($_reject)
    {
        $this->container['_reject'] = $_reject;

        return $this;
    }

    /**
     * Gets _receive
     *
     * @return bool|null
     */
    public function getReceive()
    {
        return $this->container['_receive'];
    }

    /**
     * Sets _receive
     *
     * @param bool|null $_receive Send this attribute if you want to mark this return as received.
     *
     * @return self
     */
    public function setReceive($_receive)
    {
        $this->container['_receive'] = $_receive;

        return $this;
    }

    /**
     * Gets _restock
     *
     * @return bool|null
     */
    public function getRestock()
    {
        return $this->container['_restock'];
    }

    /**
     * Sets _restock
     *
     * @param bool|null $_restock Send this attribute if you want to restock all of the return line items.
     *
     * @return self
     */
    public function setRestock($_restock)
    {
        $this->container['_restock'] = $_restock;

        return $this;
    }

    /**
     * Gets _archive
     *
     * @return bool|null
     */
    public function getArchive()
    {
        return $this->container['_archive'];
    }

    /**
     * Sets _archive
     *
     * @param bool|null $_archive Send this attribute if you want to archive the return.
     *
     * @return self
     */
    public function setArchive($_archive)
    {
        $this->container['_archive'] = $_archive;

        return $this;
    }

    /**
     * Gets _unarchive
     *
     * @return bool|null
     */
    public function getUnarchive()
    {
        return $this->container['_unarchive'];
    }

    /**
     * Sets _unarchive
     *
     * @param bool|null $_unarchive Send this attribute if you want to unarchive the return.
     *
     * @return self
     */
    public function setUnarchive($_unarchive)
    {
        $this->container['_unarchive'] = $_unarchive;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


