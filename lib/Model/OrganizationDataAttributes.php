<?php
/**
 * OrganizationDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrganizationDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrganizationDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'organization_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'slug' => 'string',
        'domain' => 'string',
        'support_phone' => 'string',
        'support_email' => 'string',
        'logo_url' => 'string',
        'favicon_url' => 'string',
        'primary_color' => 'string',
        'contrast_color' => 'string',
        'gtm_id' => 'string',
        'gtm_id_test' => 'string',
        'discount_disabled' => 'bool',
        'account_disabled' => 'bool',
        'acceptance_disabled' => 'bool',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'slug' => null,
        'domain' => null,
        'support_phone' => null,
        'support_email' => null,
        'logo_url' => null,
        'favicon_url' => null,
        'primary_color' => null,
        'contrast_color' => null,
        'gtm_id' => null,
        'gtm_id_test' => null,
        'discount_disabled' => null,
        'account_disabled' => null,
        'acceptance_disabled' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'slug' => 'slug',
        'domain' => 'domain',
        'support_phone' => 'support_phone',
        'support_email' => 'support_email',
        'logo_url' => 'logo_url',
        'favicon_url' => 'favicon_url',
        'primary_color' => 'primary_color',
        'contrast_color' => 'contrast_color',
        'gtm_id' => 'gtm_id',
        'gtm_id_test' => 'gtm_id_test',
        'discount_disabled' => 'discount_disabled',
        'account_disabled' => 'account_disabled',
        'acceptance_disabled' => 'acceptance_disabled',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'slug' => 'setSlug',
        'domain' => 'setDomain',
        'support_phone' => 'setSupportPhone',
        'support_email' => 'setSupportEmail',
        'logo_url' => 'setLogoUrl',
        'favicon_url' => 'setFaviconUrl',
        'primary_color' => 'setPrimaryColor',
        'contrast_color' => 'setContrastColor',
        'gtm_id' => 'setGtmId',
        'gtm_id_test' => 'setGtmIdTest',
        'discount_disabled' => 'setDiscountDisabled',
        'account_disabled' => 'setAccountDisabled',
        'acceptance_disabled' => 'setAcceptanceDisabled',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'slug' => 'getSlug',
        'domain' => 'getDomain',
        'support_phone' => 'getSupportPhone',
        'support_email' => 'getSupportEmail',
        'logo_url' => 'getLogoUrl',
        'favicon_url' => 'getFaviconUrl',
        'primary_color' => 'getPrimaryColor',
        'contrast_color' => 'getContrastColor',
        'gtm_id' => 'getGtmId',
        'gtm_id_test' => 'getGtmIdTest',
        'discount_disabled' => 'getDiscountDisabled',
        'account_disabled' => 'getAccountDisabled',
        'acceptance_disabled' => 'getAcceptanceDisabled',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['support_phone'] = $data['support_phone'] ?? null;
        $this->container['support_email'] = $data['support_email'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['favicon_url'] = $data['favicon_url'] ?? null;
        $this->container['primary_color'] = $data['primary_color'] ?? null;
        $this->container['contrast_color'] = $data['contrast_color'] ?? null;
        $this->container['gtm_id'] = $data['gtm_id'] ?? null;
        $this->container['gtm_id_test'] = $data['gtm_id_test'] ?? null;
        $this->container['discount_disabled'] = $data['discount_disabled'] ?? null;
        $this->container['account_disabled'] = $data['account_disabled'] ?? null;
        $this->container['acceptance_disabled'] = $data['acceptance_disabled'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The organization's internal name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug The organization's slug name.
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain The organization's domain.
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets support_phone
     *
     * @return string|null
     */
    public function getSupportPhone()
    {
        return $this->container['support_phone'];
    }

    /**
     * Sets support_phone
     *
     * @param string|null $support_phone The organization's support phone.
     *
     * @return self
     */
    public function setSupportPhone($support_phone)
    {
        $this->container['support_phone'] = $support_phone;

        return $this;
    }

    /**
     * Gets support_email
     *
     * @return string|null
     */
    public function getSupportEmail()
    {
        return $this->container['support_email'];
    }

    /**
     * Sets support_email
     *
     * @param string|null $support_email The organization's support email.
     *
     * @return self
     */
    public function setSupportEmail($support_email)
    {
        $this->container['support_email'] = $support_email;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url The URL to the organization's logo.
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets favicon_url
     *
     * @return string|null
     */
    public function getFaviconUrl()
    {
        return $this->container['favicon_url'];
    }

    /**
     * Sets favicon_url
     *
     * @param string|null $favicon_url The URL to the organization's favicon.
     *
     * @return self
     */
    public function setFaviconUrl($favicon_url)
    {
        $this->container['favicon_url'] = $favicon_url;

        return $this;
    }

    /**
     * Gets primary_color
     *
     * @return string|null
     */
    public function getPrimaryColor()
    {
        return $this->container['primary_color'];
    }

    /**
     * Sets primary_color
     *
     * @param string|null $primary_color The organization's primary color.
     *
     * @return self
     */
    public function setPrimaryColor($primary_color)
    {
        $this->container['primary_color'] = $primary_color;

        return $this;
    }

    /**
     * Gets contrast_color
     *
     * @return string|null
     */
    public function getContrastColor()
    {
        return $this->container['contrast_color'];
    }

    /**
     * Sets contrast_color
     *
     * @param string|null $contrast_color The organization's contrast color.
     *
     * @return self
     */
    public function setContrastColor($contrast_color)
    {
        $this->container['contrast_color'] = $contrast_color;

        return $this;
    }

    /**
     * Gets gtm_id
     *
     * @return string|null
     */
    public function getGtmId()
    {
        return $this->container['gtm_id'];
    }

    /**
     * Sets gtm_id
     *
     * @param string|null $gtm_id The organization's Google Tag Manager ID.
     *
     * @return self
     */
    public function setGtmId($gtm_id)
    {
        $this->container['gtm_id'] = $gtm_id;

        return $this;
    }

    /**
     * Gets gtm_id_test
     *
     * @return string|null
     */
    public function getGtmIdTest()
    {
        return $this->container['gtm_id_test'];
    }

    /**
     * Sets gtm_id_test
     *
     * @param string|null $gtm_id_test The organization's Google Tag Manager ID for test.
     *
     * @return self
     */
    public function setGtmIdTest($gtm_id_test)
    {
        $this->container['gtm_id_test'] = $gtm_id_test;

        return $this;
    }

    /**
     * Gets discount_disabled
     *
     * @return bool|null
     */
    public function getDiscountDisabled()
    {
        return $this->container['discount_disabled'];
    }

    /**
     * Sets discount_disabled
     *
     * @param bool|null $discount_disabled Indicates if organization has discount disabled.
     *
     * @return self
     */
    public function setDiscountDisabled($discount_disabled)
    {
        $this->container['discount_disabled'] = $discount_disabled;

        return $this;
    }

    /**
     * Gets account_disabled
     *
     * @return bool|null
     */
    public function getAccountDisabled()
    {
        return $this->container['account_disabled'];
    }

    /**
     * Sets account_disabled
     *
     * @param bool|null $account_disabled Indicates if organization has account disabled.
     *
     * @return self
     */
    public function setAccountDisabled($account_disabled)
    {
        $this->container['account_disabled'] = $account_disabled;

        return $this;
    }

    /**
     * Gets acceptance_disabled
     *
     * @return bool|null
     */
    public function getAcceptanceDisabled()
    {
        return $this->container['acceptance_disabled'];
    }

    /**
     * Sets acceptance_disabled
     *
     * @param bool|null $acceptance_disabled Indicates if organization has acceptance disabled.
     *
     * @return self
     */
    public function setAcceptanceDisabled($acceptance_disabled)
    {
        $this->container['acceptance_disabled'] = $acceptance_disabled;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


