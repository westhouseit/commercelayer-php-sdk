<?php
/**
 * ShippingMethodDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ShippingMethodDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ShippingMethodDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shippingMethod_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'disabled_at' => 'string',
        'currency_code' => 'string',
        'price_amount_cents' => 'int',
        'price_amount_float' => 'float',
        'formatted_price_amount' => 'string',
        'free_over_amount_cents' => 'int',
        'free_over_amount_float' => 'float',
        'formatted_free_over_amount' => 'string',
        'price_amount_for_shipment_cents' => 'int',
        'price_amount_for_shipment_float' => 'float',
        'formatted_price_amount_for_shipment' => 'string',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'disabled_at' => null,
        'currency_code' => null,
        'price_amount_cents' => null,
        'price_amount_float' => null,
        'formatted_price_amount' => null,
        'free_over_amount_cents' => null,
        'free_over_amount_float' => null,
        'formatted_free_over_amount' => null,
        'price_amount_for_shipment_cents' => null,
        'price_amount_for_shipment_float' => null,
        'formatted_price_amount_for_shipment' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'disabled_at' => 'disabled_at',
        'currency_code' => 'currency_code',
        'price_amount_cents' => 'price_amount_cents',
        'price_amount_float' => 'price_amount_float',
        'formatted_price_amount' => 'formatted_price_amount',
        'free_over_amount_cents' => 'free_over_amount_cents',
        'free_over_amount_float' => 'free_over_amount_float',
        'formatted_free_over_amount' => 'formatted_free_over_amount',
        'price_amount_for_shipment_cents' => 'price_amount_for_shipment_cents',
        'price_amount_for_shipment_float' => 'price_amount_for_shipment_float',
        'formatted_price_amount_for_shipment' => 'formatted_price_amount_for_shipment',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'disabled_at' => 'setDisabledAt',
        'currency_code' => 'setCurrencyCode',
        'price_amount_cents' => 'setPriceAmountCents',
        'price_amount_float' => 'setPriceAmountFloat',
        'formatted_price_amount' => 'setFormattedPriceAmount',
        'free_over_amount_cents' => 'setFreeOverAmountCents',
        'free_over_amount_float' => 'setFreeOverAmountFloat',
        'formatted_free_over_amount' => 'setFormattedFreeOverAmount',
        'price_amount_for_shipment_cents' => 'setPriceAmountForShipmentCents',
        'price_amount_for_shipment_float' => 'setPriceAmountForShipmentFloat',
        'formatted_price_amount_for_shipment' => 'setFormattedPriceAmountForShipment',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'disabled_at' => 'getDisabledAt',
        'currency_code' => 'getCurrencyCode',
        'price_amount_cents' => 'getPriceAmountCents',
        'price_amount_float' => 'getPriceAmountFloat',
        'formatted_price_amount' => 'getFormattedPriceAmount',
        'free_over_amount_cents' => 'getFreeOverAmountCents',
        'free_over_amount_float' => 'getFreeOverAmountFloat',
        'formatted_free_over_amount' => 'getFormattedFreeOverAmount',
        'price_amount_for_shipment_cents' => 'getPriceAmountForShipmentCents',
        'price_amount_for_shipment_float' => 'getPriceAmountForShipmentFloat',
        'formatted_price_amount_for_shipment' => 'getFormattedPriceAmountForShipment',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['disabled_at'] = $data['disabled_at'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['price_amount_cents'] = $data['price_amount_cents'] ?? null;
        $this->container['price_amount_float'] = $data['price_amount_float'] ?? null;
        $this->container['formatted_price_amount'] = $data['formatted_price_amount'] ?? null;
        $this->container['free_over_amount_cents'] = $data['free_over_amount_cents'] ?? null;
        $this->container['free_over_amount_float'] = $data['free_over_amount_float'] ?? null;
        $this->container['formatted_free_over_amount'] = $data['formatted_free_over_amount'] ?? null;
        $this->container['price_amount_for_shipment_cents'] = $data['price_amount_for_shipment_cents'] ?? null;
        $this->container['price_amount_for_shipment_float'] = $data['price_amount_for_shipment_float'] ?? null;
        $this->container['formatted_price_amount_for_shipment'] = $data['formatted_price_amount_for_shipment'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The shipping method's name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets disabled_at
     *
     * @return string|null
     */
    public function getDisabledAt()
    {
        return $this->container['disabled_at'];
    }

    /**
     * Sets disabled_at
     *
     * @param string|null $disabled_at Time at which the shipping method was disabled.
     *
     * @return self
     */
    public function setDisabledAt($disabled_at)
    {
        $this->container['disabled_at'] = $disabled_at;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The international 3-letter currency code as defined by the ISO 4217 standard, automatically inherited from the associated market.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets price_amount_cents
     *
     * @return int|null
     */
    public function getPriceAmountCents()
    {
        return $this->container['price_amount_cents'];
    }

    /**
     * Sets price_amount_cents
     *
     * @param int|null $price_amount_cents The price of this shipping method, in cents.
     *
     * @return self
     */
    public function setPriceAmountCents($price_amount_cents)
    {
        $this->container['price_amount_cents'] = $price_amount_cents;

        return $this;
    }

    /**
     * Gets price_amount_float
     *
     * @return float|null
     */
    public function getPriceAmountFloat()
    {
        return $this->container['price_amount_float'];
    }

    /**
     * Sets price_amount_float
     *
     * @param float|null $price_amount_float The price of this shipping method, float.
     *
     * @return self
     */
    public function setPriceAmountFloat($price_amount_float)
    {
        $this->container['price_amount_float'] = $price_amount_float;

        return $this;
    }

    /**
     * Gets formatted_price_amount
     *
     * @return string|null
     */
    public function getFormattedPriceAmount()
    {
        return $this->container['formatted_price_amount'];
    }

    /**
     * Sets formatted_price_amount
     *
     * @param string|null $formatted_price_amount The price of this shipping method, formatted.
     *
     * @return self
     */
    public function setFormattedPriceAmount($formatted_price_amount)
    {
        $this->container['formatted_price_amount'] = $formatted_price_amount;

        return $this;
    }

    /**
     * Gets free_over_amount_cents
     *
     * @return int|null
     */
    public function getFreeOverAmountCents()
    {
        return $this->container['free_over_amount_cents'];
    }

    /**
     * Sets free_over_amount_cents
     *
     * @param int|null $free_over_amount_cents Apply free shipping if the order amount is over this value, in cents.
     *
     * @return self
     */
    public function setFreeOverAmountCents($free_over_amount_cents)
    {
        $this->container['free_over_amount_cents'] = $free_over_amount_cents;

        return $this;
    }

    /**
     * Gets free_over_amount_float
     *
     * @return float|null
     */
    public function getFreeOverAmountFloat()
    {
        return $this->container['free_over_amount_float'];
    }

    /**
     * Sets free_over_amount_float
     *
     * @param float|null $free_over_amount_float Apply free shipping if the order amount is over this value, float.
     *
     * @return self
     */
    public function setFreeOverAmountFloat($free_over_amount_float)
    {
        $this->container['free_over_amount_float'] = $free_over_amount_float;

        return $this;
    }

    /**
     * Gets formatted_free_over_amount
     *
     * @return string|null
     */
    public function getFormattedFreeOverAmount()
    {
        return $this->container['formatted_free_over_amount'];
    }

    /**
     * Sets formatted_free_over_amount
     *
     * @param string|null $formatted_free_over_amount Apply free shipping if the order amount is over this value, formatted.
     *
     * @return self
     */
    public function setFormattedFreeOverAmount($formatted_free_over_amount)
    {
        $this->container['formatted_free_over_amount'] = $formatted_free_over_amount;

        return $this;
    }

    /**
     * Gets price_amount_for_shipment_cents
     *
     * @return int|null
     */
    public function getPriceAmountForShipmentCents()
    {
        return $this->container['price_amount_for_shipment_cents'];
    }

    /**
     * Sets price_amount_for_shipment_cents
     *
     * @param int|null $price_amount_for_shipment_cents The calculated price (zero or price amount) when associated to a shipment, in cents.
     *
     * @return self
     */
    public function setPriceAmountForShipmentCents($price_amount_for_shipment_cents)
    {
        $this->container['price_amount_for_shipment_cents'] = $price_amount_for_shipment_cents;

        return $this;
    }

    /**
     * Gets price_amount_for_shipment_float
     *
     * @return float|null
     */
    public function getPriceAmountForShipmentFloat()
    {
        return $this->container['price_amount_for_shipment_float'];
    }

    /**
     * Sets price_amount_for_shipment_float
     *
     * @param float|null $price_amount_for_shipment_float The calculated price (zero or price amount) when associated to a shipment, float.
     *
     * @return self
     */
    public function setPriceAmountForShipmentFloat($price_amount_for_shipment_float)
    {
        $this->container['price_amount_for_shipment_float'] = $price_amount_for_shipment_float;

        return $this;
    }

    /**
     * Gets formatted_price_amount_for_shipment
     *
     * @return string|null
     */
    public function getFormattedPriceAmountForShipment()
    {
        return $this->container['formatted_price_amount_for_shipment'];
    }

    /**
     * Sets formatted_price_amount_for_shipment
     *
     * @param string|null $formatted_price_amount_for_shipment The calculated price (zero or price amount) when associated to a shipment, formatted.
     *
     * @return self
     */
    public function setFormattedPriceAmountForShipment($formatted_price_amount_for_shipment)
    {
        $this->container['formatted_price_amount_for_shipment'] = $formatted_price_amount_for_shipment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


