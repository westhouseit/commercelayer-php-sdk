<?php
/**
 * FixedAmountPromotionDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FixedAmountPromotionDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FixedAmountPromotionDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fixedAmountPromotion_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'starts_at' => 'string',
        'expires_at' => 'string',
        'total_usage_limit' => 'int',
        'total_usage_count' => 'int',
        'active' => 'bool',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object',
        'fixed_amount_cents' => 'int',
        'fixed_amount_float' => 'float',
        'formatted_fixed_amount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'starts_at' => null,
        'expires_at' => null,
        'total_usage_limit' => null,
        'total_usage_count' => null,
        'active' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null,
        'fixed_amount_cents' => null,
        'fixed_amount_float' => null,
        'formatted_fixed_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'starts_at' => 'starts_at',
        'expires_at' => 'expires_at',
        'total_usage_limit' => 'total_usage_limit',
        'total_usage_count' => 'total_usage_count',
        'active' => 'active',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata',
        'fixed_amount_cents' => 'fixed_amount_cents',
        'fixed_amount_float' => 'fixed_amount_float',
        'formatted_fixed_amount' => 'formatted_fixed_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'starts_at' => 'setStartsAt',
        'expires_at' => 'setExpiresAt',
        'total_usage_limit' => 'setTotalUsageLimit',
        'total_usage_count' => 'setTotalUsageCount',
        'active' => 'setActive',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata',
        'fixed_amount_cents' => 'setFixedAmountCents',
        'fixed_amount_float' => 'setFixedAmountFloat',
        'formatted_fixed_amount' => 'setFormattedFixedAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'starts_at' => 'getStartsAt',
        'expires_at' => 'getExpiresAt',
        'total_usage_limit' => 'getTotalUsageLimit',
        'total_usage_count' => 'getTotalUsageCount',
        'active' => 'getActive',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata',
        'fixed_amount_cents' => 'getFixedAmountCents',
        'fixed_amount_float' => 'getFixedAmountFloat',
        'formatted_fixed_amount' => 'getFormattedFixedAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['starts_at'] = $data['starts_at'] ?? null;
        $this->container['expires_at'] = $data['expires_at'] ?? null;
        $this->container['total_usage_limit'] = $data['total_usage_limit'] ?? null;
        $this->container['total_usage_count'] = $data['total_usage_count'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['fixed_amount_cents'] = $data['fixed_amount_cents'] ?? null;
        $this->container['fixed_amount_float'] = $data['fixed_amount_float'] ?? null;
        $this->container['formatted_fixed_amount'] = $data['formatted_fixed_amount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The promotion's internal name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets starts_at
     *
     * @return string|null
     */
    public function getStartsAt()
    {
        return $this->container['starts_at'];
    }

    /**
     * Sets starts_at
     *
     * @param string|null $starts_at The activation date/time of this promotion.
     *
     * @return self
     */
    public function setStartsAt($starts_at)
    {
        $this->container['starts_at'] = $starts_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string|null $expires_at The expiration date/time of this promotion (must be after starts_at).
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets total_usage_limit
     *
     * @return int|null
     */
    public function getTotalUsageLimit()
    {
        return $this->container['total_usage_limit'];
    }

    /**
     * Sets total_usage_limit
     *
     * @param int|null $total_usage_limit The total number of times this promotion can be applied.
     *
     * @return self
     */
    public function setTotalUsageLimit($total_usage_limit)
    {
        $this->container['total_usage_limit'] = $total_usage_limit;

        return $this;
    }

    /**
     * Gets total_usage_count
     *
     * @return int|null
     */
    public function getTotalUsageCount()
    {
        return $this->container['total_usage_count'];
    }

    /**
     * Sets total_usage_count
     *
     * @param int|null $total_usage_count The number of times this promotion has been applied.
     *
     * @return self
     */
    public function setTotalUsageCount($total_usage_count)
    {
        $this->container['total_usage_count'] = $total_usage_count;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Indicates if the promotion is active.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets fixed_amount_cents
     *
     * @return int|null
     */
    public function getFixedAmountCents()
    {
        return $this->container['fixed_amount_cents'];
    }

    /**
     * Sets fixed_amount_cents
     *
     * @param int|null $fixed_amount_cents The discount fixed amount to be applied, in cents
     *
     * @return self
     */
    public function setFixedAmountCents($fixed_amount_cents)
    {
        $this->container['fixed_amount_cents'] = $fixed_amount_cents;

        return $this;
    }

    /**
     * Gets fixed_amount_float
     *
     * @return float|null
     */
    public function getFixedAmountFloat()
    {
        return $this->container['fixed_amount_float'];
    }

    /**
     * Sets fixed_amount_float
     *
     * @param float|null $fixed_amount_float The discount fixed amount to be applied, float.
     *
     * @return self
     */
    public function setFixedAmountFloat($fixed_amount_float)
    {
        $this->container['fixed_amount_float'] = $fixed_amount_float;

        return $this;
    }

    /**
     * Gets formatted_fixed_amount
     *
     * @return string|null
     */
    public function getFormattedFixedAmount()
    {
        return $this->container['formatted_fixed_amount'];
    }

    /**
     * Sets formatted_fixed_amount
     *
     * @param string|null $formatted_fixed_amount The discount fixed amount to be applied, formatted.
     *
     * @return self
     */
    public function setFormattedFixedAmount($formatted_fixed_amount)
    {
        $this->container['formatted_fixed_amount'] = $formatted_fixed_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


