<?php
/**
 * AddressDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AddressDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AddressDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'address_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business' => 'bool',
        'first_name' => 'string',
        'last_name' => 'string',
        'company' => 'string',
        'full_name' => 'string',
        'line_1' => 'string',
        'line_2' => 'string',
        'city' => 'string',
        'zip_code' => 'string',
        'state_code' => 'string',
        'country_code' => 'string',
        'phone' => 'string',
        'full_address' => 'string',
        'name' => 'string',
        'email' => 'string',
        'notes' => 'string',
        'lat' => 'float',
        'lng' => 'float',
        'is_localized' => 'bool',
        'is_geocoded' => 'bool',
        'provider_name' => 'string',
        'map_url' => 'string',
        'static_map_url' => 'string',
        'billing_info' => 'string',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business' => null,
        'first_name' => null,
        'last_name' => null,
        'company' => null,
        'full_name' => null,
        'line_1' => null,
        'line_2' => null,
        'city' => null,
        'zip_code' => null,
        'state_code' => null,
        'country_code' => null,
        'phone' => null,
        'full_address' => null,
        'name' => null,
        'email' => null,
        'notes' => null,
        'lat' => null,
        'lng' => null,
        'is_localized' => null,
        'is_geocoded' => null,
        'provider_name' => null,
        'map_url' => null,
        'static_map_url' => null,
        'billing_info' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business' => 'business',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'company' => 'company',
        'full_name' => 'full_name',
        'line_1' => 'line_1',
        'line_2' => 'line_2',
        'city' => 'city',
        'zip_code' => 'zip_code',
        'state_code' => 'state_code',
        'country_code' => 'country_code',
        'phone' => 'phone',
        'full_address' => 'full_address',
        'name' => 'name',
        'email' => 'email',
        'notes' => 'notes',
        'lat' => 'lat',
        'lng' => 'lng',
        'is_localized' => 'is_localized',
        'is_geocoded' => 'is_geocoded',
        'provider_name' => 'provider_name',
        'map_url' => 'map_url',
        'static_map_url' => 'static_map_url',
        'billing_info' => 'billing_info',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business' => 'setBusiness',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'company' => 'setCompany',
        'full_name' => 'setFullName',
        'line_1' => 'setLine1',
        'line_2' => 'setLine2',
        'city' => 'setCity',
        'zip_code' => 'setZipCode',
        'state_code' => 'setStateCode',
        'country_code' => 'setCountryCode',
        'phone' => 'setPhone',
        'full_address' => 'setFullAddress',
        'name' => 'setName',
        'email' => 'setEmail',
        'notes' => 'setNotes',
        'lat' => 'setLat',
        'lng' => 'setLng',
        'is_localized' => 'setIsLocalized',
        'is_geocoded' => 'setIsGeocoded',
        'provider_name' => 'setProviderName',
        'map_url' => 'setMapUrl',
        'static_map_url' => 'setStaticMapUrl',
        'billing_info' => 'setBillingInfo',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business' => 'getBusiness',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'company' => 'getCompany',
        'full_name' => 'getFullName',
        'line_1' => 'getLine1',
        'line_2' => 'getLine2',
        'city' => 'getCity',
        'zip_code' => 'getZipCode',
        'state_code' => 'getStateCode',
        'country_code' => 'getCountryCode',
        'phone' => 'getPhone',
        'full_address' => 'getFullAddress',
        'name' => 'getName',
        'email' => 'getEmail',
        'notes' => 'getNotes',
        'lat' => 'getLat',
        'lng' => 'getLng',
        'is_localized' => 'getIsLocalized',
        'is_geocoded' => 'getIsGeocoded',
        'provider_name' => 'getProviderName',
        'map_url' => 'getMapUrl',
        'static_map_url' => 'getStaticMapUrl',
        'billing_info' => 'getBillingInfo',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business'] = $data['business'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['full_name'] = $data['full_name'] ?? null;
        $this->container['line_1'] = $data['line_1'] ?? null;
        $this->container['line_2'] = $data['line_2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['state_code'] = $data['state_code'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['full_address'] = $data['full_address'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['lat'] = $data['lat'] ?? null;
        $this->container['lng'] = $data['lng'] ?? null;
        $this->container['is_localized'] = $data['is_localized'] ?? null;
        $this->container['is_geocoded'] = $data['is_geocoded'] ?? null;
        $this->container['provider_name'] = $data['provider_name'] ?? null;
        $this->container['map_url'] = $data['map_url'] ?? null;
        $this->container['static_map_url'] = $data['static_map_url'] ?? null;
        $this->container['billing_info'] = $data['billing_info'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business
     *
     * @return bool|null
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param bool|null $business Indicates if it's a business or a personal address
     *
     * @return self
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Address first name (personal)
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Address last name (personal)
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Address company name (business)
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name Company name (business) of first name and last name (personal)
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets line_1
     *
     * @return string|null
     */
    public function getLine1()
    {
        return $this->container['line_1'];
    }

    /**
     * Sets line_1
     *
     * @param string|null $line_1 Address line 1, i.e. Street address, PO Box
     *
     * @return self
     */
    public function setLine1($line_1)
    {
        $this->container['line_1'] = $line_1;

        return $this;
    }

    /**
     * Gets line_2
     *
     * @return string|null
     */
    public function getLine2()
    {
        return $this->container['line_2'];
    }

    /**
     * Sets line_2
     *
     * @param string|null $line_2 Address line 2, i.e. Apartment, Suite, Building
     *
     * @return self
     */
    public function setLine2($line_2)
    {
        $this->container['line_2'] = $line_2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city Address city
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code ZIP or postal code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code State, province or region code.
     *
     * @return self
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The international 2-letter country code as defined by the ISO 3166-1 standard
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number (including extension).
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets full_address
     *
     * @return string|null
     */
    public function getFullAddress()
    {
        return $this->container['full_address'];
    }

    /**
     * Sets full_address
     *
     * @param string|null $full_address Compact description of the address location, without the full name
     *
     * @return self
     */
    public function setFullAddress($full_address)
    {
        $this->container['full_address'] = $full_address;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Compact description of the address location, including the full name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes A free notes attached to the address. When used as a shipping address, this can be useful to let the customers add specific delivery instructions.
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return float|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float|null $lat The address geocoded latitude. This is automatically generated when creating a shipping/billing address for an order and a valid geocoder is attached to the order's market.
     *
     * @return self
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lng
     *
     * @return float|null
     */
    public function getLng()
    {
        return $this->container['lng'];
    }

    /**
     * Sets lng
     *
     * @param float|null $lng The address geocoded longitude. This is automatically generated when creating a shipping/billing address for an order and a valid geocoder is attached to the order's market.
     *
     * @return self
     */
    public function setLng($lng)
    {
        $this->container['lng'] = $lng;

        return $this;
    }

    /**
     * Gets is_localized
     *
     * @return bool|null
     */
    public function getIsLocalized()
    {
        return $this->container['is_localized'];
    }

    /**
     * Sets is_localized
     *
     * @param bool|null $is_localized Indicates if the latitude and logitude are present, either geocoded or manually updated
     *
     * @return self
     */
    public function setIsLocalized($is_localized)
    {
        $this->container['is_localized'] = $is_localized;

        return $this;
    }

    /**
     * Gets is_geocoded
     *
     * @return bool|null
     */
    public function getIsGeocoded()
    {
        return $this->container['is_geocoded'];
    }

    /**
     * Sets is_geocoded
     *
     * @param bool|null $is_geocoded Indicates if the address has been successfully geocoded
     *
     * @return self
     */
    public function setIsGeocoded($is_geocoded)
    {
        $this->container['is_geocoded'] = $is_geocoded;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string|null
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string|null $provider_name The geocoder provider name (either Google or Bing)
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets map_url
     *
     * @return string|null
     */
    public function getMapUrl()
    {
        return $this->container['map_url'];
    }

    /**
     * Sets map_url
     *
     * @param string|null $map_url The map url of the geocoded address (if geocoded)
     *
     * @return self
     */
    public function setMapUrl($map_url)
    {
        $this->container['map_url'] = $map_url;

        return $this;
    }

    /**
     * Gets static_map_url
     *
     * @return string|null
     */
    public function getStaticMapUrl()
    {
        return $this->container['static_map_url'];
    }

    /**
     * Sets static_map_url
     *
     * @param string|null $static_map_url The static map image url of the geocoded address (if geocoded)
     *
     * @return self
     */
    public function setStaticMapUrl($static_map_url)
    {
        $this->container['static_map_url'] = $static_map_url;

        return $this;
    }

    /**
     * Gets billing_info
     *
     * @return string|null
     */
    public function getBillingInfo()
    {
        return $this->container['billing_info'];
    }

    /**
     * Sets billing_info
     *
     * @param string|null $billing_info Customer's billing information (i.e. VAT number, codice fiscale)
     *
     * @return self
     */
    public function setBillingInfo($billing_info)
    {
        $this->container['billing_info'] = $billing_info;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


