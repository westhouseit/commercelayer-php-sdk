<?php
/**
 * OrderDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrderDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'int',
        'status' => 'string',
        'payment_status' => 'string',
        'fulfillment_status' => 'string',
        'guest' => 'bool',
        'editable' => 'bool',
        'customer_email' => 'string',
        'language_code' => 'string',
        'currency_code' => 'string',
        'tax_included' => 'bool',
        'tax_rate' => 'float',
        'freight_taxable' => 'bool',
        'requires_billing_info' => 'bool',
        'country_code' => 'string',
        'shipping_country_code_lock' => 'string',
        'coupon_code' => 'string',
        'gift_card_code' => 'string',
        'gift_card_or_coupon_code' => 'string',
        'subtotal_amount_cents' => 'int',
        'subtotal_amount_float' => 'float',
        'formatted_subtotal_amount' => 'string',
        'shipping_amount_cents' => 'int',
        'shipping_amount_float' => 'float',
        'formatted_shipping_amount' => 'string',
        'payment_method_amount_cents' => 'int',
        'payment_method_amount_float' => 'float',
        'formatted_payment_method_amount' => 'string',
        'discount_amount_cents' => 'int',
        'discount_amount_float' => 'float',
        'formatted_discount_amount' => 'string',
        'adjustment_amount_cents' => 'int',
        'adjustment_amount_float' => 'float',
        'formatted_adjustment_amount' => 'string',
        'gift_card_amount_cents' => 'int',
        'gift_card_amount_float' => 'float',
        'formatted_gift_card_amount' => 'string',
        'total_tax_amount_cents' => 'int',
        'total_tax_amount_float' => 'float',
        'formatted_total_tax_amount' => 'string',
        'subtotal_tax_amount_cents' => 'int',
        'subtotal_tax_amount_float' => 'float',
        'formatted_subtotal_tax_amount' => 'string',
        'shipping_tax_amount_cents' => 'int',
        'shipping_tax_amount_float' => 'float',
        'formatted_shipping_tax_amount' => 'string',
        'payment_method_tax_amount_cents' => 'int',
        'payment_method_tax_amount_float' => 'float',
        'formatted_payment_method_tax_amount' => 'string',
        'adjustment_tax_amount_cents' => 'int',
        'adjustment_tax_amount_float' => 'float',
        'formatted_adjustment_tax_amount' => 'string',
        'total_amount_cents' => 'int',
        'total_amount_float' => 'float',
        'formatted_total_amount' => 'string',
        'total_taxable_amount_cents' => 'int',
        'total_taxable_amount_float' => 'float',
        'formatted_total_taxable_amount' => 'string',
        'subtotal_taxable_amount_cents' => 'int',
        'subtotal_taxable_amount_float' => 'float',
        'formatted_subtotal_taxable_amount' => 'string',
        'shipping_taxable_amount_cents' => 'int',
        'shipping_taxable_amount_float' => 'float',
        'formatted_shipping_taxable_amount' => 'string',
        'payment_method_taxable_amount_cents' => 'int',
        'payment_method_taxable_amount_float' => 'float',
        'formatted_payment_method_taxable_amount' => 'string',
        'adjustment_taxable_amount_cents' => 'int',
        'adjustment_taxable_amount_float' => 'float',
        'formatted_adjustment_taxable_amount' => 'string',
        'total_amount_with_taxes_cents' => 'int',
        'total_amount_with_taxes_float' => 'float',
        'formatted_total_amount_with_taxes' => 'string',
        'fees_amount_cents' => 'int',
        'fees_amount_float' => 'float',
        'formatted_fees_amount' => 'string',
        'duty_amount_cents' => 'int',
        'duty_amount_float' => 'float',
        'formatted_duty_amount' => 'string',
        'skus_count' => 'int',
        'line_item_options_count' => 'int',
        'shipments_count' => 'int',
        'payment_source_details' => 'object',
        'token' => 'string',
        'cart_url' => 'string',
        'return_url' => 'string',
        'terms_url' => 'string',
        'privacy_url' => 'string',
        'checkout_url' => 'string',
        'placed_at' => 'string',
        'approved_at' => 'string',
        'cancelled_at' => 'string',
        'payment_updated_at' => 'string',
        'fulfillment_updated_at' => 'string',
        'archived_at' => 'string',
        'expires_at' => 'string',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'status' => null,
        'payment_status' => null,
        'fulfillment_status' => null,
        'guest' => null,
        'editable' => null,
        'customer_email' => null,
        'language_code' => null,
        'currency_code' => null,
        'tax_included' => null,
        'tax_rate' => null,
        'freight_taxable' => null,
        'requires_billing_info' => null,
        'country_code' => null,
        'shipping_country_code_lock' => null,
        'coupon_code' => null,
        'gift_card_code' => null,
        'gift_card_or_coupon_code' => null,
        'subtotal_amount_cents' => null,
        'subtotal_amount_float' => null,
        'formatted_subtotal_amount' => null,
        'shipping_amount_cents' => null,
        'shipping_amount_float' => null,
        'formatted_shipping_amount' => null,
        'payment_method_amount_cents' => null,
        'payment_method_amount_float' => null,
        'formatted_payment_method_amount' => null,
        'discount_amount_cents' => null,
        'discount_amount_float' => null,
        'formatted_discount_amount' => null,
        'adjustment_amount_cents' => null,
        'adjustment_amount_float' => null,
        'formatted_adjustment_amount' => null,
        'gift_card_amount_cents' => null,
        'gift_card_amount_float' => null,
        'formatted_gift_card_amount' => null,
        'total_tax_amount_cents' => null,
        'total_tax_amount_float' => null,
        'formatted_total_tax_amount' => null,
        'subtotal_tax_amount_cents' => null,
        'subtotal_tax_amount_float' => null,
        'formatted_subtotal_tax_amount' => null,
        'shipping_tax_amount_cents' => null,
        'shipping_tax_amount_float' => null,
        'formatted_shipping_tax_amount' => null,
        'payment_method_tax_amount_cents' => null,
        'payment_method_tax_amount_float' => null,
        'formatted_payment_method_tax_amount' => null,
        'adjustment_tax_amount_cents' => null,
        'adjustment_tax_amount_float' => null,
        'formatted_adjustment_tax_amount' => null,
        'total_amount_cents' => null,
        'total_amount_float' => null,
        'formatted_total_amount' => null,
        'total_taxable_amount_cents' => null,
        'total_taxable_amount_float' => null,
        'formatted_total_taxable_amount' => null,
        'subtotal_taxable_amount_cents' => null,
        'subtotal_taxable_amount_float' => null,
        'formatted_subtotal_taxable_amount' => null,
        'shipping_taxable_amount_cents' => null,
        'shipping_taxable_amount_float' => null,
        'formatted_shipping_taxable_amount' => null,
        'payment_method_taxable_amount_cents' => null,
        'payment_method_taxable_amount_float' => null,
        'formatted_payment_method_taxable_amount' => null,
        'adjustment_taxable_amount_cents' => null,
        'adjustment_taxable_amount_float' => null,
        'formatted_adjustment_taxable_amount' => null,
        'total_amount_with_taxes_cents' => null,
        'total_amount_with_taxes_float' => null,
        'formatted_total_amount_with_taxes' => null,
        'fees_amount_cents' => null,
        'fees_amount_float' => null,
        'formatted_fees_amount' => null,
        'duty_amount_cents' => null,
        'duty_amount_float' => null,
        'formatted_duty_amount' => null,
        'skus_count' => null,
        'line_item_options_count' => null,
        'shipments_count' => null,
        'payment_source_details' => null,
        'token' => null,
        'cart_url' => null,
        'return_url' => null,
        'terms_url' => null,
        'privacy_url' => null,
        'checkout_url' => null,
        'placed_at' => null,
        'approved_at' => null,
        'cancelled_at' => null,
        'payment_updated_at' => null,
        'fulfillment_updated_at' => null,
        'archived_at' => null,
        'expires_at' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'status' => 'status',
        'payment_status' => 'payment_status',
        'fulfillment_status' => 'fulfillment_status',
        'guest' => 'guest',
        'editable' => 'editable',
        'customer_email' => 'customer_email',
        'language_code' => 'language_code',
        'currency_code' => 'currency_code',
        'tax_included' => 'tax_included',
        'tax_rate' => 'tax_rate',
        'freight_taxable' => 'freight_taxable',
        'requires_billing_info' => 'requires_billing_info',
        'country_code' => 'country_code',
        'shipping_country_code_lock' => 'shipping_country_code_lock',
        'coupon_code' => 'coupon_code',
        'gift_card_code' => 'gift_card_code',
        'gift_card_or_coupon_code' => 'gift_card_or_coupon_code',
        'subtotal_amount_cents' => 'subtotal_amount_cents',
        'subtotal_amount_float' => 'subtotal_amount_float',
        'formatted_subtotal_amount' => 'formatted_subtotal_amount',
        'shipping_amount_cents' => 'shipping_amount_cents',
        'shipping_amount_float' => 'shipping_amount_float',
        'formatted_shipping_amount' => 'formatted_shipping_amount',
        'payment_method_amount_cents' => 'payment_method_amount_cents',
        'payment_method_amount_float' => 'payment_method_amount_float',
        'formatted_payment_method_amount' => 'formatted_payment_method_amount',
        'discount_amount_cents' => 'discount_amount_cents',
        'discount_amount_float' => 'discount_amount_float',
        'formatted_discount_amount' => 'formatted_discount_amount',
        'adjustment_amount_cents' => 'adjustment_amount_cents',
        'adjustment_amount_float' => 'adjustment_amount_float',
        'formatted_adjustment_amount' => 'formatted_adjustment_amount',
        'gift_card_amount_cents' => 'gift_card_amount_cents',
        'gift_card_amount_float' => 'gift_card_amount_float',
        'formatted_gift_card_amount' => 'formatted_gift_card_amount',
        'total_tax_amount_cents' => 'total_tax_amount_cents',
        'total_tax_amount_float' => 'total_tax_amount_float',
        'formatted_total_tax_amount' => 'formatted_total_tax_amount',
        'subtotal_tax_amount_cents' => 'subtotal_tax_amount_cents',
        'subtotal_tax_amount_float' => 'subtotal_tax_amount_float',
        'formatted_subtotal_tax_amount' => 'formatted_subtotal_tax_amount',
        'shipping_tax_amount_cents' => 'shipping_tax_amount_cents',
        'shipping_tax_amount_float' => 'shipping_tax_amount_float',
        'formatted_shipping_tax_amount' => 'formatted_shipping_tax_amount',
        'payment_method_tax_amount_cents' => 'payment_method_tax_amount_cents',
        'payment_method_tax_amount_float' => 'payment_method_tax_amount_float',
        'formatted_payment_method_tax_amount' => 'formatted_payment_method_tax_amount',
        'adjustment_tax_amount_cents' => 'adjustment_tax_amount_cents',
        'adjustment_tax_amount_float' => 'adjustment_tax_amount_float',
        'formatted_adjustment_tax_amount' => 'formatted_adjustment_tax_amount',
        'total_amount_cents' => 'total_amount_cents',
        'total_amount_float' => 'total_amount_float',
        'formatted_total_amount' => 'formatted_total_amount',
        'total_taxable_amount_cents' => 'total_taxable_amount_cents',
        'total_taxable_amount_float' => 'total_taxable_amount_float',
        'formatted_total_taxable_amount' => 'formatted_total_taxable_amount',
        'subtotal_taxable_amount_cents' => 'subtotal_taxable_amount_cents',
        'subtotal_taxable_amount_float' => 'subtotal_taxable_amount_float',
        'formatted_subtotal_taxable_amount' => 'formatted_subtotal_taxable_amount',
        'shipping_taxable_amount_cents' => 'shipping_taxable_amount_cents',
        'shipping_taxable_amount_float' => 'shipping_taxable_amount_float',
        'formatted_shipping_taxable_amount' => 'formatted_shipping_taxable_amount',
        'payment_method_taxable_amount_cents' => 'payment_method_taxable_amount_cents',
        'payment_method_taxable_amount_float' => 'payment_method_taxable_amount_float',
        'formatted_payment_method_taxable_amount' => 'formatted_payment_method_taxable_amount',
        'adjustment_taxable_amount_cents' => 'adjustment_taxable_amount_cents',
        'adjustment_taxable_amount_float' => 'adjustment_taxable_amount_float',
        'formatted_adjustment_taxable_amount' => 'formatted_adjustment_taxable_amount',
        'total_amount_with_taxes_cents' => 'total_amount_with_taxes_cents',
        'total_amount_with_taxes_float' => 'total_amount_with_taxes_float',
        'formatted_total_amount_with_taxes' => 'formatted_total_amount_with_taxes',
        'fees_amount_cents' => 'fees_amount_cents',
        'fees_amount_float' => 'fees_amount_float',
        'formatted_fees_amount' => 'formatted_fees_amount',
        'duty_amount_cents' => 'duty_amount_cents',
        'duty_amount_float' => 'duty_amount_float',
        'formatted_duty_amount' => 'formatted_duty_amount',
        'skus_count' => 'skus_count',
        'line_item_options_count' => 'line_item_options_count',
        'shipments_count' => 'shipments_count',
        'payment_source_details' => 'payment_source_details',
        'token' => 'token',
        'cart_url' => 'cart_url',
        'return_url' => 'return_url',
        'terms_url' => 'terms_url',
        'privacy_url' => 'privacy_url',
        'checkout_url' => 'checkout_url',
        'placed_at' => 'placed_at',
        'approved_at' => 'approved_at',
        'cancelled_at' => 'cancelled_at',
        'payment_updated_at' => 'payment_updated_at',
        'fulfillment_updated_at' => 'fulfillment_updated_at',
        'archived_at' => 'archived_at',
        'expires_at' => 'expires_at',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'status' => 'setStatus',
        'payment_status' => 'setPaymentStatus',
        'fulfillment_status' => 'setFulfillmentStatus',
        'guest' => 'setGuest',
        'editable' => 'setEditable',
        'customer_email' => 'setCustomerEmail',
        'language_code' => 'setLanguageCode',
        'currency_code' => 'setCurrencyCode',
        'tax_included' => 'setTaxIncluded',
        'tax_rate' => 'setTaxRate',
        'freight_taxable' => 'setFreightTaxable',
        'requires_billing_info' => 'setRequiresBillingInfo',
        'country_code' => 'setCountryCode',
        'shipping_country_code_lock' => 'setShippingCountryCodeLock',
        'coupon_code' => 'setCouponCode',
        'gift_card_code' => 'setGiftCardCode',
        'gift_card_or_coupon_code' => 'setGiftCardOrCouponCode',
        'subtotal_amount_cents' => 'setSubtotalAmountCents',
        'subtotal_amount_float' => 'setSubtotalAmountFloat',
        'formatted_subtotal_amount' => 'setFormattedSubtotalAmount',
        'shipping_amount_cents' => 'setShippingAmountCents',
        'shipping_amount_float' => 'setShippingAmountFloat',
        'formatted_shipping_amount' => 'setFormattedShippingAmount',
        'payment_method_amount_cents' => 'setPaymentMethodAmountCents',
        'payment_method_amount_float' => 'setPaymentMethodAmountFloat',
        'formatted_payment_method_amount' => 'setFormattedPaymentMethodAmount',
        'discount_amount_cents' => 'setDiscountAmountCents',
        'discount_amount_float' => 'setDiscountAmountFloat',
        'formatted_discount_amount' => 'setFormattedDiscountAmount',
        'adjustment_amount_cents' => 'setAdjustmentAmountCents',
        'adjustment_amount_float' => 'setAdjustmentAmountFloat',
        'formatted_adjustment_amount' => 'setFormattedAdjustmentAmount',
        'gift_card_amount_cents' => 'setGiftCardAmountCents',
        'gift_card_amount_float' => 'setGiftCardAmountFloat',
        'formatted_gift_card_amount' => 'setFormattedGiftCardAmount',
        'total_tax_amount_cents' => 'setTotalTaxAmountCents',
        'total_tax_amount_float' => 'setTotalTaxAmountFloat',
        'formatted_total_tax_amount' => 'setFormattedTotalTaxAmount',
        'subtotal_tax_amount_cents' => 'setSubtotalTaxAmountCents',
        'subtotal_tax_amount_float' => 'setSubtotalTaxAmountFloat',
        'formatted_subtotal_tax_amount' => 'setFormattedSubtotalTaxAmount',
        'shipping_tax_amount_cents' => 'setShippingTaxAmountCents',
        'shipping_tax_amount_float' => 'setShippingTaxAmountFloat',
        'formatted_shipping_tax_amount' => 'setFormattedShippingTaxAmount',
        'payment_method_tax_amount_cents' => 'setPaymentMethodTaxAmountCents',
        'payment_method_tax_amount_float' => 'setPaymentMethodTaxAmountFloat',
        'formatted_payment_method_tax_amount' => 'setFormattedPaymentMethodTaxAmount',
        'adjustment_tax_amount_cents' => 'setAdjustmentTaxAmountCents',
        'adjustment_tax_amount_float' => 'setAdjustmentTaxAmountFloat',
        'formatted_adjustment_tax_amount' => 'setFormattedAdjustmentTaxAmount',
        'total_amount_cents' => 'setTotalAmountCents',
        'total_amount_float' => 'setTotalAmountFloat',
        'formatted_total_amount' => 'setFormattedTotalAmount',
        'total_taxable_amount_cents' => 'setTotalTaxableAmountCents',
        'total_taxable_amount_float' => 'setTotalTaxableAmountFloat',
        'formatted_total_taxable_amount' => 'setFormattedTotalTaxableAmount',
        'subtotal_taxable_amount_cents' => 'setSubtotalTaxableAmountCents',
        'subtotal_taxable_amount_float' => 'setSubtotalTaxableAmountFloat',
        'formatted_subtotal_taxable_amount' => 'setFormattedSubtotalTaxableAmount',
        'shipping_taxable_amount_cents' => 'setShippingTaxableAmountCents',
        'shipping_taxable_amount_float' => 'setShippingTaxableAmountFloat',
        'formatted_shipping_taxable_amount' => 'setFormattedShippingTaxableAmount',
        'payment_method_taxable_amount_cents' => 'setPaymentMethodTaxableAmountCents',
        'payment_method_taxable_amount_float' => 'setPaymentMethodTaxableAmountFloat',
        'formatted_payment_method_taxable_amount' => 'setFormattedPaymentMethodTaxableAmount',
        'adjustment_taxable_amount_cents' => 'setAdjustmentTaxableAmountCents',
        'adjustment_taxable_amount_float' => 'setAdjustmentTaxableAmountFloat',
        'formatted_adjustment_taxable_amount' => 'setFormattedAdjustmentTaxableAmount',
        'total_amount_with_taxes_cents' => 'setTotalAmountWithTaxesCents',
        'total_amount_with_taxes_float' => 'setTotalAmountWithTaxesFloat',
        'formatted_total_amount_with_taxes' => 'setFormattedTotalAmountWithTaxes',
        'fees_amount_cents' => 'setFeesAmountCents',
        'fees_amount_float' => 'setFeesAmountFloat',
        'formatted_fees_amount' => 'setFormattedFeesAmount',
        'duty_amount_cents' => 'setDutyAmountCents',
        'duty_amount_float' => 'setDutyAmountFloat',
        'formatted_duty_amount' => 'setFormattedDutyAmount',
        'skus_count' => 'setSkusCount',
        'line_item_options_count' => 'setLineItemOptionsCount',
        'shipments_count' => 'setShipmentsCount',
        'payment_source_details' => 'setPaymentSourceDetails',
        'token' => 'setToken',
        'cart_url' => 'setCartUrl',
        'return_url' => 'setReturnUrl',
        'terms_url' => 'setTermsUrl',
        'privacy_url' => 'setPrivacyUrl',
        'checkout_url' => 'setCheckoutUrl',
        'placed_at' => 'setPlacedAt',
        'approved_at' => 'setApprovedAt',
        'cancelled_at' => 'setCancelledAt',
        'payment_updated_at' => 'setPaymentUpdatedAt',
        'fulfillment_updated_at' => 'setFulfillmentUpdatedAt',
        'archived_at' => 'setArchivedAt',
        'expires_at' => 'setExpiresAt',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'status' => 'getStatus',
        'payment_status' => 'getPaymentStatus',
        'fulfillment_status' => 'getFulfillmentStatus',
        'guest' => 'getGuest',
        'editable' => 'getEditable',
        'customer_email' => 'getCustomerEmail',
        'language_code' => 'getLanguageCode',
        'currency_code' => 'getCurrencyCode',
        'tax_included' => 'getTaxIncluded',
        'tax_rate' => 'getTaxRate',
        'freight_taxable' => 'getFreightTaxable',
        'requires_billing_info' => 'getRequiresBillingInfo',
        'country_code' => 'getCountryCode',
        'shipping_country_code_lock' => 'getShippingCountryCodeLock',
        'coupon_code' => 'getCouponCode',
        'gift_card_code' => 'getGiftCardCode',
        'gift_card_or_coupon_code' => 'getGiftCardOrCouponCode',
        'subtotal_amount_cents' => 'getSubtotalAmountCents',
        'subtotal_amount_float' => 'getSubtotalAmountFloat',
        'formatted_subtotal_amount' => 'getFormattedSubtotalAmount',
        'shipping_amount_cents' => 'getShippingAmountCents',
        'shipping_amount_float' => 'getShippingAmountFloat',
        'formatted_shipping_amount' => 'getFormattedShippingAmount',
        'payment_method_amount_cents' => 'getPaymentMethodAmountCents',
        'payment_method_amount_float' => 'getPaymentMethodAmountFloat',
        'formatted_payment_method_amount' => 'getFormattedPaymentMethodAmount',
        'discount_amount_cents' => 'getDiscountAmountCents',
        'discount_amount_float' => 'getDiscountAmountFloat',
        'formatted_discount_amount' => 'getFormattedDiscountAmount',
        'adjustment_amount_cents' => 'getAdjustmentAmountCents',
        'adjustment_amount_float' => 'getAdjustmentAmountFloat',
        'formatted_adjustment_amount' => 'getFormattedAdjustmentAmount',
        'gift_card_amount_cents' => 'getGiftCardAmountCents',
        'gift_card_amount_float' => 'getGiftCardAmountFloat',
        'formatted_gift_card_amount' => 'getFormattedGiftCardAmount',
        'total_tax_amount_cents' => 'getTotalTaxAmountCents',
        'total_tax_amount_float' => 'getTotalTaxAmountFloat',
        'formatted_total_tax_amount' => 'getFormattedTotalTaxAmount',
        'subtotal_tax_amount_cents' => 'getSubtotalTaxAmountCents',
        'subtotal_tax_amount_float' => 'getSubtotalTaxAmountFloat',
        'formatted_subtotal_tax_amount' => 'getFormattedSubtotalTaxAmount',
        'shipping_tax_amount_cents' => 'getShippingTaxAmountCents',
        'shipping_tax_amount_float' => 'getShippingTaxAmountFloat',
        'formatted_shipping_tax_amount' => 'getFormattedShippingTaxAmount',
        'payment_method_tax_amount_cents' => 'getPaymentMethodTaxAmountCents',
        'payment_method_tax_amount_float' => 'getPaymentMethodTaxAmountFloat',
        'formatted_payment_method_tax_amount' => 'getFormattedPaymentMethodTaxAmount',
        'adjustment_tax_amount_cents' => 'getAdjustmentTaxAmountCents',
        'adjustment_tax_amount_float' => 'getAdjustmentTaxAmountFloat',
        'formatted_adjustment_tax_amount' => 'getFormattedAdjustmentTaxAmount',
        'total_amount_cents' => 'getTotalAmountCents',
        'total_amount_float' => 'getTotalAmountFloat',
        'formatted_total_amount' => 'getFormattedTotalAmount',
        'total_taxable_amount_cents' => 'getTotalTaxableAmountCents',
        'total_taxable_amount_float' => 'getTotalTaxableAmountFloat',
        'formatted_total_taxable_amount' => 'getFormattedTotalTaxableAmount',
        'subtotal_taxable_amount_cents' => 'getSubtotalTaxableAmountCents',
        'subtotal_taxable_amount_float' => 'getSubtotalTaxableAmountFloat',
        'formatted_subtotal_taxable_amount' => 'getFormattedSubtotalTaxableAmount',
        'shipping_taxable_amount_cents' => 'getShippingTaxableAmountCents',
        'shipping_taxable_amount_float' => 'getShippingTaxableAmountFloat',
        'formatted_shipping_taxable_amount' => 'getFormattedShippingTaxableAmount',
        'payment_method_taxable_amount_cents' => 'getPaymentMethodTaxableAmountCents',
        'payment_method_taxable_amount_float' => 'getPaymentMethodTaxableAmountFloat',
        'formatted_payment_method_taxable_amount' => 'getFormattedPaymentMethodTaxableAmount',
        'adjustment_taxable_amount_cents' => 'getAdjustmentTaxableAmountCents',
        'adjustment_taxable_amount_float' => 'getAdjustmentTaxableAmountFloat',
        'formatted_adjustment_taxable_amount' => 'getFormattedAdjustmentTaxableAmount',
        'total_amount_with_taxes_cents' => 'getTotalAmountWithTaxesCents',
        'total_amount_with_taxes_float' => 'getTotalAmountWithTaxesFloat',
        'formatted_total_amount_with_taxes' => 'getFormattedTotalAmountWithTaxes',
        'fees_amount_cents' => 'getFeesAmountCents',
        'fees_amount_float' => 'getFeesAmountFloat',
        'formatted_fees_amount' => 'getFormattedFeesAmount',
        'duty_amount_cents' => 'getDutyAmountCents',
        'duty_amount_float' => 'getDutyAmountFloat',
        'formatted_duty_amount' => 'getFormattedDutyAmount',
        'skus_count' => 'getSkusCount',
        'line_item_options_count' => 'getLineItemOptionsCount',
        'shipments_count' => 'getShipmentsCount',
        'payment_source_details' => 'getPaymentSourceDetails',
        'token' => 'getToken',
        'cart_url' => 'getCartUrl',
        'return_url' => 'getReturnUrl',
        'terms_url' => 'getTermsUrl',
        'privacy_url' => 'getPrivacyUrl',
        'checkout_url' => 'getCheckoutUrl',
        'placed_at' => 'getPlacedAt',
        'approved_at' => 'getApprovedAt',
        'cancelled_at' => 'getCancelledAt',
        'payment_updated_at' => 'getPaymentUpdatedAt',
        'fulfillment_updated_at' => 'getFulfillmentUpdatedAt',
        'archived_at' => 'getArchivedAt',
        'expires_at' => 'getExpiresAt',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = $data['number'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['payment_status'] = $data['payment_status'] ?? null;
        $this->container['fulfillment_status'] = $data['fulfillment_status'] ?? null;
        $this->container['guest'] = $data['guest'] ?? null;
        $this->container['editable'] = $data['editable'] ?? null;
        $this->container['customer_email'] = $data['customer_email'] ?? null;
        $this->container['language_code'] = $data['language_code'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['tax_included'] = $data['tax_included'] ?? null;
        $this->container['tax_rate'] = $data['tax_rate'] ?? null;
        $this->container['freight_taxable'] = $data['freight_taxable'] ?? null;
        $this->container['requires_billing_info'] = $data['requires_billing_info'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['shipping_country_code_lock'] = $data['shipping_country_code_lock'] ?? null;
        $this->container['coupon_code'] = $data['coupon_code'] ?? null;
        $this->container['gift_card_code'] = $data['gift_card_code'] ?? null;
        $this->container['gift_card_or_coupon_code'] = $data['gift_card_or_coupon_code'] ?? null;
        $this->container['subtotal_amount_cents'] = $data['subtotal_amount_cents'] ?? null;
        $this->container['subtotal_amount_float'] = $data['subtotal_amount_float'] ?? null;
        $this->container['formatted_subtotal_amount'] = $data['formatted_subtotal_amount'] ?? null;
        $this->container['shipping_amount_cents'] = $data['shipping_amount_cents'] ?? null;
        $this->container['shipping_amount_float'] = $data['shipping_amount_float'] ?? null;
        $this->container['formatted_shipping_amount'] = $data['formatted_shipping_amount'] ?? null;
        $this->container['payment_method_amount_cents'] = $data['payment_method_amount_cents'] ?? null;
        $this->container['payment_method_amount_float'] = $data['payment_method_amount_float'] ?? null;
        $this->container['formatted_payment_method_amount'] = $data['formatted_payment_method_amount'] ?? null;
        $this->container['discount_amount_cents'] = $data['discount_amount_cents'] ?? null;
        $this->container['discount_amount_float'] = $data['discount_amount_float'] ?? null;
        $this->container['formatted_discount_amount'] = $data['formatted_discount_amount'] ?? null;
        $this->container['adjustment_amount_cents'] = $data['adjustment_amount_cents'] ?? null;
        $this->container['adjustment_amount_float'] = $data['adjustment_amount_float'] ?? null;
        $this->container['formatted_adjustment_amount'] = $data['formatted_adjustment_amount'] ?? null;
        $this->container['gift_card_amount_cents'] = $data['gift_card_amount_cents'] ?? null;
        $this->container['gift_card_amount_float'] = $data['gift_card_amount_float'] ?? null;
        $this->container['formatted_gift_card_amount'] = $data['formatted_gift_card_amount'] ?? null;
        $this->container['total_tax_amount_cents'] = $data['total_tax_amount_cents'] ?? null;
        $this->container['total_tax_amount_float'] = $data['total_tax_amount_float'] ?? null;
        $this->container['formatted_total_tax_amount'] = $data['formatted_total_tax_amount'] ?? null;
        $this->container['subtotal_tax_amount_cents'] = $data['subtotal_tax_amount_cents'] ?? null;
        $this->container['subtotal_tax_amount_float'] = $data['subtotal_tax_amount_float'] ?? null;
        $this->container['formatted_subtotal_tax_amount'] = $data['formatted_subtotal_tax_amount'] ?? null;
        $this->container['shipping_tax_amount_cents'] = $data['shipping_tax_amount_cents'] ?? null;
        $this->container['shipping_tax_amount_float'] = $data['shipping_tax_amount_float'] ?? null;
        $this->container['formatted_shipping_tax_amount'] = $data['formatted_shipping_tax_amount'] ?? null;
        $this->container['payment_method_tax_amount_cents'] = $data['payment_method_tax_amount_cents'] ?? null;
        $this->container['payment_method_tax_amount_float'] = $data['payment_method_tax_amount_float'] ?? null;
        $this->container['formatted_payment_method_tax_amount'] = $data['formatted_payment_method_tax_amount'] ?? null;
        $this->container['adjustment_tax_amount_cents'] = $data['adjustment_tax_amount_cents'] ?? null;
        $this->container['adjustment_tax_amount_float'] = $data['adjustment_tax_amount_float'] ?? null;
        $this->container['formatted_adjustment_tax_amount'] = $data['formatted_adjustment_tax_amount'] ?? null;
        $this->container['total_amount_cents'] = $data['total_amount_cents'] ?? null;
        $this->container['total_amount_float'] = $data['total_amount_float'] ?? null;
        $this->container['formatted_total_amount'] = $data['formatted_total_amount'] ?? null;
        $this->container['total_taxable_amount_cents'] = $data['total_taxable_amount_cents'] ?? null;
        $this->container['total_taxable_amount_float'] = $data['total_taxable_amount_float'] ?? null;
        $this->container['formatted_total_taxable_amount'] = $data['formatted_total_taxable_amount'] ?? null;
        $this->container['subtotal_taxable_amount_cents'] = $data['subtotal_taxable_amount_cents'] ?? null;
        $this->container['subtotal_taxable_amount_float'] = $data['subtotal_taxable_amount_float'] ?? null;
        $this->container['formatted_subtotal_taxable_amount'] = $data['formatted_subtotal_taxable_amount'] ?? null;
        $this->container['shipping_taxable_amount_cents'] = $data['shipping_taxable_amount_cents'] ?? null;
        $this->container['shipping_taxable_amount_float'] = $data['shipping_taxable_amount_float'] ?? null;
        $this->container['formatted_shipping_taxable_amount'] = $data['formatted_shipping_taxable_amount'] ?? null;
        $this->container['payment_method_taxable_amount_cents'] = $data['payment_method_taxable_amount_cents'] ?? null;
        $this->container['payment_method_taxable_amount_float'] = $data['payment_method_taxable_amount_float'] ?? null;
        $this->container['formatted_payment_method_taxable_amount'] = $data['formatted_payment_method_taxable_amount'] ?? null;
        $this->container['adjustment_taxable_amount_cents'] = $data['adjustment_taxable_amount_cents'] ?? null;
        $this->container['adjustment_taxable_amount_float'] = $data['adjustment_taxable_amount_float'] ?? null;
        $this->container['formatted_adjustment_taxable_amount'] = $data['formatted_adjustment_taxable_amount'] ?? null;
        $this->container['total_amount_with_taxes_cents'] = $data['total_amount_with_taxes_cents'] ?? null;
        $this->container['total_amount_with_taxes_float'] = $data['total_amount_with_taxes_float'] ?? null;
        $this->container['formatted_total_amount_with_taxes'] = $data['formatted_total_amount_with_taxes'] ?? null;
        $this->container['fees_amount_cents'] = $data['fees_amount_cents'] ?? null;
        $this->container['fees_amount_float'] = $data['fees_amount_float'] ?? null;
        $this->container['formatted_fees_amount'] = $data['formatted_fees_amount'] ?? null;
        $this->container['duty_amount_cents'] = $data['duty_amount_cents'] ?? null;
        $this->container['duty_amount_float'] = $data['duty_amount_float'] ?? null;
        $this->container['formatted_duty_amount'] = $data['formatted_duty_amount'] ?? null;
        $this->container['skus_count'] = $data['skus_count'] ?? null;
        $this->container['line_item_options_count'] = $data['line_item_options_count'] ?? null;
        $this->container['shipments_count'] = $data['shipments_count'] ?? null;
        $this->container['payment_source_details'] = $data['payment_source_details'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['cart_url'] = $data['cart_url'] ?? null;
        $this->container['return_url'] = $data['return_url'] ?? null;
        $this->container['terms_url'] = $data['terms_url'] ?? null;
        $this->container['privacy_url'] = $data['privacy_url'] ?? null;
        $this->container['checkout_url'] = $data['checkout_url'] ?? null;
        $this->container['placed_at'] = $data['placed_at'] ?? null;
        $this->container['approved_at'] = $data['approved_at'] ?? null;
        $this->container['cancelled_at'] = $data['cancelled_at'] ?? null;
        $this->container['payment_updated_at'] = $data['payment_updated_at'] ?? null;
        $this->container['fulfillment_updated_at'] = $data['fulfillment_updated_at'] ?? null;
        $this->container['archived_at'] = $data['archived_at'] ?? null;
        $this->container['expires_at'] = $data['expires_at'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number Unique identifier for the order (numeric)
     *
     * @return self
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The order status. One of 'draft' (default), 'pending', 'placed', 'approved', or 'cancelled'
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status The order's payment status. One of 'unpaid' (default), 'authorized', 'paid', 'voided', or 'refunded'
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return string|null
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param string|null $fulfillment_status The order's fulfillment status. One of 'unfulfilled' (default), 'in_progress', or 'fulfilled'
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return bool|null
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param bool|null $guest Indicates if the order has been placed as guest.
     *
     * @return self
     */
    public function setGuest($guest)
    {
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Indicates if the order can be edited.
     *
     * @return self
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email The email address of the associated customer. When creating or updating an order, this is a shortcut to find or create the associated customer by email.
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string|null
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string|null $language_code The preferred language code (ISO 639-1) to be used when communicating with the customer. This can be useful when sending the order to 3rd party marketing tools and CRMs. If the language is supported, the hosted checkout will be localized accordingly.
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The international 3-letter currency code as defined by the ISO 4217 standard, automatically inherited from the order's market.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets tax_included
     *
     * @return bool|null
     */
    public function getTaxIncluded()
    {
        return $this->container['tax_included'];
    }

    /**
     * Sets tax_included
     *
     * @param bool|null $tax_included Indicates if taxes are included in the order amounts, automatically inherited from the order's price list.
     *
     * @return self
     */
    public function setTaxIncluded($tax_included)
    {
        $this->container['tax_included'] = $tax_included;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float|null $tax_rate The tax rate for this order (if calculated).
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets freight_taxable
     *
     * @return bool|null
     */
    public function getFreightTaxable()
    {
        return $this->container['freight_taxable'];
    }

    /**
     * Sets freight_taxable
     *
     * @param bool|null $freight_taxable Indicates if taxes are applied to shipping costs.
     *
     * @return self
     */
    public function setFreightTaxable($freight_taxable)
    {
        $this->container['freight_taxable'] = $freight_taxable;

        return $this;
    }

    /**
     * Gets requires_billing_info
     *
     * @return bool|null
     */
    public function getRequiresBillingInfo()
    {
        return $this->container['requires_billing_info'];
    }

    /**
     * Sets requires_billing_info
     *
     * @param bool|null $requires_billing_info Indicates if the billing address associated to this order requires billing info to be present.
     *
     * @return self
     */
    public function setRequiresBillingInfo($requires_billing_info)
    {
        $this->container['requires_billing_info'] = $requires_billing_info;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code The international 2-letter country code as defined by the ISO 3166-1 standard, automatically inherited from the order's shipping address.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets shipping_country_code_lock
     *
     * @return string|null
     */
    public function getShippingCountryCodeLock()
    {
        return $this->container['shipping_country_code_lock'];
    }

    /**
     * Sets shipping_country_code_lock
     *
     * @param string|null $shipping_country_code_lock The country code that you want the shipping address to be locked to. This can be useful to make sure the shipping address belongs to a given shipping country, e.g. the one selected in a country selector page.
     *
     * @return self
     */
    public function setShippingCountryCodeLock($shipping_country_code_lock)
    {
        $this->container['shipping_country_code_lock'] = $shipping_country_code_lock;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string|null
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string|null $coupon_code The coupon code to be used for the order. If valid, it triggers a promotion adding a discount line item to the order.
     *
     * @return self
     */
    public function setCouponCode($coupon_code)
    {
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets gift_card_code
     *
     * @return string|null
     */
    public function getGiftCardCode()
    {
        return $this->container['gift_card_code'];
    }

    /**
     * Sets gift_card_code
     *
     * @param string|null $gift_card_code The gift card code (at least the first 8 characters) to be used for the order. If valid, it uses the gift card balance to pay for the order.
     *
     * @return self
     */
    public function setGiftCardCode($gift_card_code)
    {
        $this->container['gift_card_code'] = $gift_card_code;

        return $this;
    }

    /**
     * Gets gift_card_or_coupon_code
     *
     * @return string|null
     */
    public function getGiftCardOrCouponCode()
    {
        return $this->container['gift_card_or_coupon_code'];
    }

    /**
     * Sets gift_card_or_coupon_code
     *
     * @param string|null $gift_card_or_coupon_code The gift card or coupon code (at least the first 8 characters) to be used for the order. If a gift card mathes, it uses the gift card balance to pay for the order. Otherwise it tries to find a valid coupon code and applies the associated discount.
     *
     * @return self
     */
    public function setGiftCardOrCouponCode($gift_card_or_coupon_code)
    {
        $this->container['gift_card_or_coupon_code'] = $gift_card_or_coupon_code;

        return $this;
    }

    /**
     * Gets subtotal_amount_cents
     *
     * @return int|null
     */
    public function getSubtotalAmountCents()
    {
        return $this->container['subtotal_amount_cents'];
    }

    /**
     * Sets subtotal_amount_cents
     *
     * @param int|null $subtotal_amount_cents The sum of all the sku line items total amounts, in cents.
     *
     * @return self
     */
    public function setSubtotalAmountCents($subtotal_amount_cents)
    {
        $this->container['subtotal_amount_cents'] = $subtotal_amount_cents;

        return $this;
    }

    /**
     * Gets subtotal_amount_float
     *
     * @return float|null
     */
    public function getSubtotalAmountFloat()
    {
        return $this->container['subtotal_amount_float'];
    }

    /**
     * Sets subtotal_amount_float
     *
     * @param float|null $subtotal_amount_float The sum of all the sku line items total amounts, float.
     *
     * @return self
     */
    public function setSubtotalAmountFloat($subtotal_amount_float)
    {
        $this->container['subtotal_amount_float'] = $subtotal_amount_float;

        return $this;
    }

    /**
     * Gets formatted_subtotal_amount
     *
     * @return string|null
     */
    public function getFormattedSubtotalAmount()
    {
        return $this->container['formatted_subtotal_amount'];
    }

    /**
     * Sets formatted_subtotal_amount
     *
     * @param string|null $formatted_subtotal_amount The sum of all the sku line items total amounts, formatted.
     *
     * @return self
     */
    public function setFormattedSubtotalAmount($formatted_subtotal_amount)
    {
        $this->container['formatted_subtotal_amount'] = $formatted_subtotal_amount;

        return $this;
    }

    /**
     * Gets shipping_amount_cents
     *
     * @return int|null
     */
    public function getShippingAmountCents()
    {
        return $this->container['shipping_amount_cents'];
    }

    /**
     * Sets shipping_amount_cents
     *
     * @param int|null $shipping_amount_cents The sum of all the shipping costs, in cents.
     *
     * @return self
     */
    public function setShippingAmountCents($shipping_amount_cents)
    {
        $this->container['shipping_amount_cents'] = $shipping_amount_cents;

        return $this;
    }

    /**
     * Gets shipping_amount_float
     *
     * @return float|null
     */
    public function getShippingAmountFloat()
    {
        return $this->container['shipping_amount_float'];
    }

    /**
     * Sets shipping_amount_float
     *
     * @param float|null $shipping_amount_float The sum of all the shipping costs, float.
     *
     * @return self
     */
    public function setShippingAmountFloat($shipping_amount_float)
    {
        $this->container['shipping_amount_float'] = $shipping_amount_float;

        return $this;
    }

    /**
     * Gets formatted_shipping_amount
     *
     * @return string|null
     */
    public function getFormattedShippingAmount()
    {
        return $this->container['formatted_shipping_amount'];
    }

    /**
     * Sets formatted_shipping_amount
     *
     * @param string|null $formatted_shipping_amount The sum of all the shipping costs, formatted.
     *
     * @return self
     */
    public function setFormattedShippingAmount($formatted_shipping_amount)
    {
        $this->container['formatted_shipping_amount'] = $formatted_shipping_amount;

        return $this;
    }

    /**
     * Gets payment_method_amount_cents
     *
     * @return int|null
     */
    public function getPaymentMethodAmountCents()
    {
        return $this->container['payment_method_amount_cents'];
    }

    /**
     * Sets payment_method_amount_cents
     *
     * @param int|null $payment_method_amount_cents The payment method costs, in cents.
     *
     * @return self
     */
    public function setPaymentMethodAmountCents($payment_method_amount_cents)
    {
        $this->container['payment_method_amount_cents'] = $payment_method_amount_cents;

        return $this;
    }

    /**
     * Gets payment_method_amount_float
     *
     * @return float|null
     */
    public function getPaymentMethodAmountFloat()
    {
        return $this->container['payment_method_amount_float'];
    }

    /**
     * Sets payment_method_amount_float
     *
     * @param float|null $payment_method_amount_float The payment method costs, float.
     *
     * @return self
     */
    public function setPaymentMethodAmountFloat($payment_method_amount_float)
    {
        $this->container['payment_method_amount_float'] = $payment_method_amount_float;

        return $this;
    }

    /**
     * Gets formatted_payment_method_amount
     *
     * @return string|null
     */
    public function getFormattedPaymentMethodAmount()
    {
        return $this->container['formatted_payment_method_amount'];
    }

    /**
     * Sets formatted_payment_method_amount
     *
     * @param string|null $formatted_payment_method_amount The payment method costs, formatted.
     *
     * @return self
     */
    public function setFormattedPaymentMethodAmount($formatted_payment_method_amount)
    {
        $this->container['formatted_payment_method_amount'] = $formatted_payment_method_amount;

        return $this;
    }

    /**
     * Gets discount_amount_cents
     *
     * @return int|null
     */
    public function getDiscountAmountCents()
    {
        return $this->container['discount_amount_cents'];
    }

    /**
     * Sets discount_amount_cents
     *
     * @param int|null $discount_amount_cents The sum of all the discounts applied to the order, in cents (negative amount).
     *
     * @return self
     */
    public function setDiscountAmountCents($discount_amount_cents)
    {
        $this->container['discount_amount_cents'] = $discount_amount_cents;

        return $this;
    }

    /**
     * Gets discount_amount_float
     *
     * @return float|null
     */
    public function getDiscountAmountFloat()
    {
        return $this->container['discount_amount_float'];
    }

    /**
     * Sets discount_amount_float
     *
     * @param float|null $discount_amount_float The sum of all the discounts applied to the order, float.
     *
     * @return self
     */
    public function setDiscountAmountFloat($discount_amount_float)
    {
        $this->container['discount_amount_float'] = $discount_amount_float;

        return $this;
    }

    /**
     * Gets formatted_discount_amount
     *
     * @return string|null
     */
    public function getFormattedDiscountAmount()
    {
        return $this->container['formatted_discount_amount'];
    }

    /**
     * Sets formatted_discount_amount
     *
     * @param string|null $formatted_discount_amount The sum of all the discounts applied to the order, formatted.
     *
     * @return self
     */
    public function setFormattedDiscountAmount($formatted_discount_amount)
    {
        $this->container['formatted_discount_amount'] = $formatted_discount_amount;

        return $this;
    }

    /**
     * Gets adjustment_amount_cents
     *
     * @return int|null
     */
    public function getAdjustmentAmountCents()
    {
        return $this->container['adjustment_amount_cents'];
    }

    /**
     * Sets adjustment_amount_cents
     *
     * @param int|null $adjustment_amount_cents The sum of all the adjustments applied to the order, in cents.
     *
     * @return self
     */
    public function setAdjustmentAmountCents($adjustment_amount_cents)
    {
        $this->container['adjustment_amount_cents'] = $adjustment_amount_cents;

        return $this;
    }

    /**
     * Gets adjustment_amount_float
     *
     * @return float|null
     */
    public function getAdjustmentAmountFloat()
    {
        return $this->container['adjustment_amount_float'];
    }

    /**
     * Sets adjustment_amount_float
     *
     * @param float|null $adjustment_amount_float The sum of all the adjustments applied to the order, float.
     *
     * @return self
     */
    public function setAdjustmentAmountFloat($adjustment_amount_float)
    {
        $this->container['adjustment_amount_float'] = $adjustment_amount_float;

        return $this;
    }

    /**
     * Gets formatted_adjustment_amount
     *
     * @return string|null
     */
    public function getFormattedAdjustmentAmount()
    {
        return $this->container['formatted_adjustment_amount'];
    }

    /**
     * Sets formatted_adjustment_amount
     *
     * @param string|null $formatted_adjustment_amount The sum of all the adjustments applied to the order, formatted.
     *
     * @return self
     */
    public function setFormattedAdjustmentAmount($formatted_adjustment_amount)
    {
        $this->container['formatted_adjustment_amount'] = $formatted_adjustment_amount;

        return $this;
    }

    /**
     * Gets gift_card_amount_cents
     *
     * @return int|null
     */
    public function getGiftCardAmountCents()
    {
        return $this->container['gift_card_amount_cents'];
    }

    /**
     * Sets gift_card_amount_cents
     *
     * @param int|null $gift_card_amount_cents The sum of all the gift_cards applied to the order, in cents.
     *
     * @return self
     */
    public function setGiftCardAmountCents($gift_card_amount_cents)
    {
        $this->container['gift_card_amount_cents'] = $gift_card_amount_cents;

        return $this;
    }

    /**
     * Gets gift_card_amount_float
     *
     * @return float|null
     */
    public function getGiftCardAmountFloat()
    {
        return $this->container['gift_card_amount_float'];
    }

    /**
     * Sets gift_card_amount_float
     *
     * @param float|null $gift_card_amount_float The sum of all the gift_cards applied to the order, float.
     *
     * @return self
     */
    public function setGiftCardAmountFloat($gift_card_amount_float)
    {
        $this->container['gift_card_amount_float'] = $gift_card_amount_float;

        return $this;
    }

    /**
     * Gets formatted_gift_card_amount
     *
     * @return string|null
     */
    public function getFormattedGiftCardAmount()
    {
        return $this->container['formatted_gift_card_amount'];
    }

    /**
     * Sets formatted_gift_card_amount
     *
     * @param string|null $formatted_gift_card_amount The sum of all the gift_cards applied to the order, formatted.
     *
     * @return self
     */
    public function setFormattedGiftCardAmount($formatted_gift_card_amount)
    {
        $this->container['formatted_gift_card_amount'] = $formatted_gift_card_amount;

        return $this;
    }

    /**
     * Gets total_tax_amount_cents
     *
     * @return int|null
     */
    public function getTotalTaxAmountCents()
    {
        return $this->container['total_tax_amount_cents'];
    }

    /**
     * Sets total_tax_amount_cents
     *
     * @param int|null $total_tax_amount_cents The sum of all the taxes applied to the order, in cents.
     *
     * @return self
     */
    public function setTotalTaxAmountCents($total_tax_amount_cents)
    {
        $this->container['total_tax_amount_cents'] = $total_tax_amount_cents;

        return $this;
    }

    /**
     * Gets total_tax_amount_float
     *
     * @return float|null
     */
    public function getTotalTaxAmountFloat()
    {
        return $this->container['total_tax_amount_float'];
    }

    /**
     * Sets total_tax_amount_float
     *
     * @param float|null $total_tax_amount_float The sum of all the taxes applied to the order, float.
     *
     * @return self
     */
    public function setTotalTaxAmountFloat($total_tax_amount_float)
    {
        $this->container['total_tax_amount_float'] = $total_tax_amount_float;

        return $this;
    }

    /**
     * Gets formatted_total_tax_amount
     *
     * @return string|null
     */
    public function getFormattedTotalTaxAmount()
    {
        return $this->container['formatted_total_tax_amount'];
    }

    /**
     * Sets formatted_total_tax_amount
     *
     * @param string|null $formatted_total_tax_amount The sum of all the taxes applied to the order, formatted.
     *
     * @return self
     */
    public function setFormattedTotalTaxAmount($formatted_total_tax_amount)
    {
        $this->container['formatted_total_tax_amount'] = $formatted_total_tax_amount;

        return $this;
    }

    /**
     * Gets subtotal_tax_amount_cents
     *
     * @return int|null
     */
    public function getSubtotalTaxAmountCents()
    {
        return $this->container['subtotal_tax_amount_cents'];
    }

    /**
     * Sets subtotal_tax_amount_cents
     *
     * @param int|null $subtotal_tax_amount_cents The taxes applied to the order's subtotal, in cents.
     *
     * @return self
     */
    public function setSubtotalTaxAmountCents($subtotal_tax_amount_cents)
    {
        $this->container['subtotal_tax_amount_cents'] = $subtotal_tax_amount_cents;

        return $this;
    }

    /**
     * Gets subtotal_tax_amount_float
     *
     * @return float|null
     */
    public function getSubtotalTaxAmountFloat()
    {
        return $this->container['subtotal_tax_amount_float'];
    }

    /**
     * Sets subtotal_tax_amount_float
     *
     * @param float|null $subtotal_tax_amount_float The taxes applied to the order's subtotal, float.
     *
     * @return self
     */
    public function setSubtotalTaxAmountFloat($subtotal_tax_amount_float)
    {
        $this->container['subtotal_tax_amount_float'] = $subtotal_tax_amount_float;

        return $this;
    }

    /**
     * Gets formatted_subtotal_tax_amount
     *
     * @return string|null
     */
    public function getFormattedSubtotalTaxAmount()
    {
        return $this->container['formatted_subtotal_tax_amount'];
    }

    /**
     * Sets formatted_subtotal_tax_amount
     *
     * @param string|null $formatted_subtotal_tax_amount The taxes applied to the order's subtotal, formatted.
     *
     * @return self
     */
    public function setFormattedSubtotalTaxAmount($formatted_subtotal_tax_amount)
    {
        $this->container['formatted_subtotal_tax_amount'] = $formatted_subtotal_tax_amount;

        return $this;
    }

    /**
     * Gets shipping_tax_amount_cents
     *
     * @return int|null
     */
    public function getShippingTaxAmountCents()
    {
        return $this->container['shipping_tax_amount_cents'];
    }

    /**
     * Sets shipping_tax_amount_cents
     *
     * @param int|null $shipping_tax_amount_cents The taxes applied to the order's shipping costs, in cents.
     *
     * @return self
     */
    public function setShippingTaxAmountCents($shipping_tax_amount_cents)
    {
        $this->container['shipping_tax_amount_cents'] = $shipping_tax_amount_cents;

        return $this;
    }

    /**
     * Gets shipping_tax_amount_float
     *
     * @return float|null
     */
    public function getShippingTaxAmountFloat()
    {
        return $this->container['shipping_tax_amount_float'];
    }

    /**
     * Sets shipping_tax_amount_float
     *
     * @param float|null $shipping_tax_amount_float The taxes applied to the order's shipping costs, float.
     *
     * @return self
     */
    public function setShippingTaxAmountFloat($shipping_tax_amount_float)
    {
        $this->container['shipping_tax_amount_float'] = $shipping_tax_amount_float;

        return $this;
    }

    /**
     * Gets formatted_shipping_tax_amount
     *
     * @return string|null
     */
    public function getFormattedShippingTaxAmount()
    {
        return $this->container['formatted_shipping_tax_amount'];
    }

    /**
     * Sets formatted_shipping_tax_amount
     *
     * @param string|null $formatted_shipping_tax_amount The taxes applied to the order's shipping costs, formatted.
     *
     * @return self
     */
    public function setFormattedShippingTaxAmount($formatted_shipping_tax_amount)
    {
        $this->container['formatted_shipping_tax_amount'] = $formatted_shipping_tax_amount;

        return $this;
    }

    /**
     * Gets payment_method_tax_amount_cents
     *
     * @return int|null
     */
    public function getPaymentMethodTaxAmountCents()
    {
        return $this->container['payment_method_tax_amount_cents'];
    }

    /**
     * Sets payment_method_tax_amount_cents
     *
     * @param int|null $payment_method_tax_amount_cents The taxes applied to the order's payment method costs, in cents.
     *
     * @return self
     */
    public function setPaymentMethodTaxAmountCents($payment_method_tax_amount_cents)
    {
        $this->container['payment_method_tax_amount_cents'] = $payment_method_tax_amount_cents;

        return $this;
    }

    /**
     * Gets payment_method_tax_amount_float
     *
     * @return float|null
     */
    public function getPaymentMethodTaxAmountFloat()
    {
        return $this->container['payment_method_tax_amount_float'];
    }

    /**
     * Sets payment_method_tax_amount_float
     *
     * @param float|null $payment_method_tax_amount_float The taxes applied to the order's payment method costs, float.
     *
     * @return self
     */
    public function setPaymentMethodTaxAmountFloat($payment_method_tax_amount_float)
    {
        $this->container['payment_method_tax_amount_float'] = $payment_method_tax_amount_float;

        return $this;
    }

    /**
     * Gets formatted_payment_method_tax_amount
     *
     * @return string|null
     */
    public function getFormattedPaymentMethodTaxAmount()
    {
        return $this->container['formatted_payment_method_tax_amount'];
    }

    /**
     * Sets formatted_payment_method_tax_amount
     *
     * @param string|null $formatted_payment_method_tax_amount The taxes applied to the order's payment method costs, formatted.
     *
     * @return self
     */
    public function setFormattedPaymentMethodTaxAmount($formatted_payment_method_tax_amount)
    {
        $this->container['formatted_payment_method_tax_amount'] = $formatted_payment_method_tax_amount;

        return $this;
    }

    /**
     * Gets adjustment_tax_amount_cents
     *
     * @return int|null
     */
    public function getAdjustmentTaxAmountCents()
    {
        return $this->container['adjustment_tax_amount_cents'];
    }

    /**
     * Sets adjustment_tax_amount_cents
     *
     * @param int|null $adjustment_tax_amount_cents The taxes applied to the order adjustments, in cents.
     *
     * @return self
     */
    public function setAdjustmentTaxAmountCents($adjustment_tax_amount_cents)
    {
        $this->container['adjustment_tax_amount_cents'] = $adjustment_tax_amount_cents;

        return $this;
    }

    /**
     * Gets adjustment_tax_amount_float
     *
     * @return float|null
     */
    public function getAdjustmentTaxAmountFloat()
    {
        return $this->container['adjustment_tax_amount_float'];
    }

    /**
     * Sets adjustment_tax_amount_float
     *
     * @param float|null $adjustment_tax_amount_float The taxes applied to the order adjustments, float.
     *
     * @return self
     */
    public function setAdjustmentTaxAmountFloat($adjustment_tax_amount_float)
    {
        $this->container['adjustment_tax_amount_float'] = $adjustment_tax_amount_float;

        return $this;
    }

    /**
     * Gets formatted_adjustment_tax_amount
     *
     * @return string|null
     */
    public function getFormattedAdjustmentTaxAmount()
    {
        return $this->container['formatted_adjustment_tax_amount'];
    }

    /**
     * Sets formatted_adjustment_tax_amount
     *
     * @param string|null $formatted_adjustment_tax_amount The taxes applied to the order adjustments, formatted.
     *
     * @return self
     */
    public function setFormattedAdjustmentTaxAmount($formatted_adjustment_tax_amount)
    {
        $this->container['formatted_adjustment_tax_amount'] = $formatted_adjustment_tax_amount;

        return $this;
    }

    /**
     * Gets total_amount_cents
     *
     * @return int|null
     */
    public function getTotalAmountCents()
    {
        return $this->container['total_amount_cents'];
    }

    /**
     * Sets total_amount_cents
     *
     * @param int|null $total_amount_cents The order's total amount, in cents.
     *
     * @return self
     */
    public function setTotalAmountCents($total_amount_cents)
    {
        $this->container['total_amount_cents'] = $total_amount_cents;

        return $this;
    }

    /**
     * Gets total_amount_float
     *
     * @return float|null
     */
    public function getTotalAmountFloat()
    {
        return $this->container['total_amount_float'];
    }

    /**
     * Sets total_amount_float
     *
     * @param float|null $total_amount_float The order's total amount, float.
     *
     * @return self
     */
    public function setTotalAmountFloat($total_amount_float)
    {
        $this->container['total_amount_float'] = $total_amount_float;

        return $this;
    }

    /**
     * Gets formatted_total_amount
     *
     * @return string|null
     */
    public function getFormattedTotalAmount()
    {
        return $this->container['formatted_total_amount'];
    }

    /**
     * Sets formatted_total_amount
     *
     * @param string|null $formatted_total_amount The order's total amount, formatted.
     *
     * @return self
     */
    public function setFormattedTotalAmount($formatted_total_amount)
    {
        $this->container['formatted_total_amount'] = $formatted_total_amount;

        return $this;
    }

    /**
     * Gets total_taxable_amount_cents
     *
     * @return int|null
     */
    public function getTotalTaxableAmountCents()
    {
        return $this->container['total_taxable_amount_cents'];
    }

    /**
     * Sets total_taxable_amount_cents
     *
     * @param int|null $total_taxable_amount_cents The order's total taxable amount, in cents (equal to total_amount_cents when prices don't include taxes).
     *
     * @return self
     */
    public function setTotalTaxableAmountCents($total_taxable_amount_cents)
    {
        $this->container['total_taxable_amount_cents'] = $total_taxable_amount_cents;

        return $this;
    }

    /**
     * Gets total_taxable_amount_float
     *
     * @return float|null
     */
    public function getTotalTaxableAmountFloat()
    {
        return $this->container['total_taxable_amount_float'];
    }

    /**
     * Sets total_taxable_amount_float
     *
     * @param float|null $total_taxable_amount_float The order's total taxable amount, float.
     *
     * @return self
     */
    public function setTotalTaxableAmountFloat($total_taxable_amount_float)
    {
        $this->container['total_taxable_amount_float'] = $total_taxable_amount_float;

        return $this;
    }

    /**
     * Gets formatted_total_taxable_amount
     *
     * @return string|null
     */
    public function getFormattedTotalTaxableAmount()
    {
        return $this->container['formatted_total_taxable_amount'];
    }

    /**
     * Sets formatted_total_taxable_amount
     *
     * @param string|null $formatted_total_taxable_amount The order's total taxable amount, formatted.
     *
     * @return self
     */
    public function setFormattedTotalTaxableAmount($formatted_total_taxable_amount)
    {
        $this->container['formatted_total_taxable_amount'] = $formatted_total_taxable_amount;

        return $this;
    }

    /**
     * Gets subtotal_taxable_amount_cents
     *
     * @return int|null
     */
    public function getSubtotalTaxableAmountCents()
    {
        return $this->container['subtotal_taxable_amount_cents'];
    }

    /**
     * Sets subtotal_taxable_amount_cents
     *
     * @param int|null $subtotal_taxable_amount_cents The order's subtotal taxable amount, in cents (equal to subtotal_amount_cents when prices don't include taxes).
     *
     * @return self
     */
    public function setSubtotalTaxableAmountCents($subtotal_taxable_amount_cents)
    {
        $this->container['subtotal_taxable_amount_cents'] = $subtotal_taxable_amount_cents;

        return $this;
    }

    /**
     * Gets subtotal_taxable_amount_float
     *
     * @return float|null
     */
    public function getSubtotalTaxableAmountFloat()
    {
        return $this->container['subtotal_taxable_amount_float'];
    }

    /**
     * Sets subtotal_taxable_amount_float
     *
     * @param float|null $subtotal_taxable_amount_float The order's subtotal taxable amount, float.
     *
     * @return self
     */
    public function setSubtotalTaxableAmountFloat($subtotal_taxable_amount_float)
    {
        $this->container['subtotal_taxable_amount_float'] = $subtotal_taxable_amount_float;

        return $this;
    }

    /**
     * Gets formatted_subtotal_taxable_amount
     *
     * @return string|null
     */
    public function getFormattedSubtotalTaxableAmount()
    {
        return $this->container['formatted_subtotal_taxable_amount'];
    }

    /**
     * Sets formatted_subtotal_taxable_amount
     *
     * @param string|null $formatted_subtotal_taxable_amount The order's subtotal taxable amount, formatted.
     *
     * @return self
     */
    public function setFormattedSubtotalTaxableAmount($formatted_subtotal_taxable_amount)
    {
        $this->container['formatted_subtotal_taxable_amount'] = $formatted_subtotal_taxable_amount;

        return $this;
    }

    /**
     * Gets shipping_taxable_amount_cents
     *
     * @return int|null
     */
    public function getShippingTaxableAmountCents()
    {
        return $this->container['shipping_taxable_amount_cents'];
    }

    /**
     * Sets shipping_taxable_amount_cents
     *
     * @param int|null $shipping_taxable_amount_cents The order's shipping taxable amount, in cents (equal to shipping_amount_cents when prices don't include taxes).
     *
     * @return self
     */
    public function setShippingTaxableAmountCents($shipping_taxable_amount_cents)
    {
        $this->container['shipping_taxable_amount_cents'] = $shipping_taxable_amount_cents;

        return $this;
    }

    /**
     * Gets shipping_taxable_amount_float
     *
     * @return float|null
     */
    public function getShippingTaxableAmountFloat()
    {
        return $this->container['shipping_taxable_amount_float'];
    }

    /**
     * Sets shipping_taxable_amount_float
     *
     * @param float|null $shipping_taxable_amount_float The order's shipping taxable amount, float.
     *
     * @return self
     */
    public function setShippingTaxableAmountFloat($shipping_taxable_amount_float)
    {
        $this->container['shipping_taxable_amount_float'] = $shipping_taxable_amount_float;

        return $this;
    }

    /**
     * Gets formatted_shipping_taxable_amount
     *
     * @return string|null
     */
    public function getFormattedShippingTaxableAmount()
    {
        return $this->container['formatted_shipping_taxable_amount'];
    }

    /**
     * Sets formatted_shipping_taxable_amount
     *
     * @param string|null $formatted_shipping_taxable_amount The order's shipping taxable amount, formatted.
     *
     * @return self
     */
    public function setFormattedShippingTaxableAmount($formatted_shipping_taxable_amount)
    {
        $this->container['formatted_shipping_taxable_amount'] = $formatted_shipping_taxable_amount;

        return $this;
    }

    /**
     * Gets payment_method_taxable_amount_cents
     *
     * @return int|null
     */
    public function getPaymentMethodTaxableAmountCents()
    {
        return $this->container['payment_method_taxable_amount_cents'];
    }

    /**
     * Sets payment_method_taxable_amount_cents
     *
     * @param int|null $payment_method_taxable_amount_cents The order's payment method taxable amount, in cents (equal to payment_method_amount_cents when prices don't include taxes).
     *
     * @return self
     */
    public function setPaymentMethodTaxableAmountCents($payment_method_taxable_amount_cents)
    {
        $this->container['payment_method_taxable_amount_cents'] = $payment_method_taxable_amount_cents;

        return $this;
    }

    /**
     * Gets payment_method_taxable_amount_float
     *
     * @return float|null
     */
    public function getPaymentMethodTaxableAmountFloat()
    {
        return $this->container['payment_method_taxable_amount_float'];
    }

    /**
     * Sets payment_method_taxable_amount_float
     *
     * @param float|null $payment_method_taxable_amount_float The order's payment method taxable amount, float.
     *
     * @return self
     */
    public function setPaymentMethodTaxableAmountFloat($payment_method_taxable_amount_float)
    {
        $this->container['payment_method_taxable_amount_float'] = $payment_method_taxable_amount_float;

        return $this;
    }

    /**
     * Gets formatted_payment_method_taxable_amount
     *
     * @return string|null
     */
    public function getFormattedPaymentMethodTaxableAmount()
    {
        return $this->container['formatted_payment_method_taxable_amount'];
    }

    /**
     * Sets formatted_payment_method_taxable_amount
     *
     * @param string|null $formatted_payment_method_taxable_amount The order's payment method taxable amount, formatted.
     *
     * @return self
     */
    public function setFormattedPaymentMethodTaxableAmount($formatted_payment_method_taxable_amount)
    {
        $this->container['formatted_payment_method_taxable_amount'] = $formatted_payment_method_taxable_amount;

        return $this;
    }

    /**
     * Gets adjustment_taxable_amount_cents
     *
     * @return int|null
     */
    public function getAdjustmentTaxableAmountCents()
    {
        return $this->container['adjustment_taxable_amount_cents'];
    }

    /**
     * Sets adjustment_taxable_amount_cents
     *
     * @param int|null $adjustment_taxable_amount_cents The order's adjustment taxable amount, in cents (equal to discount_adjustment_cents when prices don't include taxes).
     *
     * @return self
     */
    public function setAdjustmentTaxableAmountCents($adjustment_taxable_amount_cents)
    {
        $this->container['adjustment_taxable_amount_cents'] = $adjustment_taxable_amount_cents;

        return $this;
    }

    /**
     * Gets adjustment_taxable_amount_float
     *
     * @return float|null
     */
    public function getAdjustmentTaxableAmountFloat()
    {
        return $this->container['adjustment_taxable_amount_float'];
    }

    /**
     * Sets adjustment_taxable_amount_float
     *
     * @param float|null $adjustment_taxable_amount_float The order's adjustment taxable amount, float.
     *
     * @return self
     */
    public function setAdjustmentTaxableAmountFloat($adjustment_taxable_amount_float)
    {
        $this->container['adjustment_taxable_amount_float'] = $adjustment_taxable_amount_float;

        return $this;
    }

    /**
     * Gets formatted_adjustment_taxable_amount
     *
     * @return string|null
     */
    public function getFormattedAdjustmentTaxableAmount()
    {
        return $this->container['formatted_adjustment_taxable_amount'];
    }

    /**
     * Sets formatted_adjustment_taxable_amount
     *
     * @param string|null $formatted_adjustment_taxable_amount The order's adjustment taxable amount, formatted.
     *
     * @return self
     */
    public function setFormattedAdjustmentTaxableAmount($formatted_adjustment_taxable_amount)
    {
        $this->container['formatted_adjustment_taxable_amount'] = $formatted_adjustment_taxable_amount;

        return $this;
    }

    /**
     * Gets total_amount_with_taxes_cents
     *
     * @return int|null
     */
    public function getTotalAmountWithTaxesCents()
    {
        return $this->container['total_amount_with_taxes_cents'];
    }

    /**
     * Sets total_amount_with_taxes_cents
     *
     * @param int|null $total_amount_with_taxes_cents The order's total amount (when prices include taxes) or the order's total + taxes amount (when prices don't include taxes, e.g. US Markets or B2B)
     *
     * @return self
     */
    public function setTotalAmountWithTaxesCents($total_amount_with_taxes_cents)
    {
        $this->container['total_amount_with_taxes_cents'] = $total_amount_with_taxes_cents;

        return $this;
    }

    /**
     * Gets total_amount_with_taxes_float
     *
     * @return float|null
     */
    public function getTotalAmountWithTaxesFloat()
    {
        return $this->container['total_amount_with_taxes_float'];
    }

    /**
     * Sets total_amount_with_taxes_float
     *
     * @param float|null $total_amount_with_taxes_float The order's total amount with taxes, float.
     *
     * @return self
     */
    public function setTotalAmountWithTaxesFloat($total_amount_with_taxes_float)
    {
        $this->container['total_amount_with_taxes_float'] = $total_amount_with_taxes_float;

        return $this;
    }

    /**
     * Gets formatted_total_amount_with_taxes
     *
     * @return string|null
     */
    public function getFormattedTotalAmountWithTaxes()
    {
        return $this->container['formatted_total_amount_with_taxes'];
    }

    /**
     * Sets formatted_total_amount_with_taxes
     *
     * @param string|null $formatted_total_amount_with_taxes The order's total amount with taxes, formatted.
     *
     * @return self
     */
    public function setFormattedTotalAmountWithTaxes($formatted_total_amount_with_taxes)
    {
        $this->container['formatted_total_amount_with_taxes'] = $formatted_total_amount_with_taxes;

        return $this;
    }

    /**
     * Gets fees_amount_cents
     *
     * @return int|null
     */
    public function getFeesAmountCents()
    {
        return $this->container['fees_amount_cents'];
    }

    /**
     * Sets fees_amount_cents
     *
     * @param int|null $fees_amount_cents The fees amount that is applied by Commerce Layer, in cents.
     *
     * @return self
     */
    public function setFeesAmountCents($fees_amount_cents)
    {
        $this->container['fees_amount_cents'] = $fees_amount_cents;

        return $this;
    }

    /**
     * Gets fees_amount_float
     *
     * @return float|null
     */
    public function getFeesAmountFloat()
    {
        return $this->container['fees_amount_float'];
    }

    /**
     * Sets fees_amount_float
     *
     * @param float|null $fees_amount_float The fees amount that is applied by Commerce Layer, float.
     *
     * @return self
     */
    public function setFeesAmountFloat($fees_amount_float)
    {
        $this->container['fees_amount_float'] = $fees_amount_float;

        return $this;
    }

    /**
     * Gets formatted_fees_amount
     *
     * @return string|null
     */
    public function getFormattedFeesAmount()
    {
        return $this->container['formatted_fees_amount'];
    }

    /**
     * Sets formatted_fees_amount
     *
     * @param string|null $formatted_fees_amount The fees amount that is applied by Commerce Layer, formatted.
     *
     * @return self
     */
    public function setFormattedFeesAmount($formatted_fees_amount)
    {
        $this->container['formatted_fees_amount'] = $formatted_fees_amount;

        return $this;
    }

    /**
     * Gets duty_amount_cents
     *
     * @return int|null
     */
    public function getDutyAmountCents()
    {
        return $this->container['duty_amount_cents'];
    }

    /**
     * Sets duty_amount_cents
     *
     * @param int|null $duty_amount_cents The duty amount that is calculated by external services, in cents.
     *
     * @return self
     */
    public function setDutyAmountCents($duty_amount_cents)
    {
        $this->container['duty_amount_cents'] = $duty_amount_cents;

        return $this;
    }

    /**
     * Gets duty_amount_float
     *
     * @return float|null
     */
    public function getDutyAmountFloat()
    {
        return $this->container['duty_amount_float'];
    }

    /**
     * Sets duty_amount_float
     *
     * @param float|null $duty_amount_float The duty amount that is calculated by external services, float.
     *
     * @return self
     */
    public function setDutyAmountFloat($duty_amount_float)
    {
        $this->container['duty_amount_float'] = $duty_amount_float;

        return $this;
    }

    /**
     * Gets formatted_duty_amount
     *
     * @return string|null
     */
    public function getFormattedDutyAmount()
    {
        return $this->container['formatted_duty_amount'];
    }

    /**
     * Sets formatted_duty_amount
     *
     * @param string|null $formatted_duty_amount The duty amount that is calculated by external services, formatted.
     *
     * @return self
     */
    public function setFormattedDutyAmount($formatted_duty_amount)
    {
        $this->container['formatted_duty_amount'] = $formatted_duty_amount;

        return $this;
    }

    /**
     * Gets skus_count
     *
     * @return int|null
     */
    public function getSkusCount()
    {
        return $this->container['skus_count'];
    }

    /**
     * Sets skus_count
     *
     * @param int|null $skus_count The total number of skus in the order's line items. This can be useful to display a preview of the customer shopping cart content.
     *
     * @return self
     */
    public function setSkusCount($skus_count)
    {
        $this->container['skus_count'] = $skus_count;

        return $this;
    }

    /**
     * Gets line_item_options_count
     *
     * @return int|null
     */
    public function getLineItemOptionsCount()
    {
        return $this->container['line_item_options_count'];
    }

    /**
     * Sets line_item_options_count
     *
     * @param int|null $line_item_options_count The total number of line item options. This can be useful to display a preview of the customer shopping cart content.
     *
     * @return self
     */
    public function setLineItemOptionsCount($line_item_options_count)
    {
        $this->container['line_item_options_count'] = $line_item_options_count;

        return $this;
    }

    /**
     * Gets shipments_count
     *
     * @return int|null
     */
    public function getShipmentsCount()
    {
        return $this->container['shipments_count'];
    }

    /**
     * Sets shipments_count
     *
     * @param int|null $shipments_count The total number of shipments. This can be useful to manage the shipping method(s) selection during checkout.
     *
     * @return self
     */
    public function setShipmentsCount($shipments_count)
    {
        $this->container['shipments_count'] = $shipments_count;

        return $this;
    }

    /**
     * Gets payment_source_details
     *
     * @return object|null
     */
    public function getPaymentSourceDetails()
    {
        return $this->container['payment_source_details'];
    }

    /**
     * Sets payment_source_details
     *
     * @param object|null $payment_source_details An object that contains the shareable details of the order's payment source.
     *
     * @return self
     */
    public function setPaymentSourceDetails($payment_source_details)
    {
        $this->container['payment_source_details'] = $payment_source_details;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token A unique token that can be shared more securely instead of the order's id.
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets cart_url
     *
     * @return string|null
     */
    public function getCartUrl()
    {
        return $this->container['cart_url'];
    }

    /**
     * Sets cart_url
     *
     * @param string|null $cart_url The cart url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setCartUrl($cart_url)
    {
        $this->container['cart_url'] = $cart_url;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string|null
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string|null $return_url The return url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets terms_url
     *
     * @return string|null
     */
    public function getTermsUrl()
    {
        return $this->container['terms_url'];
    }

    /**
     * Sets terms_url
     *
     * @param string|null $terms_url The terms and conditions url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setTermsUrl($terms_url)
    {
        $this->container['terms_url'] = $terms_url;

        return $this;
    }

    /**
     * Gets privacy_url
     *
     * @return string|null
     */
    public function getPrivacyUrl()
    {
        return $this->container['privacy_url'];
    }

    /**
     * Sets privacy_url
     *
     * @param string|null $privacy_url The privacy policy url on your site. If present, it will be used on our hosted checkout application.
     *
     * @return self
     */
    public function setPrivacyUrl($privacy_url)
    {
        $this->container['privacy_url'] = $privacy_url;

        return $this;
    }

    /**
     * Gets checkout_url
     *
     * @return string|null
     */
    public function getCheckoutUrl()
    {
        return $this->container['checkout_url'];
    }

    /**
     * Sets checkout_url
     *
     * @param string|null $checkout_url The checkout url that was automatically generated for the order. Send the customers to this url to let them checkout the order securely on our hosted checkout application.
     *
     * @return self
     */
    public function setCheckoutUrl($checkout_url)
    {
        $this->container['checkout_url'] = $checkout_url;

        return $this;
    }

    /**
     * Gets placed_at
     *
     * @return string|null
     */
    public function getPlacedAt()
    {
        return $this->container['placed_at'];
    }

    /**
     * Sets placed_at
     *
     * @param string|null $placed_at Time at which the order was placed.
     *
     * @return self
     */
    public function setPlacedAt($placed_at)
    {
        $this->container['placed_at'] = $placed_at;

        return $this;
    }

    /**
     * Gets approved_at
     *
     * @return string|null
     */
    public function getApprovedAt()
    {
        return $this->container['approved_at'];
    }

    /**
     * Sets approved_at
     *
     * @param string|null $approved_at Time at which the order was approved.
     *
     * @return self
     */
    public function setApprovedAt($approved_at)
    {
        $this->container['approved_at'] = $approved_at;

        return $this;
    }

    /**
     * Gets cancelled_at
     *
     * @return string|null
     */
    public function getCancelledAt()
    {
        return $this->container['cancelled_at'];
    }

    /**
     * Sets cancelled_at
     *
     * @param string|null $cancelled_at Time at which the order was cancelled.
     *
     * @return self
     */
    public function setCancelledAt($cancelled_at)
    {
        $this->container['cancelled_at'] = $cancelled_at;

        return $this;
    }

    /**
     * Gets payment_updated_at
     *
     * @return string|null
     */
    public function getPaymentUpdatedAt()
    {
        return $this->container['payment_updated_at'];
    }

    /**
     * Sets payment_updated_at
     *
     * @param string|null $payment_updated_at Time at which the order's payment status was last updated.
     *
     * @return self
     */
    public function setPaymentUpdatedAt($payment_updated_at)
    {
        $this->container['payment_updated_at'] = $payment_updated_at;

        return $this;
    }

    /**
     * Gets fulfillment_updated_at
     *
     * @return string|null
     */
    public function getFulfillmentUpdatedAt()
    {
        return $this->container['fulfillment_updated_at'];
    }

    /**
     * Sets fulfillment_updated_at
     *
     * @param string|null $fulfillment_updated_at Time at which the order's fulfillment status was last updated.
     *
     * @return self
     */
    public function setFulfillmentUpdatedAt($fulfillment_updated_at)
    {
        $this->container['fulfillment_updated_at'] = $fulfillment_updated_at;

        return $this;
    }

    /**
     * Gets archived_at
     *
     * @return string|null
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param string|null $archived_at Time at which the resource has been archived.
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string|null $expires_at Time at which an order is marked for cleanup. Any order will start with a default expire time of 2 months. Expiration is reset once a line item is added to the order.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


