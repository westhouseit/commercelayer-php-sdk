<?php
/**
 * CaptureDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CaptureDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CaptureDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'capture_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'currency_code' => 'string',
        'amount_cents' => 'int',
        'amount_float' => 'float',
        'formatted_amount' => 'string',
        'succeeded' => 'bool',
        'message' => 'string',
        'error_code' => 'string',
        'error_detail' => 'string',
        'token' => 'string',
        'gateway_transaction_id' => 'string',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object',
        'refund_amount_cents' => 'int',
        'refund_amount_float' => 'float',
        'formatted_refund_amount' => 'string',
        'refund_balance_cents' => 'int',
        'refund_balance_float' => 'float',
        'formatted_refund_balance' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'currency_code' => null,
        'amount_cents' => null,
        'amount_float' => null,
        'formatted_amount' => null,
        'succeeded' => null,
        'message' => null,
        'error_code' => null,
        'error_detail' => null,
        'token' => null,
        'gateway_transaction_id' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null,
        'refund_amount_cents' => null,
        'refund_amount_float' => null,
        'formatted_refund_amount' => null,
        'refund_balance_cents' => null,
        'refund_balance_float' => null,
        'formatted_refund_balance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'currency_code' => 'currency_code',
        'amount_cents' => 'amount_cents',
        'amount_float' => 'amount_float',
        'formatted_amount' => 'formatted_amount',
        'succeeded' => 'succeeded',
        'message' => 'message',
        'error_code' => 'error_code',
        'error_detail' => 'error_detail',
        'token' => 'token',
        'gateway_transaction_id' => 'gateway_transaction_id',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata',
        'refund_amount_cents' => 'refund_amount_cents',
        'refund_amount_float' => 'refund_amount_float',
        'formatted_refund_amount' => 'formatted_refund_amount',
        'refund_balance_cents' => 'refund_balance_cents',
        'refund_balance_float' => 'refund_balance_float',
        'formatted_refund_balance' => 'formatted_refund_balance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'currency_code' => 'setCurrencyCode',
        'amount_cents' => 'setAmountCents',
        'amount_float' => 'setAmountFloat',
        'formatted_amount' => 'setFormattedAmount',
        'succeeded' => 'setSucceeded',
        'message' => 'setMessage',
        'error_code' => 'setErrorCode',
        'error_detail' => 'setErrorDetail',
        'token' => 'setToken',
        'gateway_transaction_id' => 'setGatewayTransactionId',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata',
        'refund_amount_cents' => 'setRefundAmountCents',
        'refund_amount_float' => 'setRefundAmountFloat',
        'formatted_refund_amount' => 'setFormattedRefundAmount',
        'refund_balance_cents' => 'setRefundBalanceCents',
        'refund_balance_float' => 'setRefundBalanceFloat',
        'formatted_refund_balance' => 'setFormattedRefundBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'currency_code' => 'getCurrencyCode',
        'amount_cents' => 'getAmountCents',
        'amount_float' => 'getAmountFloat',
        'formatted_amount' => 'getFormattedAmount',
        'succeeded' => 'getSucceeded',
        'message' => 'getMessage',
        'error_code' => 'getErrorCode',
        'error_detail' => 'getErrorDetail',
        'token' => 'getToken',
        'gateway_transaction_id' => 'getGatewayTransactionId',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata',
        'refund_amount_cents' => 'getRefundAmountCents',
        'refund_amount_float' => 'getRefundAmountFloat',
        'formatted_refund_amount' => 'getFormattedRefundAmount',
        'refund_balance_cents' => 'getRefundBalanceCents',
        'refund_balance_float' => 'getRefundBalanceFloat',
        'formatted_refund_balance' => 'getFormattedRefundBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = $data['number'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['amount_cents'] = $data['amount_cents'] ?? null;
        $this->container['amount_float'] = $data['amount_float'] ?? null;
        $this->container['formatted_amount'] = $data['formatted_amount'] ?? null;
        $this->container['succeeded'] = $data['succeeded'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
        $this->container['error_code'] = $data['error_code'] ?? null;
        $this->container['error_detail'] = $data['error_detail'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['gateway_transaction_id'] = $data['gateway_transaction_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['refund_amount_cents'] = $data['refund_amount_cents'] ?? null;
        $this->container['refund_amount_float'] = $data['refund_amount_float'] ?? null;
        $this->container['formatted_refund_amount'] = $data['formatted_refund_amount'] ?? null;
        $this->container['refund_balance_cents'] = $data['refund_balance_cents'] ?? null;
        $this->container['refund_balance_float'] = $data['refund_balance_float'] ?? null;
        $this->container['formatted_refund_balance'] = $data['formatted_refund_balance'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number The transaction number, auto generated
     *
     * @return self
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The international 3-letter currency code as defined by the ISO 4217 standard, inherited from the associated order.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets amount_cents
     *
     * @return int|null
     */
    public function getAmountCents()
    {
        return $this->container['amount_cents'];
    }

    /**
     * Sets amount_cents
     *
     * @param int|null $amount_cents The transaction amount, in cents.
     *
     * @return self
     */
    public function setAmountCents($amount_cents)
    {
        $this->container['amount_cents'] = $amount_cents;

        return $this;
    }

    /**
     * Gets amount_float
     *
     * @return float|null
     */
    public function getAmountFloat()
    {
        return $this->container['amount_float'];
    }

    /**
     * Sets amount_float
     *
     * @param float|null $amount_float The transaction amount, float.
     *
     * @return self
     */
    public function setAmountFloat($amount_float)
    {
        $this->container['amount_float'] = $amount_float;

        return $this;
    }

    /**
     * Gets formatted_amount
     *
     * @return string|null
     */
    public function getFormattedAmount()
    {
        return $this->container['formatted_amount'];
    }

    /**
     * Sets formatted_amount
     *
     * @param string|null $formatted_amount The transaction amount, formatted.
     *
     * @return self
     */
    public function setFormattedAmount($formatted_amount)
    {
        $this->container['formatted_amount'] = $formatted_amount;

        return $this;
    }

    /**
     * Gets succeeded
     *
     * @return bool|null
     */
    public function getSucceeded()
    {
        return $this->container['succeeded'];
    }

    /**
     * Sets succeeded
     *
     * @param bool|null $succeeded Indicates if the transaction is successful
     *
     * @return self
     */
    public function setSucceeded($succeeded)
    {
        $this->container['succeeded'] = $succeeded;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message The message returned by the payment gateway
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string|null $error_code The error code, if any, returned by the payment gateway
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_detail
     *
     * @return string|null
     */
    public function getErrorDetail()
    {
        return $this->container['error_detail'];
    }

    /**
     * Sets error_detail
     *
     * @param string|null $error_detail The error detail, if any, returned by the payment gateway
     *
     * @return self
     */
    public function setErrorDetail($error_detail)
    {
        $this->container['error_detail'] = $error_detail;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token The token identifying the transaction, returned by the payment gateway
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets gateway_transaction_id
     *
     * @return string|null
     */
    public function getGatewayTransactionId()
    {
        return $this->container['gateway_transaction_id'];
    }

    /**
     * Sets gateway_transaction_id
     *
     * @param string|null $gateway_transaction_id The ID identifying the transaction, returned by the payment gateway
     *
     * @return self
     */
    public function setGatewayTransactionId($gateway_transaction_id)
    {
        $this->container['gateway_transaction_id'] = $gateway_transaction_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets refund_amount_cents
     *
     * @return int|null
     */
    public function getRefundAmountCents()
    {
        return $this->container['refund_amount_cents'];
    }

    /**
     * Sets refund_amount_cents
     *
     * @param int|null $refund_amount_cents The amount to be refunded, in cents.
     *
     * @return self
     */
    public function setRefundAmountCents($refund_amount_cents)
    {
        $this->container['refund_amount_cents'] = $refund_amount_cents;

        return $this;
    }

    /**
     * Gets refund_amount_float
     *
     * @return float|null
     */
    public function getRefundAmountFloat()
    {
        return $this->container['refund_amount_float'];
    }

    /**
     * Sets refund_amount_float
     *
     * @param float|null $refund_amount_float The amount to be refunded, float.
     *
     * @return self
     */
    public function setRefundAmountFloat($refund_amount_float)
    {
        $this->container['refund_amount_float'] = $refund_amount_float;

        return $this;
    }

    /**
     * Gets formatted_refund_amount
     *
     * @return string|null
     */
    public function getFormattedRefundAmount()
    {
        return $this->container['formatted_refund_amount'];
    }

    /**
     * Sets formatted_refund_amount
     *
     * @param string|null $formatted_refund_amount The amount to be refunded, formatted.
     *
     * @return self
     */
    public function setFormattedRefundAmount($formatted_refund_amount)
    {
        $this->container['formatted_refund_amount'] = $formatted_refund_amount;

        return $this;
    }

    /**
     * Gets refund_balance_cents
     *
     * @return int|null
     */
    public function getRefundBalanceCents()
    {
        return $this->container['refund_balance_cents'];
    }

    /**
     * Sets refund_balance_cents
     *
     * @param int|null $refund_balance_cents The balance to be refunded, in cents.
     *
     * @return self
     */
    public function setRefundBalanceCents($refund_balance_cents)
    {
        $this->container['refund_balance_cents'] = $refund_balance_cents;

        return $this;
    }

    /**
     * Gets refund_balance_float
     *
     * @return float|null
     */
    public function getRefundBalanceFloat()
    {
        return $this->container['refund_balance_float'];
    }

    /**
     * Sets refund_balance_float
     *
     * @param float|null $refund_balance_float The balance to be refunded, float.
     *
     * @return self
     */
    public function setRefundBalanceFloat($refund_balance_float)
    {
        $this->container['refund_balance_float'] = $refund_balance_float;

        return $this;
    }

    /**
     * Gets formatted_refund_balance
     *
     * @return string|null
     */
    public function getFormattedRefundBalance()
    {
        return $this->container['formatted_refund_balance'];
    }

    /**
     * Sets formatted_refund_balance
     *
     * @param string|null $formatted_refund_balance The balance to be refunded, formatted.
     *
     * @return self
     */
    public function setFormattedRefundBalance($formatted_refund_balance)
    {
        $this->container['formatted_refund_balance'] = $formatted_refund_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


