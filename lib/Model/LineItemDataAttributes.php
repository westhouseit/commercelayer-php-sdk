<?php
/**
 * LineItemDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LineItemDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LineItemDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'lineItem_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku_code' => 'string',
        'quantity' => 'int',
        'currency_code' => 'string',
        'unit_amount_cents' => 'int',
        'unit_amount_float' => 'float',
        'formatted_unit_amount' => 'string',
        'options_amount_cents' => 'int',
        'options_amount_float' => 'float',
        'formatted_options_amount' => 'string',
        'discount_cents' => 'int',
        'discount_float' => 'float',
        'formatted_discount' => 'string',
        'total_amount_cents' => 'int',
        'total_amount_float' => 'float',
        'formatted_total_amount' => 'string',
        'tax_amount_cents' => 'int',
        'tax_amount_float' => 'float',
        'formatted_tax_amount' => 'string',
        'name' => 'string',
        'image_url' => 'string',
        'discount_breakdown' => 'object',
        'tax_rate' => 'float',
        'tax_breakdown' => 'object',
        'item_type' => 'string',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sku_code' => null,
        'quantity' => null,
        'currency_code' => null,
        'unit_amount_cents' => null,
        'unit_amount_float' => null,
        'formatted_unit_amount' => null,
        'options_amount_cents' => null,
        'options_amount_float' => null,
        'formatted_options_amount' => null,
        'discount_cents' => null,
        'discount_float' => null,
        'formatted_discount' => null,
        'total_amount_cents' => null,
        'total_amount_float' => null,
        'formatted_total_amount' => null,
        'tax_amount_cents' => null,
        'tax_amount_float' => null,
        'formatted_tax_amount' => null,
        'name' => null,
        'image_url' => null,
        'discount_breakdown' => null,
        'tax_rate' => null,
        'tax_breakdown' => null,
        'item_type' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku_code' => 'sku_code',
        'quantity' => 'quantity',
        'currency_code' => 'currency_code',
        'unit_amount_cents' => 'unit_amount_cents',
        'unit_amount_float' => 'unit_amount_float',
        'formatted_unit_amount' => 'formatted_unit_amount',
        'options_amount_cents' => 'options_amount_cents',
        'options_amount_float' => 'options_amount_float',
        'formatted_options_amount' => 'formatted_options_amount',
        'discount_cents' => 'discount_cents',
        'discount_float' => 'discount_float',
        'formatted_discount' => 'formatted_discount',
        'total_amount_cents' => 'total_amount_cents',
        'total_amount_float' => 'total_amount_float',
        'formatted_total_amount' => 'formatted_total_amount',
        'tax_amount_cents' => 'tax_amount_cents',
        'tax_amount_float' => 'tax_amount_float',
        'formatted_tax_amount' => 'formatted_tax_amount',
        'name' => 'name',
        'image_url' => 'image_url',
        'discount_breakdown' => 'discount_breakdown',
        'tax_rate' => 'tax_rate',
        'tax_breakdown' => 'tax_breakdown',
        'item_type' => 'item_type',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku_code' => 'setSkuCode',
        'quantity' => 'setQuantity',
        'currency_code' => 'setCurrencyCode',
        'unit_amount_cents' => 'setUnitAmountCents',
        'unit_amount_float' => 'setUnitAmountFloat',
        'formatted_unit_amount' => 'setFormattedUnitAmount',
        'options_amount_cents' => 'setOptionsAmountCents',
        'options_amount_float' => 'setOptionsAmountFloat',
        'formatted_options_amount' => 'setFormattedOptionsAmount',
        'discount_cents' => 'setDiscountCents',
        'discount_float' => 'setDiscountFloat',
        'formatted_discount' => 'setFormattedDiscount',
        'total_amount_cents' => 'setTotalAmountCents',
        'total_amount_float' => 'setTotalAmountFloat',
        'formatted_total_amount' => 'setFormattedTotalAmount',
        'tax_amount_cents' => 'setTaxAmountCents',
        'tax_amount_float' => 'setTaxAmountFloat',
        'formatted_tax_amount' => 'setFormattedTaxAmount',
        'name' => 'setName',
        'image_url' => 'setImageUrl',
        'discount_breakdown' => 'setDiscountBreakdown',
        'tax_rate' => 'setTaxRate',
        'tax_breakdown' => 'setTaxBreakdown',
        'item_type' => 'setItemType',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku_code' => 'getSkuCode',
        'quantity' => 'getQuantity',
        'currency_code' => 'getCurrencyCode',
        'unit_amount_cents' => 'getUnitAmountCents',
        'unit_amount_float' => 'getUnitAmountFloat',
        'formatted_unit_amount' => 'getFormattedUnitAmount',
        'options_amount_cents' => 'getOptionsAmountCents',
        'options_amount_float' => 'getOptionsAmountFloat',
        'formatted_options_amount' => 'getFormattedOptionsAmount',
        'discount_cents' => 'getDiscountCents',
        'discount_float' => 'getDiscountFloat',
        'formatted_discount' => 'getFormattedDiscount',
        'total_amount_cents' => 'getTotalAmountCents',
        'total_amount_float' => 'getTotalAmountFloat',
        'formatted_total_amount' => 'getFormattedTotalAmount',
        'tax_amount_cents' => 'getTaxAmountCents',
        'tax_amount_float' => 'getTaxAmountFloat',
        'formatted_tax_amount' => 'getFormattedTaxAmount',
        'name' => 'getName',
        'image_url' => 'getImageUrl',
        'discount_breakdown' => 'getDiscountBreakdown',
        'tax_rate' => 'getTaxRate',
        'tax_breakdown' => 'getTaxBreakdown',
        'item_type' => 'getItemType',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku_code'] = $data['sku_code'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['unit_amount_cents'] = $data['unit_amount_cents'] ?? null;
        $this->container['unit_amount_float'] = $data['unit_amount_float'] ?? null;
        $this->container['formatted_unit_amount'] = $data['formatted_unit_amount'] ?? null;
        $this->container['options_amount_cents'] = $data['options_amount_cents'] ?? null;
        $this->container['options_amount_float'] = $data['options_amount_float'] ?? null;
        $this->container['formatted_options_amount'] = $data['formatted_options_amount'] ?? null;
        $this->container['discount_cents'] = $data['discount_cents'] ?? null;
        $this->container['discount_float'] = $data['discount_float'] ?? null;
        $this->container['formatted_discount'] = $data['formatted_discount'] ?? null;
        $this->container['total_amount_cents'] = $data['total_amount_cents'] ?? null;
        $this->container['total_amount_float'] = $data['total_amount_float'] ?? null;
        $this->container['formatted_total_amount'] = $data['formatted_total_amount'] ?? null;
        $this->container['tax_amount_cents'] = $data['tax_amount_cents'] ?? null;
        $this->container['tax_amount_float'] = $data['tax_amount_float'] ?? null;
        $this->container['formatted_tax_amount'] = $data['formatted_tax_amount'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['image_url'] = $data['image_url'] ?? null;
        $this->container['discount_breakdown'] = $data['discount_breakdown'] ?? null;
        $this->container['tax_rate'] = $data['tax_rate'] ?? null;
        $this->container['tax_breakdown'] = $data['tax_breakdown'] ?? null;
        $this->container['item_type'] = $data['item_type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku_code
     *
     * @return string|null
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     *
     * @param string|null $sku_code The code of the associated sku.
     *
     * @return self
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The line item quantity.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The international 3-letter currency code as defined by the ISO 4217 standard, automatically inherited from the order's market.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets unit_amount_cents
     *
     * @return int|null
     */
    public function getUnitAmountCents()
    {
        return $this->container['unit_amount_cents'];
    }

    /**
     * Sets unit_amount_cents
     *
     * @param int|null $unit_amount_cents The unit amount of the line item, in cents. Can be specified without an item, otherwise is automatically populated from the price list associated to the order's market.
     *
     * @return self
     */
    public function setUnitAmountCents($unit_amount_cents)
    {
        $this->container['unit_amount_cents'] = $unit_amount_cents;

        return $this;
    }

    /**
     * Gets unit_amount_float
     *
     * @return float|null
     */
    public function getUnitAmountFloat()
    {
        return $this->container['unit_amount_float'];
    }

    /**
     * Sets unit_amount_float
     *
     * @param float|null $unit_amount_float The unit amount of the line item, float. This can be useful to track the purchase on thrid party systems, e.g Google Analyitcs Enhanced Ecommerce.
     *
     * @return self
     */
    public function setUnitAmountFloat($unit_amount_float)
    {
        $this->container['unit_amount_float'] = $unit_amount_float;

        return $this;
    }

    /**
     * Gets formatted_unit_amount
     *
     * @return string|null
     */
    public function getFormattedUnitAmount()
    {
        return $this->container['formatted_unit_amount'];
    }

    /**
     * Sets formatted_unit_amount
     *
     * @param string|null $formatted_unit_amount The unit amount of the line item, formatted. This can be useful to display the amount with currency in you views.
     *
     * @return self
     */
    public function setFormattedUnitAmount($formatted_unit_amount)
    {
        $this->container['formatted_unit_amount'] = $formatted_unit_amount;

        return $this;
    }

    /**
     * Gets options_amount_cents
     *
     * @return int|null
     */
    public function getOptionsAmountCents()
    {
        return $this->container['options_amount_cents'];
    }

    /**
     * Sets options_amount_cents
     *
     * @param int|null $options_amount_cents The options amount of the line item, in cents.
     *
     * @return self
     */
    public function setOptionsAmountCents($options_amount_cents)
    {
        $this->container['options_amount_cents'] = $options_amount_cents;

        return $this;
    }

    /**
     * Gets options_amount_float
     *
     * @return float|null
     */
    public function getOptionsAmountFloat()
    {
        return $this->container['options_amount_float'];
    }

    /**
     * Sets options_amount_float
     *
     * @param float|null $options_amount_float The options amount of the line item, float.
     *
     * @return self
     */
    public function setOptionsAmountFloat($options_amount_float)
    {
        $this->container['options_amount_float'] = $options_amount_float;

        return $this;
    }

    /**
     * Gets formatted_options_amount
     *
     * @return string|null
     */
    public function getFormattedOptionsAmount()
    {
        return $this->container['formatted_options_amount'];
    }

    /**
     * Sets formatted_options_amount
     *
     * @param string|null $formatted_options_amount The options amount of the line item, formatted.
     *
     * @return self
     */
    public function setFormattedOptionsAmount($formatted_options_amount)
    {
        $this->container['formatted_options_amount'] = $formatted_options_amount;

        return $this;
    }

    /**
     * Gets discount_cents
     *
     * @return int|null
     */
    public function getDiscountCents()
    {
        return $this->container['discount_cents'];
    }

    /**
     * Sets discount_cents
     *
     * @param int|null $discount_cents The discount applied to the line item, in cents. When you apply a discount to an order, this is automatically calculated basing on the line item total_amount_cents value.
     *
     * @return self
     */
    public function setDiscountCents($discount_cents)
    {
        $this->container['discount_cents'] = $discount_cents;

        return $this;
    }

    /**
     * Gets discount_float
     *
     * @return float|null
     */
    public function getDiscountFloat()
    {
        return $this->container['discount_float'];
    }

    /**
     * Sets discount_float
     *
     * @param float|null $discount_float The discount applied to the line item, float. When you apply a discount to an order, this is automatically calculated basing on the line item total_amount_cents value.
     *
     * @return self
     */
    public function setDiscountFloat($discount_float)
    {
        $this->container['discount_float'] = $discount_float;

        return $this;
    }

    /**
     * Gets formatted_discount
     *
     * @return string|null
     */
    public function getFormattedDiscount()
    {
        return $this->container['formatted_discount'];
    }

    /**
     * Sets formatted_discount
     *
     * @param string|null $formatted_discount The discount applied to the line item, fromatted. When you apply a discount to an order, this is automatically calculated basing on the line item total_amount_cents value.
     *
     * @return self
     */
    public function setFormattedDiscount($formatted_discount)
    {
        $this->container['formatted_discount'] = $formatted_discount;

        return $this;
    }

    /**
     * Gets total_amount_cents
     *
     * @return int|null
     */
    public function getTotalAmountCents()
    {
        return $this->container['total_amount_cents'];
    }

    /**
     * Sets total_amount_cents
     *
     * @param int|null $total_amount_cents Calculated as unit amount x quantity + options amount, in cents.
     *
     * @return self
     */
    public function setTotalAmountCents($total_amount_cents)
    {
        $this->container['total_amount_cents'] = $total_amount_cents;

        return $this;
    }

    /**
     * Gets total_amount_float
     *
     * @return float|null
     */
    public function getTotalAmountFloat()
    {
        return $this->container['total_amount_float'];
    }

    /**
     * Sets total_amount_float
     *
     * @param float|null $total_amount_float Calculated as unit amount x quantity + options amount, float. This can be useful to track the purchase on thrid party systems, e.g Google Analyitcs Enhanced Ecommerce.
     *
     * @return self
     */
    public function setTotalAmountFloat($total_amount_float)
    {
        $this->container['total_amount_float'] = $total_amount_float;

        return $this;
    }

    /**
     * Gets formatted_total_amount
     *
     * @return string|null
     */
    public function getFormattedTotalAmount()
    {
        return $this->container['formatted_total_amount'];
    }

    /**
     * Sets formatted_total_amount
     *
     * @param string|null $formatted_total_amount Calculated as unit amount x quantity + options amount, formatted. This can be useful to display the amount with currency in you views.
     *
     * @return self
     */
    public function setFormattedTotalAmount($formatted_total_amount)
    {
        $this->container['formatted_total_amount'] = $formatted_total_amount;

        return $this;
    }

    /**
     * Gets tax_amount_cents
     *
     * @return int|null
     */
    public function getTaxAmountCents()
    {
        return $this->container['tax_amount_cents'];
    }

    /**
     * Sets tax_amount_cents
     *
     * @param int|null $tax_amount_cents Calculated as total amount cents - discount cent * tax rate, in cents.
     *
     * @return self
     */
    public function setTaxAmountCents($tax_amount_cents)
    {
        $this->container['tax_amount_cents'] = $tax_amount_cents;

        return $this;
    }

    /**
     * Gets tax_amount_float
     *
     * @return float|null
     */
    public function getTaxAmountFloat()
    {
        return $this->container['tax_amount_float'];
    }

    /**
     * Sets tax_amount_float
     *
     * @param float|null $tax_amount_float Calculated as total amount cents - discount cent * tax rate, float.
     *
     * @return self
     */
    public function setTaxAmountFloat($tax_amount_float)
    {
        $this->container['tax_amount_float'] = $tax_amount_float;

        return $this;
    }

    /**
     * Gets formatted_tax_amount
     *
     * @return string|null
     */
    public function getFormattedTaxAmount()
    {
        return $this->container['formatted_tax_amount'];
    }

    /**
     * Sets formatted_tax_amount
     *
     * @param string|null $formatted_tax_amount Calculated as total amount cents - discount cent * tax rate, formatted.
     *
     * @return self
     */
    public function setFormattedTaxAmount($formatted_tax_amount)
    {
        $this->container['formatted_tax_amount'] = $formatted_tax_amount;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the line item. When blank, it gets populated with the name of the associated item (if present).
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url The image_url of the line item. When blank, it gets populated with the image_url of the associated item (if present, sku only).
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets discount_breakdown
     *
     * @return object|null
     */
    public function getDiscountBreakdown()
    {
        return $this->container['discount_breakdown'];
    }

    /**
     * Sets discount_breakdown
     *
     * @param object|null $discount_breakdown The discount breakdown for this line item (if calculated).
     *
     * @return self
     */
    public function setDiscountBreakdown($discount_breakdown)
    {
        $this->container['discount_breakdown'] = $discount_breakdown;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float|null $tax_rate The tax rate for this line item (if calculated).
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_breakdown
     *
     * @return object|null
     */
    public function getTaxBreakdown()
    {
        return $this->container['tax_breakdown'];
    }

    /**
     * Sets tax_breakdown
     *
     * @param object|null $tax_breakdown The tax breakdown for this line item (if calculated).
     *
     * @return self
     */
    public function setTaxBreakdown($tax_breakdown)
    {
        $this->container['tax_breakdown'] = $tax_breakdown;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type The type of the associate item. Can be one of 'sku', 'shipment', 'payment_method', 'adjustment', 'gift_card', or a valid promotion type.
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


