<?php
/**
 * GiftCardUpdateDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GiftCardUpdateDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GiftCardUpdateDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'giftCardUpdate_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'currency_code' => 'string',
        'balance_cents' => 'int',
        'balance_max_cents' => 'string',
        'single_use' => 'bool',
        'rechargeable' => 'bool',
        'image_url' => 'string',
        'expires_at' => 'string',
        'reference_origin' => 'string',
        'recipient_email' => 'string',
        '_purchase' => 'bool',
        '_activate' => 'bool',
        '_deactivate' => 'bool',
        '_balance_change_cents' => 'int',
        'reference' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'currency_code' => null,
        'balance_cents' => null,
        'balance_max_cents' => null,
        'single_use' => null,
        'rechargeable' => null,
        'image_url' => null,
        'expires_at' => null,
        'reference_origin' => null,
        'recipient_email' => null,
        '_purchase' => null,
        '_activate' => null,
        '_deactivate' => null,
        '_balance_change_cents' => null,
        'reference' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'currency_code',
        'balance_cents' => 'balance_cents',
        'balance_max_cents' => 'balance_max_cents',
        'single_use' => 'single_use',
        'rechargeable' => 'rechargeable',
        'image_url' => 'image_url',
        'expires_at' => 'expires_at',
        'reference_origin' => 'reference_origin',
        'recipient_email' => 'recipient_email',
        '_purchase' => '_purchase',
        '_activate' => '_activate',
        '_deactivate' => '_deactivate',
        '_balance_change_cents' => '_balance_change_cents',
        'reference' => 'reference',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'balance_cents' => 'setBalanceCents',
        'balance_max_cents' => 'setBalanceMaxCents',
        'single_use' => 'setSingleUse',
        'rechargeable' => 'setRechargeable',
        'image_url' => 'setImageUrl',
        'expires_at' => 'setExpiresAt',
        'reference_origin' => 'setReferenceOrigin',
        'recipient_email' => 'setRecipientEmail',
        '_purchase' => 'setPurchase',
        '_activate' => 'setActivate',
        '_deactivate' => 'setDeactivate',
        '_balance_change_cents' => 'setBalanceChangeCents',
        'reference' => 'setReference',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'balance_cents' => 'getBalanceCents',
        'balance_max_cents' => 'getBalanceMaxCents',
        'single_use' => 'getSingleUse',
        'rechargeable' => 'getRechargeable',
        'image_url' => 'getImageUrl',
        'expires_at' => 'getExpiresAt',
        'reference_origin' => 'getReferenceOrigin',
        'recipient_email' => 'getRecipientEmail',
        '_purchase' => 'getPurchase',
        '_activate' => 'getActivate',
        '_deactivate' => 'getDeactivate',
        '_balance_change_cents' => 'getBalanceChangeCents',
        'reference' => 'getReference',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['balance_cents'] = $data['balance_cents'] ?? null;
        $this->container['balance_max_cents'] = $data['balance_max_cents'] ?? null;
        $this->container['single_use'] = $data['single_use'] ?? null;
        $this->container['rechargeable'] = $data['rechargeable'] ?? null;
        $this->container['image_url'] = $data['image_url'] ?? null;
        $this->container['expires_at'] = $data['expires_at'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['recipient_email'] = $data['recipient_email'] ?? null;
        $this->container['_purchase'] = $data['_purchase'] ?? null;
        $this->container['_activate'] = $data['_activate'] ?? null;
        $this->container['_deactivate'] = $data['_deactivate'] ?? null;
        $this->container['_balance_change_cents'] = $data['_balance_change_cents'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The international 3-letter currency code as defined by the ISO 4217 standard.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets balance_cents
     *
     * @return int|null
     */
    public function getBalanceCents()
    {
        return $this->container['balance_cents'];
    }

    /**
     * Sets balance_cents
     *
     * @param int|null $balance_cents The gift card balance, in cents.
     *
     * @return self
     */
    public function setBalanceCents($balance_cents)
    {
        $this->container['balance_cents'] = $balance_cents;

        return $this;
    }

    /**
     * Gets balance_max_cents
     *
     * @return string|null
     */
    public function getBalanceMaxCents()
    {
        return $this->container['balance_max_cents'];
    }

    /**
     * Sets balance_max_cents
     *
     * @param string|null $balance_max_cents The gift card balance max, in cents.
     *
     * @return self
     */
    public function setBalanceMaxCents($balance_max_cents)
    {
        $this->container['balance_max_cents'] = $balance_max_cents;

        return $this;
    }

    /**
     * Gets single_use
     *
     * @return bool|null
     */
    public function getSingleUse()
    {
        return $this->container['single_use'];
    }

    /**
     * Sets single_use
     *
     * @param bool|null $single_use Indicates if the gift card can be used only one.
     *
     * @return self
     */
    public function setSingleUse($single_use)
    {
        $this->container['single_use'] = $single_use;

        return $this;
    }

    /**
     * Gets rechargeable
     *
     * @return bool|null
     */
    public function getRechargeable()
    {
        return $this->container['rechargeable'];
    }

    /**
     * Sets rechargeable
     *
     * @param bool|null $rechargeable Indicates if the gift card can be recharged.
     *
     * @return self
     */
    public function setRechargeable($rechargeable)
    {
        $this->container['rechargeable'] = $rechargeable;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url The URL of an image that represents the gift card.
     *
     * @return self
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string|null $expires_at Time at which the gift card will expire.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string|null
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string|null $recipient_email The email address of the associated recipient. When creating or updating a gift card, this is a shortcut to find or create the associated recipient by email.
     *
     * @return self
     */
    public function setRecipientEmail($recipient_email)
    {
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets _purchase
     *
     * @return bool|null
     */
    public function getPurchase()
    {
        return $this->container['_purchase'];
    }

    /**
     * Sets _purchase
     *
     * @param bool|null $_purchase Send this attribute if you want to confirm a draft gift card. The gift card becomes 'inactive', waiting to be activated.
     *
     * @return self
     */
    public function setPurchase($_purchase)
    {
        $this->container['_purchase'] = $_purchase;

        return $this;
    }

    /**
     * Gets _activate
     *
     * @return bool|null
     */
    public function getActivate()
    {
        return $this->container['_activate'];
    }

    /**
     * Sets _activate
     *
     * @param bool|null $_activate Send this attribute if you want to activate a gift card.
     *
     * @return self
     */
    public function setActivate($_activate)
    {
        $this->container['_activate'] = $_activate;

        return $this;
    }

    /**
     * Gets _deactivate
     *
     * @return bool|null
     */
    public function getDeactivate()
    {
        return $this->container['_deactivate'];
    }

    /**
     * Sets _deactivate
     *
     * @param bool|null $_deactivate Send this attribute if you want to deactivate a gift card.
     *
     * @return self
     */
    public function setDeactivate($_deactivate)
    {
        $this->container['_deactivate'] = $_deactivate;

        return $this;
    }

    /**
     * Gets _balance_change_cents
     *
     * @return int|null
     */
    public function getBalanceChangeCents()
    {
        return $this->container['_balance_change_cents'];
    }

    /**
     * Sets _balance_change_cents
     *
     * @param int|null $_balance_change_cents The balance change, in cents. Send a negative value to reduces the card balance by the specified amount. Send a positive value to recharge the gift card (if rechargeable).
     *
     * @return self
     */
    public function setBalanceChangeCents($_balance_change_cents)
    {
        $this->container['_balance_change_cents'] = $_balance_change_cents;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


