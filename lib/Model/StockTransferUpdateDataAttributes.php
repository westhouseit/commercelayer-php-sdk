<?php
/**
 * StockTransferUpdateDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StockTransferUpdateDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StockTransferUpdateDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'stockTransferUpdate_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sku_code' => 'string',
        '_upcoming' => 'bool',
        '_picking' => 'bool',
        '_in_transit' => 'bool',
        '_complete' => 'bool',
        '_cancel' => 'bool',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sku_code' => null,
        '_upcoming' => null,
        '_picking' => null,
        '_in_transit' => null,
        '_complete' => null,
        '_cancel' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku_code' => 'sku_code',
        '_upcoming' => '_upcoming',
        '_picking' => '_picking',
        '_in_transit' => '_in_transit',
        '_complete' => '_complete',
        '_cancel' => '_cancel',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku_code' => 'setSkuCode',
        '_upcoming' => 'setUpcoming',
        '_picking' => 'setPicking',
        '_in_transit' => 'setInTransit',
        '_complete' => 'setComplete',
        '_cancel' => 'setCancel',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku_code' => 'getSkuCode',
        '_upcoming' => 'getUpcoming',
        '_picking' => 'getPicking',
        '_in_transit' => 'getInTransit',
        '_complete' => 'getComplete',
        '_cancel' => 'getCancel',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku_code'] = $data['sku_code'] ?? null;
        $this->container['_upcoming'] = $data['_upcoming'] ?? null;
        $this->container['_picking'] = $data['_picking'] ?? null;
        $this->container['_in_transit'] = $data['_in_transit'] ?? null;
        $this->container['_complete'] = $data['_complete'] ?? null;
        $this->container['_cancel'] = $data['_cancel'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku_code
     *
     * @return string|null
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     *
     * @param string|null $sku_code The code of the associated sku.
     *
     * @return self
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets _upcoming
     *
     * @return bool|null
     */
    public function getUpcoming()
    {
        return $this->container['_upcoming'];
    }

    /**
     * Sets _upcoming
     *
     * @param bool|null $_upcoming Send this attribute if you want to mark this stock transfer as upcoming.
     *
     * @return self
     */
    public function setUpcoming($_upcoming)
    {
        $this->container['_upcoming'] = $_upcoming;

        return $this;
    }

    /**
     * Gets _picking
     *
     * @return bool|null
     */
    public function getPicking()
    {
        return $this->container['_picking'];
    }

    /**
     * Sets _picking
     *
     * @param bool|null $_picking Send this attribute if you want to start picking this stock transfer.
     *
     * @return self
     */
    public function setPicking($_picking)
    {
        $this->container['_picking'] = $_picking;

        return $this;
    }

    /**
     * Gets _in_transit
     *
     * @return bool|null
     */
    public function getInTransit()
    {
        return $this->container['_in_transit'];
    }

    /**
     * Sets _in_transit
     *
     * @param bool|null $_in_transit Send this attribute if you want to mark this stock transfer as in transit.
     *
     * @return self
     */
    public function setInTransit($_in_transit)
    {
        $this->container['_in_transit'] = $_in_transit;

        return $this;
    }

    /**
     * Gets _complete
     *
     * @return bool|null
     */
    public function getComplete()
    {
        return $this->container['_complete'];
    }

    /**
     * Sets _complete
     *
     * @param bool|null $_complete Send this attribute if you want to complete this stock transfer.
     *
     * @return self
     */
    public function setComplete($_complete)
    {
        $this->container['_complete'] = $_complete;

        return $this;
    }

    /**
     * Gets _cancel
     *
     * @return bool|null
     */
    public function getCancel()
    {
        return $this->container['_cancel'];
    }

    /**
     * Sets _cancel
     *
     * @param bool|null $_cancel Send this attribute if you want to cancel this stock transfer.
     *
     * @return self
     */
    public function setCancel($_cancel)
    {
        $this->container['_cancel'] = $_cancel;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


