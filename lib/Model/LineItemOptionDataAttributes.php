<?php
/**
 * LineItemOptionDataAttributes
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Layer API
 *
 * Headless Commerce for Global Brands.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: support@commercelayer.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LineItemOptionDataAttributes Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LineItemOptionDataAttributes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'lineItemOption_data_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'quantity' => 'int',
        'currency_code' => 'string',
        'unit_amount_cents' => 'int',
        'unit_amount_float' => 'float',
        'formatted_unit_amount' => 'string',
        'total_amount_cents' => 'int',
        'total_amount_float' => 'float',
        'formatted_total_amount' => 'string',
        'delay_hours' => 'int',
        'delay_days' => 'int',
        'options' => 'object',
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'reference' => 'string',
        'reference_origin' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'quantity' => null,
        'currency_code' => null,
        'unit_amount_cents' => null,
        'unit_amount_float' => null,
        'formatted_unit_amount' => null,
        'total_amount_cents' => null,
        'total_amount_float' => null,
        'formatted_total_amount' => null,
        'delay_hours' => null,
        'delay_days' => null,
        'options' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'reference' => null,
        'reference_origin' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'quantity' => 'quantity',
        'currency_code' => 'currency_code',
        'unit_amount_cents' => 'unit_amount_cents',
        'unit_amount_float' => 'unit_amount_float',
        'formatted_unit_amount' => 'formatted_unit_amount',
        'total_amount_cents' => 'total_amount_cents',
        'total_amount_float' => 'total_amount_float',
        'formatted_total_amount' => 'formatted_total_amount',
        'delay_hours' => 'delay_hours',
        'delay_days' => 'delay_days',
        'options' => 'options',
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'reference_origin' => 'reference_origin',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'quantity' => 'setQuantity',
        'currency_code' => 'setCurrencyCode',
        'unit_amount_cents' => 'setUnitAmountCents',
        'unit_amount_float' => 'setUnitAmountFloat',
        'formatted_unit_amount' => 'setFormattedUnitAmount',
        'total_amount_cents' => 'setTotalAmountCents',
        'total_amount_float' => 'setTotalAmountFloat',
        'formatted_total_amount' => 'setFormattedTotalAmount',
        'delay_hours' => 'setDelayHours',
        'delay_days' => 'setDelayDays',
        'options' => 'setOptions',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'reference_origin' => 'setReferenceOrigin',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'quantity' => 'getQuantity',
        'currency_code' => 'getCurrencyCode',
        'unit_amount_cents' => 'getUnitAmountCents',
        'unit_amount_float' => 'getUnitAmountFloat',
        'formatted_unit_amount' => 'getFormattedUnitAmount',
        'total_amount_cents' => 'getTotalAmountCents',
        'total_amount_float' => 'getTotalAmountFloat',
        'formatted_total_amount' => 'getFormattedTotalAmount',
        'delay_hours' => 'getDelayHours',
        'delay_days' => 'getDelayDays',
        'options' => 'getOptions',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'reference_origin' => 'getReferenceOrigin',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['currency_code'] = $data['currency_code'] ?? null;
        $this->container['unit_amount_cents'] = $data['unit_amount_cents'] ?? null;
        $this->container['unit_amount_float'] = $data['unit_amount_float'] ?? null;
        $this->container['formatted_unit_amount'] = $data['formatted_unit_amount'] ?? null;
        $this->container['total_amount_cents'] = $data['total_amount_cents'] ?? null;
        $this->container['total_amount_float'] = $data['total_amount_float'] ?? null;
        $this->container['formatted_total_amount'] = $data['formatted_total_amount'] ?? null;
        $this->container['delay_hours'] = $data['delay_hours'] ?? null;
        $this->container['delay_days'] = $data['delay_days'] ?? null;
        $this->container['options'] = $data['options'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_origin'] = $data['reference_origin'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the line item option. When blank, it gets populated with the name of the associated sku option.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The line item option's quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code The international 3-letter currency code as defined by the ISO 4217 standard, automatically inherited from the order's market.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets unit_amount_cents
     *
     * @return int|null
     */
    public function getUnitAmountCents()
    {
        return $this->container['unit_amount_cents'];
    }

    /**
     * Sets unit_amount_cents
     *
     * @param int|null $unit_amount_cents The unit amount of the line item option, in cents. When you add a line item option to an order, this is automatically populated from associated sku option's price.
     *
     * @return self
     */
    public function setUnitAmountCents($unit_amount_cents)
    {
        $this->container['unit_amount_cents'] = $unit_amount_cents;

        return $this;
    }

    /**
     * Gets unit_amount_float
     *
     * @return float|null
     */
    public function getUnitAmountFloat()
    {
        return $this->container['unit_amount_float'];
    }

    /**
     * Sets unit_amount_float
     *
     * @param float|null $unit_amount_float The unit amount of the line item option, float. This can be useful to track the purchase on thrid party systems, e.g Google Analyitcs Enhanced Ecommerce.
     *
     * @return self
     */
    public function setUnitAmountFloat($unit_amount_float)
    {
        $this->container['unit_amount_float'] = $unit_amount_float;

        return $this;
    }

    /**
     * Gets formatted_unit_amount
     *
     * @return string|null
     */
    public function getFormattedUnitAmount()
    {
        return $this->container['formatted_unit_amount'];
    }

    /**
     * Sets formatted_unit_amount
     *
     * @param string|null $formatted_unit_amount The unit amount of the line item option, formatted. This can be useful to display the amount with currency in you views.
     *
     * @return self
     */
    public function setFormattedUnitAmount($formatted_unit_amount)
    {
        $this->container['formatted_unit_amount'] = $formatted_unit_amount;

        return $this;
    }

    /**
     * Gets total_amount_cents
     *
     * @return int|null
     */
    public function getTotalAmountCents()
    {
        return $this->container['total_amount_cents'];
    }

    /**
     * Sets total_amount_cents
     *
     * @param int|null $total_amount_cents The unit amount x quantity, in cents.
     *
     * @return self
     */
    public function setTotalAmountCents($total_amount_cents)
    {
        $this->container['total_amount_cents'] = $total_amount_cents;

        return $this;
    }

    /**
     * Gets total_amount_float
     *
     * @return float|null
     */
    public function getTotalAmountFloat()
    {
        return $this->container['total_amount_float'];
    }

    /**
     * Sets total_amount_float
     *
     * @param float|null $total_amount_float The unit amount x quantity, float. This can be useful to track the purchase on thrid party systems, e.g Google Analyitcs Enhanced Ecommerce.
     *
     * @return self
     */
    public function setTotalAmountFloat($total_amount_float)
    {
        $this->container['total_amount_float'] = $total_amount_float;

        return $this;
    }

    /**
     * Gets formatted_total_amount
     *
     * @return string|null
     */
    public function getFormattedTotalAmount()
    {
        return $this->container['formatted_total_amount'];
    }

    /**
     * Sets formatted_total_amount
     *
     * @param string|null $formatted_total_amount The unit amount x quantity, formatted. This can be useful to display the amount with currency in you views.
     *
     * @return self
     */
    public function setFormattedTotalAmount($formatted_total_amount)
    {
        $this->container['formatted_total_amount'] = $formatted_total_amount;

        return $this;
    }

    /**
     * Gets delay_hours
     *
     * @return int|null
     */
    public function getDelayHours()
    {
        return $this->container['delay_hours'];
    }

    /**
     * Sets delay_hours
     *
     * @param int|null $delay_hours The shipping delay that the customer can expect when adding this option (hours). Inherited from the associated sku option.
     *
     * @return self
     */
    public function setDelayHours($delay_hours)
    {
        $this->container['delay_hours'] = $delay_hours;

        return $this;
    }

    /**
     * Gets delay_days
     *
     * @return int|null
     */
    public function getDelayDays()
    {
        return $this->container['delay_days'];
    }

    /**
     * Sets delay_days
     *
     * @param int|null $delay_days The shipping delay that the customer can expect when adding this option (days, rounded).
     *
     * @return self
     */
    public function setDelayDays($delay_days)
    {
        $this->container['delay_days'] = $delay_days;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object|null $options Set of key-value pairs that represent the selected options.
     *
     * @return self
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the resource (hash).
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time at which the resource was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time at which the resource was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_origin
     *
     * @return string|null
     */
    public function getReferenceOrigin()
    {
        return $this->container['reference_origin'];
    }

    /**
     * Sets reference_origin
     *
     * @param string|null $reference_origin Any identifier of the third party system that defines the reference code
     *
     * @return self
     */
    public function setReferenceOrigin($reference_origin)
    {
        $this->container['reference_origin'] = $reference_origin;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


